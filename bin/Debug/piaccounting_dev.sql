/*
Navicat MySQL Data Transfer

Source Server         : mysql_local3309
Source Server Version : 50522
Source Host           : localhost:3309
Source Database       : piaccounting_dev

Target Server Type    : MYSQL
Target Server Version : 50522
File Encoding         : 65001

Date: 2015-10-23 17:09:38
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for account_general_setup
-- ----------------------------
DROP TABLE IF EXISTS `account_general_setup`;
CREATE TABLE `account_general_setup` (
  `account_length` double DEFAULT NULL,
  `use_separator` int(11) DEFAULT NULL,
  `separator_text` varchar(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of account_general_setup
-- ----------------------------
INSERT INTO `account_general_setup` VALUES ('6', '0', '-');

-- ----------------------------
-- Table structure for ap_status
-- ----------------------------
DROP TABLE IF EXISTS `ap_status`;
CREATE TABLE `ap_status` (
  `no_purchase` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_supplier` varchar(30) DEFAULT NULL,
  `purchase_amount` double DEFAULT NULL,
  `return_amount` double DEFAULT NULL,
  `disc_amount` double DEFAULT NULL,
  `paid_amount` double DEFAULT NULL,
  `balance` double DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  KEY `ar_status_no_sales_fkey` (`no_purchase`),
  KEY `ar_status_cust_id_fkey` (`id_supplier`),
  CONSTRAINT `ap_status_ibfk_2` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of ap_status
-- ----------------------------
INSERT INTO `ap_status` VALUES ('FRM/PU/4-2015-00001', '2015-04-10 00:00:00', 'SUPP.000001', '250000', null, null, null, null, 'Invoice Example');
INSERT INTO `ap_status` VALUES ('FRM/PU/8-2015-00001', '2015-08-01 00:00:00', 'SUPP.000002', '4130000', null, '0', '4130000', '0', 'Purchase Invoice Demo 8-2015-000001/PO 7-2015-000001');
INSERT INTO `ap_status` VALUES ('FRM/PU/8-2015-00002', '2015-08-03 00:00:00', 'SUPP.000002', '1114900', null, '0', '0', '1114900', 'Purchase Invoice Demo 8-2015-000002');
INSERT INTO `ap_status` VALUES ('FRM/PU/8-2015-00003', '2015-08-07 00:00:00', 'SUPP.000001', '237600', null, null, null, null, 'Purchase Invoice Demo 8-2015-000003');
INSERT INTO `ap_status` VALUES ('FRM/PU/8-2015-00004', '2015-08-10 00:00:00', 'SUPP.000001', '1127500', null, null, null, null, 'Purchase Invoice Demo 8-2015-000004');
INSERT INTO `ap_status` VALUES ('FRM/PU/8-2015-00005', '2015-08-17 00:00:00', 'SUPP.000001', '682000', null, null, null, null, 'Purchase Invoice Demo 8-2015-000005');
INSERT INTO `ap_status` VALUES ('FRM/PU/9-2015-00001', '2015-09-01 00:00:00', 'SUPP.000001', '4081000', null, null, null, null, 'Purchase Invoice Demo 9-2015-00001');
INSERT INTO `ap_status` VALUES ('FRM/PU/9-2015-00002', '2015-09-03 00:00:00', 'SUPP.000001', '7128000', null, null, null, null, 'Purchase Invoice Demo 9-2015-00002');
INSERT INTO `ap_status` VALUES ('FRM/PU/09-2015-00003', '2015-09-14 00:00:00', 'SUPP.000002', '2689500', '64900', '53790', '2570810', '0', 'Purchase Invoice Demo');
INSERT INTO `ap_status` VALUES ('INV/2014-01-000001', '2015-09-14 00:00:00', 'SUPP.000001', '4500000', '0', '0', '0', '0', '');
INSERT INTO `ap_status` VALUES ('INV/2015-01-000002', '2015-09-14 00:00:00', 'SUPP.000001', '900000', '0', '0', '0', '0', '');
INSERT INTO `ap_status` VALUES ('FRM/PU/09-2015-00004', '2015-09-16 00:00:00', 'SUPP.000003', '3905000', null, '78100', '3826900', '0', 'Invoice');

-- ----------------------------
-- Table structure for ar_status
-- ----------------------------
DROP TABLE IF EXISTS `ar_status`;
CREATE TABLE `ar_status` (
  `no_sales` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_customer` varchar(30) DEFAULT NULL,
  `sales_amount` double DEFAULT NULL,
  `return_amount` double DEFAULT NULL,
  `disc_amount` double DEFAULT NULL,
  `paid_amount` double DEFAULT NULL,
  `balance` double DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  KEY `ar_status_no_sales_fkey` (`no_sales`),
  KEY `ar_status_cust_id_fkey` (`id_customer`),
  CONSTRAINT `ar_status_ibfk_1` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of ar_status
-- ----------------------------
INSERT INTO `ar_status` VALUES ('FRM/SA/4-2015-00001', '2015-04-10 00:00:00', 'CUST.000001', '27500', null, '550', '26950', '0', 'SO Example');
INSERT INTO `ar_status` VALUES ('FRM/SA/4-2015-00002', '2015-04-10 00:00:00', 'CUST.000001', '27500', null, '0', '27500', '0', 'SO Example');
INSERT INTO `ar_status` VALUES ('FRM/SA/8-2015-00001', '2015-08-07 00:00:00', 'CUST.000002', '90200', null, null, null, null, 'SO Demo 8-2015-000001');
INSERT INTO `ar_status` VALUES ('FRM/SA/09-2015-00001', '2015-09-14 00:00:00', 'CUST.000003', '368500', null, null, null, null, 'Sales Invoice Demo');
INSERT INTO `ar_status` VALUES ('INV/AR/2015-01-00001', '2015-09-15 00:00:00', 'CUST.000002', '800000', '0', '0', '0', '0', '');
INSERT INTO `ar_status` VALUES ('FRM/SA/10-2015-00002', '2015-10-01 00:00:00', 'CUST.000001', '325975', null, null, null, null, 'Demo SO');

-- ----------------------------
-- Table structure for control_no_master
-- ----------------------------
DROP TABLE IF EXISTS `control_no_master`;
CREATE TABLE `control_no_master` (
  `form` varchar(25) NOT NULL DEFAULT '',
  `prefix` varchar(10) DEFAULT NULL,
  `nourut` varchar(10) DEFAULT NULL,
  `keterangan` text,
  PRIMARY KEY (`form`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of control_no_master
-- ----------------------------
INSERT INTO `control_no_master` VALUES ('FORMULA BIAYA', 'COST-BOM.', '000000', 'NOURUT FORMULA BIAYA');
INSERT INTO `control_no_master` VALUES ('MASTER BIAYA', 'COST.', '000000', 'NOURUT MASTER BIAYA');
INSERT INTO `control_no_master` VALUES ('MASTER CUSTOMER', 'C.', '000010', 'NOURUT MASTER CUSTOMER');
INSERT INTO `control_no_master` VALUES ('MASTER MARKETING', 'E.', '000003', 'NOURUT MASTER MARKETING');
INSERT INTO `control_no_master` VALUES ('MASTER SUPPLIER', 'S.', '000003', 'NOURUT MASTER SUPPLIER');

-- ----------------------------
-- Table structure for control_no_trans
-- ----------------------------
DROP TABLE IF EXISTS `control_no_trans`;
CREATE TABLE `control_no_trans` (
  `form` varchar(25) NOT NULL DEFAULT '',
  `prefix` varchar(10) DEFAULT NULL,
  `nourut` varchar(10) DEFAULT NULL,
  `bulan` int(11) DEFAULT NULL,
  `tahun` int(11) DEFAULT NULL,
  `keterangan` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of control_no_trans
-- ----------------------------
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '2', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '2', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '2', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '2', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '2', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '2', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '2', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '2', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '2', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '1', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '2', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '3', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '4', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '5', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '6', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '7', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '2', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '2', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '2', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_SERVICE', 'FRM/SVC', '00000', '2', '2014', 'SALES SERVICE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_SERVICE', 'FRM/SVC', '00000', '3', '2014', 'SALES SERVICE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '3', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '3', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '3', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '3', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '3', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '3', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '3', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '3', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '3', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '3', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_SERVICE', 'FRM/SVC', '00000', '4', '2014', 'SALES SERVICE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '4', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '4', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '4', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '4', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '4', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '4', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '4', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '4', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '4', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '4', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '4', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '4', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '5', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '5', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '5', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'SRU/SRU', '00000', '5', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '5', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '5', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '5', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '5', '2014', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '5', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '5', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '5', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '5', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '5', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_SERVICE', 'FRM/SVC', '00000', '5', '2014', 'SALES SERVICE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '1', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '6', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '6', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '6', '2014', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '6', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '6', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '6', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '6', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '6', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_SERVICE', 'FRM/SVC', '00000', '6', '2014', 'SALES SERVICE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '6', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '6', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '6', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '6', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '6', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '6', '2014', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '7', '2014', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '7', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '7', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '7', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '7', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '7', '2014', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '7', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '7', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '7', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '7', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '7', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '7', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '7', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '7', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '8', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '8', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '8', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '8', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '8', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '8', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '8', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '8', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '1', '2014', 'REQUEST ORDER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '8', '2014', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '9', '2014', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '9', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '9', '2014', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '9', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '9', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '9', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '9', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00000', '9', '2014', 'RECEIVED_ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('REC', null, '00000', '9', '2014', null);
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '9', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '9', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '9', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '9', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '9', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '9', '2014', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '9', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '9', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '9', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00000', '9', '2014', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '10', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '10', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00000', '10', '2014', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '10', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '10', '2014', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '10', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '10', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '10', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '10', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00000', '10', '2014', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '10', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '10', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '10', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00000', '10', '2014', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '10', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '10', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '11', '2014', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '11', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00000', '11', '2014', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '11', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '11', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '11', '2014', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_SERVICE', 'FRM/SVC', '00000', '11', '2014', 'SALES SERVICE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '11', '2014', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '12', '2014', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '12', '2014', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '12', '2014', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00000', '12', '2014', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '12', '2014', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '12', '2014', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '12', '2014', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '12', '2014', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00000', '12', '2014', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '12', '2014', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '12', '2014', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '12', '2014', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '12', '2014', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '12', '2014', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '12', '2014', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '12', '2014', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '12', '2014', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '12', '2014', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_SERVICE', 'FRM/SVC', '00000', '12', '2014', 'SALES SERVICE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '1', '2015', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00000', '1', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '1', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00000', '1', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '1', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '1', '2015', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '1', '2015', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '1', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00000', '1', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '1', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '1', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '1', '2015', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '1', '2015', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '1', '2015', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '1', '2015', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '1', '2015', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '1', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '1', '2015', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '1', '2015', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '2', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '2', '2015', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00000', '2', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '2', '2015', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '2', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '2', '2015', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '2', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00000', '2', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '2', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '2', '2015', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '2', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '2', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '2', '2015', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '2', '2015', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00000', '2', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '2', '2015', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '3', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00000', '3', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '3', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00002', '4', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00002', '4', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00002', '4', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '5', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '2', '2015', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '2', '2015', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '2', '2015', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER_RETURN', 'FRM/CSU', '00000', '2', '2015', 'CASHIER RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00000', '3', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '3', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00000', '3', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '3', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00000', '3', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '3', '2015', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER_RETURN', 'FRM/CSU', '00000', '3', '2015', 'CASHIER RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'FRM/SRU', '00000', '3', '2015', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '3', '2015', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '3', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '3', '2015', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '3', '2015', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '3', '2015', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00000', '3', '2015', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00001', '4', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00001', '4', '2015', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00001', '4', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00001', '4', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00001', '4', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00001', '4', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00001', '4', '2015', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '4', '2015', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '4', '2015', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00001', '4', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER_RETURN', 'FRM/CSU', '00000', '4', '2015', 'CASHIER RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '6', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00000', '6', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '6', '2015', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00001', '7', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00007', '7', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00005', '7', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '7', '2015', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'FRM/ADS', '00000', '7', '2015', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '7', '2015', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00004', '7', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00000', '7', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00000', '7', '2015', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '7', '2015', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00000', '7', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'FRM/RCM', '00000', '7', '2015', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '7', '2015', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '7', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00005', '8', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'FRM/SO', '00005', '8', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00000', '7', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'FRM/SA', '00001', '8', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00000', '7', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'FRM/DO', '00001', '8', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00002', '8', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'FRM/REV', '00004', '8', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'FRM/PU', '00004', '9', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'FRM/CSH', '00000', '8', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'FRM/TRF', '00000', '8', '2015', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '8', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'FRM/RO', '00000', '8', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'FRM/SPM', '00000', '8', '2015', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00000', '8', '2015', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'FRM/PRU', '00001', '9', '2015', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'FRM/PAP', '00002', '9', '2015', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'FRM/PAR', '00001', '9', '2015', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'FRM/REC', '00000', '9', '2015', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'FRM/JU', '00000', '9', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'FRM/OPN', '00000', '9', '2015', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'FRM/PO', '00002', '9', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER_RETURN', 'FRM/CSU', '00000', '9', '2015', 'CASHIER RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('MASTER_ITEM', '', '000003', '9', '2015', 'MASTER ITEM');
INSERT INTO `control_no_trans` VALUES ('RO', 'RO', '00002', '9', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'REV', '00002', '9', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'SPM', '00001', '9', '2015', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'SO', '00004', '9', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'RCM', '00001', '9', '2015', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'CSH', '00001', '9', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'SA', '00001', '9', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'DO', '00004', '9', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES', 'SA', '00002', '10', '2015', 'SALES FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_RETURN', 'SRU', '00000', '10', '2015', 'SALES_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER', 'CSH', '00000', '10', '2015', 'CASHIER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('MASTER_ITEM', '', '000000', '10', '2015', 'MASTER ITEM');
INSERT INTO `control_no_trans` VALUES ('JOURNAL', 'JU', '00000', '10', '2015', 'GENERAL JOURNAL FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE', 'PU', '00000', '10', '2015', 'PURCHASE FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RO', 'RO', '00001', '10', '2015', 'REQUEST ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PO', 'PO', '00000', '10', '2015', 'PURCHASE ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('CASHIER_RETURN', 'CSU', '00000', '10', '2015', 'CASHIER RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVEMONEY', 'RCM', '00000', '10', '2015', 'RECEIVE MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SALES_ORDER', 'SO', '00000', '10', '2015', 'SALES ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('DELIVERED_ITEM', 'DO', '00000', '10', '2015', 'DELIVERED ITEM FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('MASTER_EXPEDITION', 'EXP', '000003', '10', '2015', 'MASTER ITEM');
INSERT INTO `control_no_trans` VALUES ('OPNAME', 'OPN', '00000', '10', '2015', 'STOCK OPNAME FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('ADJUSTSTOCK', 'ADS', '00000', '10', '2015', 'ADJUST STOCK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('TRFSTOCK', 'TRF', '00000', '10', '2015', 'WAREHOUSE TRANSFER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECEIVED_ORDER', 'REV', '00000', '10', '2015', 'RECEIVED ORDER FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PURCHASE_RETURN', 'PRU', '00000', '10', '2015', 'PURCHASE_RETURN FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('SPENDMONEY', 'SPM', '00000', '10', '2015', 'SPEND MONEY FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('RECONCILE', 'REC', '00000', '10', '2015', 'RECONCILE BANK FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAP', 'PAP', '00000', '10', '2015', 'PAY AP FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('PAYAR', 'PAR', '00000', '10', '2015', 'PAY AR FORM NUMBER');
INSERT INTO `control_no_trans` VALUES ('MASTER_GOLASET', 'GOL', '000004', '10', '2015', 'MASTER GOLONGAN ASET');
INSERT INTO `control_no_trans` VALUES ('MASTER_ASET', 'AST', '000003', '10', '2015', 'MASTER ASET');
INSERT INTO `control_no_trans` VALUES ('ADJUST_JOURNAL', 'ADJ', '00001', '10', '2015', 'ADJUSTMENT JOURNAL');
INSERT INTO `control_no_trans` VALUES ('DEPR_JOURNAL', 'DEP', '00001', '10', '2015', 'DEPRECIATION JOURNAL');

-- ----------------------------
-- Table structure for i_accounting_period
-- ----------------------------
DROP TABLE IF EXISTS `i_accounting_period`;
CREATE TABLE `i_accounting_period` (
  `periode` int(11) NOT NULL,
  `year` int(11) DEFAULT NULL,
  `last_closed_date` datetime DEFAULT NULL,
  `lock_status` int(11) DEFAULT NULL,
  PRIMARY KEY (`periode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_accounting_period
-- ----------------------------
INSERT INTO `i_accounting_period` VALUES ('3', '2015', '2015-03-20 00:00:00', '0');

-- ----------------------------
-- Table structure for i_aset_depreciation
-- ----------------------------
DROP TABLE IF EXISTS `i_aset_depreciation`;
CREATE TABLE `i_aset_depreciation` (
  `id_accasetdep` varchar(30) NOT NULL DEFAULT '',
  `id_aset` varchar(30) DEFAULT NULL,
  `nominal` double DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `notes` varchar(160) DEFAULT NULL,
  `period` double DEFAULT NULL,
  `years` double DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_aset_depreciation
-- ----------------------------
INSERT INTO `i_aset_depreciation` VALUES ('DEP/10-2015-00001', 'AST1015000001', '72917', '2015-10-18', 'Penyusutan Aset', '10', '2015', '2015-10-18 00:00:00', '2015-10-18 00:00:00', 'admin', 'admin');
INSERT INTO `i_aset_depreciation` VALUES ('DEP/10-2015-00001', 'AST1015000002', '83333', '2015-10-18', 'Penyusutan Aset', '10', '2015', '2015-10-18 00:00:00', '2015-10-18 00:00:00', 'admin', 'admin');
INSERT INTO `i_aset_depreciation` VALUES ('DEP/10-2015-00001', 'AST1015000003', '83333', '2015-10-18', 'Penyusutan Aset', '10', '2015', '2015-10-18 00:00:00', '2015-10-18 00:00:00', 'admin', 'admin');

-- ----------------------------
-- Table structure for i_cashbank_setup
-- ----------------------------
DROP TABLE IF EXISTS `i_cashbank_setup`;
CREATE TABLE `i_cashbank_setup` (
  `id_account` varchar(255) DEFAULT NULL,
  `id_cashbank` varchar(255) NOT NULL,
  `modified_by` varchar(120) NOT NULL,
  `modified_at` date NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_cashbank_setup
-- ----------------------------
INSERT INTO `i_cashbank_setup` VALUES ('1-1101', '1', 'admin', '2015-04-10');
INSERT INTO `i_cashbank_setup` VALUES ('1-1102', '1', 'admin', '2015-04-10');
INSERT INTO `i_cashbank_setup` VALUES ('1-1199', '1', 'admin', '2015-04-10');
INSERT INTO `i_cashbank_setup` VALUES ('1-1103', '2', 'admin', '2015-04-10');
INSERT INTO `i_cashbank_setup` VALUES ('1-1104', '2', 'admin', '2015-04-10');
INSERT INTO `i_cashbank_setup` VALUES ('1-1105', '2', 'admin', '2015-04-10');

-- ----------------------------
-- Table structure for i_cogs
-- ----------------------------
DROP TABLE IF EXISTS `i_cogs`;
CREATE TABLE `i_cogs` (
  `no_urut` int(11) NOT NULL AUTO_INCREMENT,
  `no_bukti` varchar(120) NOT NULL,
  `id_item` varchar(120) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `akum_qty` int(11) DEFAULT NULL,
  `cogs` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`no_urut`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of i_cogs
-- ----------------------------

-- ----------------------------
-- Table structure for i_cogs_acc_setting
-- ----------------------------
DROP TABLE IF EXISTS `i_cogs_acc_setting`;
CREATE TABLE `i_cogs_acc_setting` (
  `id_account_inv` varchar(120) DEFAULT NULL,
  `id_account_cogs` varchar(120) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of i_cogs_acc_setting
-- ----------------------------

-- ----------------------------
-- Table structure for i_hakakses
-- ----------------------------
DROP TABLE IF EXISTS `i_hakakses`;
CREATE TABLE `i_hakakses` (
  `parentkey` varchar(120) NOT NULL,
  `childkey` varchar(120) NOT NULL,
  `username` varchar(60) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_hakakses
-- ----------------------------
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_CARDFILE', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_STOCK', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_PURCHASE', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_SALES', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_OUTLET_SALES', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_CASH_BANK', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_ASET', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_ACCOUNT', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_TOOLS', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CUSTOMER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CUSTOMER', 'MN_CUSTOMER_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CUSTOMER', 'MN_CUSTOMER_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CUSTOMER', 'MN_CUSTOMER_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_SUPPLIER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SUPPLIER', 'MN_SUPPLIER_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SUPPLIER', 'MN_SUPPLIER_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SUPPLIER', 'MN_SUPPLIER_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_EMPLOYEE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_EMPLOYEE', 'MN_EMPLOYEE_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_EMPLOYEE', 'MN_EMPLOYEE_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_EMPLOYEE', 'MN_EMPLOYEE_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CARD_LIST', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_TYPE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_TYPE', 'MN_ITEM_TYPE_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_TYPE', 'MN_ITEM_TYPE_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_TYPE', 'MN_ITEM_TYPE_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_CAT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_CAT', 'MN_ITEM_CAT_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_CAT', 'MN_ITEM_CAT_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_CAT', 'MN_ITEM_CAT_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_BRAND', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_BRAND', 'MN_ITEM_BRAND_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_BRAND', 'MN_ITEM_BRAND_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_BRAND', 'MN_ITEM_BRAND_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_NAME', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_NAME', 'MN_ITEM_NAME_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_NAME', 'MN_ITEM_NAME_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_NAME', 'MN_ITEM_NAME_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_BEGINING_BALANCE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_JENIS_JASA', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_JENIS_JASA', 'MN_JENIS_JASA_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_JENIS_JASA', 'MN_JENIS_JASA_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_JENIS_JASA', 'MN_JENIS_JASA_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_UNIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_UNIT', 'MN_UNIT_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_UNIT', 'MN_UNIT_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_UNIT', 'MN_UNIT_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_UNIT_CONVERSION', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_WAREHOUSE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_WAREHOUSE', 'MN_WAREHOUSE_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_WAREHOUSE', 'MN_WAREHOUSE_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_WAREHOUSE', 'MN_WAREHOUSE_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CURRENCY', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY', 'MN_CURRENCY_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY', 'MN_CURRENCY_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY', 'MN_CURRENCY_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CURRENCY_CONVERSION', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_EXPEDITION', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_EXPEDITION', 'MN_EXPEDITION_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_EXPEDITION', 'MN_EXPEDITION_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_EXPEDITION', 'MN_EXPEDITION_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CARD_FILE_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_STOCK_OPNAME', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_STOCK_CORRECTION', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_MOVE_ITEM', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_MOVE_ITEM', 'MN_MOVE_ITEM_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_MOVE_ITEM', 'MN_MOVE_ITEM_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_MOVE_ITEM', 'MN_MOVE_ITEM_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_ITEM_LIST', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_STOCK_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_RO', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_APPROVAL_RO', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PO', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_RECEIVED_ORDER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PURCHASE_INV', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PURCHASE_RETURN', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_AP_INITBALANCE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PEMBAYARAN_HUTANG', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_STATUS_HUTANG', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PURCHASE_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_AP_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SET_MARKETING', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SET_MARKETING', 'MN_SET_MARKETING_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SO', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_DELIVERED_ITEM', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SALES_INV', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SALES_RETURN', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_AR_INITBALANCE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_PAYMENT_AR', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_AR_STATUS', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_LAPORAN_JUAL', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_LAPORAN_PIUTANG', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_CASHIER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_CASHIER_RETURN', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_CASHIER_REGISTER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_MUTASI_CASHIER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_RECEIPT_MONEY', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_SPEND_MONEY', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_CASHBANK_REGISTER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_BANK_RECONCILE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_CASHBANK_TRANS_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_CASHBANK_RECAP_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_GOLONGAN_ASET', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_GOLONGAN_ASET', 'MN_GOLONGAN_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_GOLONGAN_ASET', 'MN_GOLONGAN_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_GOLONGAN_ASET', 'MN_GOLONGAN_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_NAMA_ASET', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_NAMA_ASET', 'MN_NAMA_ASET_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_NAMA_ASET', 'MN_NAMA_ASET_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_NAMA_ASET', 'MN_NAMA_ASET_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_DEPR_ASET', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_COA', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_COA_SETUP', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_CASHBANK_SETUP', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_COA_ASET_SETUP', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_JOURNAL', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_ADJUST_JOURNAL', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_EDIT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_ADD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_DELETE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_PRINT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_JOURNAL_LIST', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_LEDGER', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_CLOSE_PERIOD', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_ACCOUNTING_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_ANALYST_REPORT', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_BACKUP', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_RESTORE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_LOG', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_USERMANAGE', 'admin');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_SET_PATH', 'admin');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_CARDFILE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CUSTOMER', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CUSTOMER', 'MN_CUSTOMER_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CUSTOMER', 'MN_CUSTOMER_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CUSTOMER', 'MN_CUSTOMER_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_SUPPLIER', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SUPPLIER', 'MN_SUPPLIER_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SUPPLIER', 'MN_SUPPLIER_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SUPPLIER', 'MN_SUPPLIER_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_EMPLOYEE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_EMPLOYEE', 'MN_EMPLOYEE_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_EMPLOYEE', 'MN_EMPLOYEE_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_EMPLOYEE', 'MN_EMPLOYEE_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CARD_LIST', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_TYPE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_TYPE', 'MN_ITEM_TYPE_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_TYPE', 'MN_ITEM_TYPE_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_TYPE', 'MN_ITEM_TYPE_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_CAT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_CAT', 'MN_ITEM_CAT_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_CAT', 'MN_ITEM_CAT_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_CAT', 'MN_ITEM_CAT_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_BRAND', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_BRAND', 'MN_ITEM_BRAND_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_BRAND', 'MN_ITEM_BRAND_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_BRAND', 'MN_ITEM_BRAND_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_ITEM_NAME', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_NAME', 'MN_ITEM_NAME_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_NAME', 'MN_ITEM_NAME_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ITEM_NAME', 'MN_ITEM_NAME_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_BEGINING_BALANCE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_JENIS_JASA', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_JENIS_JASA', 'MN_JENIS_JASA_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_JENIS_JASA', 'MN_JENIS_JASA_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_JENIS_JASA', 'MN_JENIS_JASA_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_UNIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_UNIT', 'MN_UNIT_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_UNIT', 'MN_UNIT_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_UNIT', 'MN_UNIT_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_UNIT_CONVERSION', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_WAREHOUSE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_WAREHOUSE', 'MN_WAREHOUSE_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_WAREHOUSE', 'MN_WAREHOUSE_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_WAREHOUSE', 'MN_WAREHOUSE_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CURRENCY', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY', 'MN_CURRENCY_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY', 'MN_CURRENCY_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY', 'MN_CURRENCY_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CURRENCY_CONVERSION', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_EXPEDITION', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_EXPEDITION', 'MN_EXPEDITION_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_EXPEDITION', 'MN_EXPEDITION_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_EXPEDITION', 'MN_EXPEDITION_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CARDFILE', 'MN_CARD_FILE_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_STOCK', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_STOCK_OPNAME', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_STOCK_CORRECTION', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_MOVE_ITEM', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_MOVE_ITEM', 'MN_MOVE_ITEM_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_MOVE_ITEM', 'MN_MOVE_ITEM_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_MOVE_ITEM', 'MN_MOVE_ITEM_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_ITEM_LIST', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_STOCK', 'MN_STOCK_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_PURCHASE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_RO', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RO', 'MN_RO_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_APPROVAL_RO', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PO', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PO', 'MN_PO_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_RECEIVED_ORDER', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PURCHASE_INV', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_INV', 'MN_PURCHASE_INV_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PURCHASE_RETURN', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_AP_INITBALANCE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PEMBAYARAN_HUTANG', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_STATUS_HUTANG', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_PURCHASE_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PURCHASE', 'MN_AP_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_SALES', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SET_MARKETING', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SET_MARKETING', 'MN_SET_MARKETING_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SO', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SO', 'MN_SO_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_DELIVERED_ITEM', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SALES_INV', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_INV', 'MN_SALES_INV_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_SALES_RETURN', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES_RETURN', 'MN_SALES_RETURN_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_AR_INITBALANCE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_PAYMENT_AR', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_PAYMENT_AR', 'MN_PAYMENT_AR_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_AR_STATUS', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_LAPORAN_JUAL', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SALES', 'MN_LAPORAN_PIUTANG', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_OUTLET_SALES', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_CASHIER', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER', 'MN_CASHIER_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_CASHIER_RETURN', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_CASHIER_REGISTER', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_OUTLET_SALES', 'MN_MUTASI_CASHIER', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_CASH_BANK', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_RECEIPT_MONEY', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_SPEND_MONEY', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_SPEND_MONEY', 'MN_SPEND_MONEY_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_CASHBANK_REGISTER', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_BANK_RECONCILE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_CASHBANK_TRANS_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_CASH_BANK', 'MN_CASHBANK_RECAP_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_ASET', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_GOLONGAN_ASET', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_GOLONGAN_ASET', 'MN_GOLONGAN_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_GOLONGAN_ASET', 'MN_GOLONGAN_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_GOLONGAN_ASET', 'MN_GOLONGAN_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_NAMA_ASET', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_NAMA_ASET', 'MN_NAMA_ASET_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_NAMA_ASET', 'MN_NAMA_ASET_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_NAMA_ASET', 'MN_NAMA_ASET_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_DEPR_ASET', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_DEPR_ASET', 'MN_DEPR_ASET_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_DEPR_HISTORY', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ASET', 'MN_ACCUMDEPR_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_ACCOUNT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_COA', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_COA', 'MN_COA_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_COA_SETUP', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_CASHBANK_SETUP', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_COA_ASET_SETUP', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_JOURNAL', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_JOURNAL', 'MN_JOURNAL_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_ADJUST_JOURNAL', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_EDIT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_ADD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_DELETE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_PRINT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_JOURNAL_LIST', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_LEDGER', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_CLOSE_PERIOD', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_ACCOUNTING_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_ACCOUNT', 'MN_ANALYST_REPORT', 'demo');
INSERT INTO `i_hakakses` VALUES ('ROOT', 'MN_TOOLS', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_BACKUP', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_RESTORE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_LOG', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_USERMANAGE', 'demo');
INSERT INTO `i_hakakses` VALUES ('MN_TOOLS', 'MN_SET_PATH', 'demo');

-- ----------------------------
-- Table structure for i_item_beg_balance
-- ----------------------------
DROP TABLE IF EXISTS `i_item_beg_balance`;
CREATE TABLE `i_item_beg_balance` (
  `id_warehouse` varchar(25) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `id_unit` varchar(25) DEFAULT NULL,
  `balance` double(10,0) DEFAULT NULL,
  `notes` text,
  `price` double DEFAULT NULL,
  `status_update` int(11) DEFAULT NULL,
  KEY `item_balance_fkey1` (`id_item`),
  KEY `item_balance_fkey2` (`id_unit`),
  KEY `item_balance_fkey3` (`id_warehouse`),
  CONSTRAINT `fk_id_warehouse` FOREIGN KEY (`id_warehouse`) REFERENCES `mst_warehouse` (`id_warehouse`) ON UPDATE CASCADE,
  CONSTRAINT `i_item_beg_balance_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `i_item_beg_balance_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_item_beg_balance
-- ----------------------------
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV091158', 'pcs', '20', '', '1500', '1');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV091750', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV110640', 'btl', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV111453', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV112142', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV112337', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV112621', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV113247', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV113349', 'btl', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV113644', 'btl', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV113804', 'btl', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV113959', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV114057', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV114222', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV114429', 'pack', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV114632', 'btl', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV114728', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV114836', 'pack', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV114944', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV115113', 'btl', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV115225', 'btl', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV115319', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV115705', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RVRV115839', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RWRV084000', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RWRV084324', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', 'PFCB-RWRV084538', 'pcs', '0', '', '0', '0');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', '0915000001', 'pcs', '20', '', '108000', '1');
INSERT INTO `i_item_beg_balance` VALUES ('WH001', '0915000002', 'pcs', '20', '', '1500', '1');

-- ----------------------------
-- Table structure for i_mailing_list
-- ----------------------------
DROP TABLE IF EXISTS `i_mailing_list`;
CREATE TABLE `i_mailing_list` (
  `mailing_list_id` varchar(120) NOT NULL,
  `date_trn` date NOT NULL,
  `mail_nmb` varchar(120) DEFAULT NULL,
  `mail_date` date DEFAULT NULL,
  `mail_type` int(11) DEFAULT NULL,
  `sender_name` varchar(120) DEFAULT NULL,
  `mail_concerning` longtext,
  `urgent_status` int(11) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `id_expedition` varchar(120) DEFAULT NULL,
  `dest_address` text,
  `receiver_name` varchar(0) DEFAULT NULL,
  PRIMARY KEY (`mailing_list_id`),
  KEY `mail_type` (`mail_type`),
  KEY `urgent_status` (`urgent_status`),
  KEY `id_expedition` (`id_expedition`),
  CONSTRAINT `i_mailing_list_ibfk_1` FOREIGN KEY (`id_expedition`) REFERENCES `mst_expedition` (`id_expedition`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_mailing_list
-- ----------------------------

-- ----------------------------
-- Table structure for i_material_in
-- ----------------------------
DROP TABLE IF EXISTS `i_material_in`;
CREATE TABLE `i_material_in` (
  `no_material_in` varchar(60) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_item` varchar(30) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `cogs` double(10,0) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  KEY `id_unit_fkey` (`id_unit`),
  KEY `id_item_fkey` (`id_item`),
  CONSTRAINT `i_material_in_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `i_material_in_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_material_in
-- ----------------------------

-- ----------------------------
-- Table structure for i_material_out
-- ----------------------------
DROP TABLE IF EXISTS `i_material_out`;
CREATE TABLE `i_material_out` (
  `no_material_out` varchar(60) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_item` varchar(30) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `cogs` double(10,0) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  KEY `id_unit_fkey2` (`id_unit`),
  KEY `id_item_fkey2` (`id_item`),
  CONSTRAINT `i_material_out_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `i_material_out_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_material_out
-- ----------------------------

-- ----------------------------
-- Table structure for i_opname_det
-- ----------------------------
DROP TABLE IF EXISTS `i_opname_det`;
CREATE TABLE `i_opname_det` (
  `no_opname` varchar(25) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `id_unit` varchar(25) DEFAULT NULL,
  `qty_onhand` double DEFAULT NULL,
  `qty_opname` double DEFAULT NULL,
  `notes` text,
  KEY `opname_fkey1` (`no_opname`),
  KEY `opname_fkey2` (`id_item`),
  CONSTRAINT `i_opname_det_ibfk_1` FOREIGN KEY (`no_opname`) REFERENCES `i_opname_head` (`no_opname`) ON UPDATE CASCADE,
  CONSTRAINT `i_opname_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_opname_det
-- ----------------------------

-- ----------------------------
-- Table structure for i_opname_head
-- ----------------------------
DROP TABLE IF EXISTS `i_opname_head`;
CREATE TABLE `i_opname_head` (
  `no_opname` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_warehouse` varchar(25) DEFAULT NULL,
  PRIMARY KEY (`no_opname`),
  KEY `fk_opname_wh` (`id_warehouse`),
  CONSTRAINT `fk_opname_wh` FOREIGN KEY (`id_warehouse`) REFERENCES `mst_warehouse` (`id_warehouse`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_opname_head
-- ----------------------------

-- ----------------------------
-- Table structure for i_phone_in
-- ----------------------------
DROP TABLE IF EXISTS `i_phone_in`;
CREATE TABLE `i_phone_in` (
  `phone_book_id` varchar(120) NOT NULL,
  `phone_name` varchar(120) NOT NULL,
  `home_phone_1` varchar(120) DEFAULT NULL,
  `home_phone_2` varchar(120) DEFAULT NULL,
  `mobile_phone_1` varchar(120) DEFAULT NULL,
  `mobile_phone_2` varchar(120) DEFAULT NULL,
  `office_phone_1` varchar(120) DEFAULT NULL,
  `office_phone_2` varchar(120) DEFAULT NULL,
  `fax` varchar(120) DEFAULT NULL,
  `email` varchar(120) DEFAULT NULL,
  `address_phone` text,
  `website` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `status_id` smallint(6) DEFAULT NULL,
  `call_date` datetime DEFAULT NULL,
  `call_receiver` varchar(0) DEFAULT NULL,
  `message` text,
  PRIMARY KEY (`phone_book_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_phone_in
-- ----------------------------

-- ----------------------------
-- Table structure for i_set_account_def
-- ----------------------------
DROP TABLE IF EXISTS `i_set_account_def`;
CREATE TABLE `i_set_account_def` (
  `acc_parameter` varchar(200) NOT NULL,
  `id_account` varchar(30) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`acc_parameter`),
  KEY `fk_account` (`id_account`),
  CONSTRAINT `i_set_account_def_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_set_account_def
-- ----------------------------
INSERT INTO `i_set_account_def` VALUES ('acc_capital', '3-1101', 'Capital Account');
INSERT INTO `i_set_account_def` VALUES ('acc_cash_cashier', '1-1199', 'Cashier Cash Account');
INSERT INTO `i_set_account_def` VALUES ('acc_cash_purchase', '1-1101', 'Cash Purchase Account');
INSERT INTO `i_set_account_def` VALUES ('acc_cash_sales', '1-1101', 'Cash Sales Account');
INSERT INTO `i_set_account_def` VALUES ('acc_cash_service', '1-1101', 'Cash Service Account');
INSERT INTO `i_set_account_def` VALUES ('acc_close_period', '3-1199', 'Profit - Loss Summary Account');
INSERT INTO `i_set_account_def` VALUES ('acc_credit_purchase', '2-1101', 'Account Payable Account');
INSERT INTO `i_set_account_def` VALUES ('acc_credit_sales', '1-1301', 'Account Receivable Account');
INSERT INTO `i_set_account_def` VALUES ('acc_credit_service', '1-1301', 'Account Receivable Account for Service');
INSERT INTO `i_set_account_def` VALUES ('acc_def_cogs', '5-1101', 'Default Inventory COGS Account');
INSERT INTO `i_set_account_def` VALUES ('acc_def_inventory', '1-1201', 'Default Inventory Account');
INSERT INTO `i_set_account_def` VALUES ('acc_disc_beli', '4-1102', 'Purchase Disc Account');
INSERT INTO `i_set_account_def` VALUES ('acc_disc_sales', '4-1202', 'Sales Disc Account');
INSERT INTO `i_set_account_def` VALUES ('acc_disc_service', '4-1103', 'Sales Service Disc Account');
INSERT INTO `i_set_account_def` VALUES ('acc_freight', '6-1107', 'Freight Account');
INSERT INTO `i_set_account_def` VALUES ('acc_kurs_expenses', '6-2101', 'Exchange Rate Expense Account');
INSERT INTO `i_set_account_def` VALUES ('acc_kurs_revenue', '4-2101', 'Exchange Rate Revenue Account');
INSERT INTO `i_set_account_def` VALUES ('acc_other_expenses', '6-1299', 'Others Expense Account');
INSERT INTO `i_set_account_def` VALUES ('acc_other_revenue', '4-1203', 'Others Revenue Account');
INSERT INTO `i_set_account_def` VALUES ('acc_pay_purchase_disc', '4-1104', 'Account Payable Payment Account');
INSERT INTO `i_set_account_def` VALUES ('acc_pay_sales_disc', '4-1105', 'Account Payable Payment Disc Account');
INSERT INTO `i_set_account_def` VALUES ('acc_prive', '3-1102', 'Prive Account');
INSERT INTO `i_set_account_def` VALUES ('acc_sales', '4-1101', 'Sales Account');
INSERT INTO `i_set_account_def` VALUES ('acc_tax_in', '1-1501', 'VAT IN Account');
INSERT INTO `i_set_account_def` VALUES ('acc_tax_out', '2-1102', 'VAT OUT Account');

-- ----------------------------
-- Table structure for i_set_account_def_manufacture
-- ----------------------------
DROP TABLE IF EXISTS `i_set_account_def_manufacture`;
CREATE TABLE `i_set_account_def_manufacture` (
  `acc_parameter` varchar(200) NOT NULL,
  `id_account` varchar(30) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`acc_parameter`),
  KEY `fk_account` (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_set_account_def_manufacture
-- ----------------------------
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_capital', '3-1101', 'Capital Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_cash_cashier', '1-1199', 'Cashier Cash Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_cash_purchase', '1-1101', 'Cash Purchase Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_cash_sales', '1-1101', 'Cash Sales Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_cash_service', '1-1101', 'Cash Service Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_close_period', '3-1199', 'Profit - Loss Summary Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_credit_purchase', '2-1101', 'Account Payable Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_credit_sales', '1-1301', 'Account Receivable Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_credit_service', '1-1301', 'Account Receivable Account for Service');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_disc_beli', '4-1102', 'Purchase Disc Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_disc_sales', '4-1202', 'Sales Disc Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_disc_service', '4-1103', 'Sales Service Disc Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_freight', '6-1107', 'Freight Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_kurs_expenses', '6-2101', 'Exchange Rate Expense Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_kurs_revenue', '4-2101', 'Exchange Rate Revenue Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_other_expenses', '6-1299', 'Others Expense Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_other_revenue', '4-1203', 'Others Revenue Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_pay_purchase_disc', '4-1104', 'Account Payable Payment Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_pay_sales_disc', '4-1105', 'Account Payable Payment Disc Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_prive', '3-1102', 'Prive Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_sales', '4-1101', 'Sales Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_tax_in', '1-1501', 'VAT IN Account');
INSERT INTO `i_set_account_def_manufacture` VALUES ('acc_tax_out', '2-1102', 'VAT OUT Account');

-- ----------------------------
-- Table structure for i_set_account_def_retail
-- ----------------------------
DROP TABLE IF EXISTS `i_set_account_def_retail`;
CREATE TABLE `i_set_account_def_retail` (
  `acc_parameter` varchar(200) NOT NULL,
  `id_account` varchar(30) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`acc_parameter`),
  KEY `fk_account` (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_set_account_def_retail
-- ----------------------------
INSERT INTO `i_set_account_def_retail` VALUES ('acc_capital', '3-1101', 'Capital Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_cash_cashier', '1-1199', 'Cashier Cash Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_cash_purchase', '1-1101', 'Cash Purchase Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_cash_sales', '1-1101', 'Cash Sales Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_cash_service', '1-1101', 'Cash Service Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_close_period', '3-1199', 'Profit - Loss Summary Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_credit_purchase', '2-1101', 'Account Payable Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_credit_sales', '1-1301', 'Account Receivable Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_credit_service', '1-1301', 'Account Receivable Account for Service');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_disc_beli', '4-1102', 'Purchase Disc Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_disc_sales', '4-1202', 'Sales Disc Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_disc_service', '4-1103', 'Sales Service Disc Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_freight', '6-1107', 'Freight Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_kurs_expenses', '6-2101', 'Exchange Rate Expense Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_kurs_revenue', '4-2101', 'Exchange Rate Revenue Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_other_expenses', '6-1299', 'Others Expense Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_other_revenue', '4-1203', 'Others Revenue Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_pay_purchase_disc', '4-1104', 'Account Payable Payment Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_pay_sales_disc', '4-1105', 'Account Payable Payment Disc Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_prive', '3-1102', 'Prive Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_sales', '4-1101', 'Sales Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_tax_in', '1-1501', 'VAT IN Account');
INSERT INTO `i_set_account_def_retail` VALUES ('acc_tax_out', '2-1102', 'VAT OUT Account');

-- ----------------------------
-- Table structure for i_set_age
-- ----------------------------
DROP TABLE IF EXISTS `i_set_age`;
CREATE TABLE `i_set_age` (
  `id` int(11) NOT NULL,
  `notes` text,
  `start_value` int(11) DEFAULT NULL,
  `end_value` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_set_age
-- ----------------------------

-- ----------------------------
-- Table structure for i_set_price
-- ----------------------------
DROP TABLE IF EXISTS `i_set_price`;
CREATE TABLE `i_set_price` (
  `id_warehouse` varchar(25) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `id_unit` varchar(25) DEFAULT NULL,
  `amount_cogs` double DEFAULT NULL,
  `amount_price` double DEFAULT NULL,
  KEY `set_price_fkey1` (`id_item`),
  KEY `set_price_fkey2` (`id_warehouse`),
  CONSTRAINT `i_set_price_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `i_set_price_ibfk_2` FOREIGN KEY (`id_warehouse`) REFERENCES `mst_warehouse` (`id_warehouse`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_set_price
-- ----------------------------

-- ----------------------------
-- Table structure for i_stock_in
-- ----------------------------
DROP TABLE IF EXISTS `i_stock_in`;
CREATE TABLE `i_stock_in` (
  `no_stock_in` varchar(60) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_item` varchar(30) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `cogs` double(10,0) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `id_warehouse` varchar(60) DEFAULT NULL,
  KEY `id_unit_fkey` (`id_unit`),
  KEY `id_item_fkey` (`id_item`),
  CONSTRAINT `id_item_fkey` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `id_unit_fkey` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_stock_in
-- ----------------------------
INSERT INTO `i_stock_in` VALUES ('FRM/REV/4-2015-00001', '2015-04-10 00:00:00', 'PFCB-SSRV115509', '10', 'btl', '25000', '25000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00001', '2015-07-25 00:00:00', 'PFCB-RVRV113644', '10', 'pack', '300000', '300000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00001', '2015-07-25 00:00:00', 'PFCB-RVRV110640', '20', 'btl', '11000', '11000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00001', '2015-07-25 00:00:00', 'PFCB-RVRV112337', '50', 'pcs', '9500', '9500', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00002', '2015-07-25 00:00:00', 'PFCB-RVRV110640', '5', 'btl', '11000', '11000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00003', '2015-07-30 00:00:00', 'PFCB-RVRV091158', '10', 'pack', '19200', '19200', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00003', '2015-07-30 00:00:00', 'PFCB-RVRV091750', '20', 'pack', '9600', '9600', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00003', '2015-07-30 00:00:00', 'PFCB-RVRV110640', '50', 'btl', '12500', '12500', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00004', '2015-07-30 00:00:00', 'PFCB-RVRV111453', '20', 'pack', '4800', '4800', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/7-2015-00004', '2015-07-30 00:00:00', 'PFCB-RVRV112142', '20', 'pack', '6000', '6000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00001', '2015-08-03 00:00:00', 'PFCB-RVRV112621', '50', 'pcs', '5800', '5800', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00001', '2015-08-03 00:00:00', 'PFCB-RVRV113247', '50', 'pcs', '7500', '7500', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00001', '2015-08-03 00:00:00', 'PFCB-RVRV113959', '10', 'pack', '36000', '36000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00002', '2015-08-04 00:00:00', 'PFCB-RVRV114632', '50', 'pack', '7000', '7000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00002', '2015-08-04 00:00:00', 'PFCB-RVRV114728', '30', 'pack', '9000', '9000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00003', '2015-08-10 00:00:00', 'PFCB-RVRV115705', '20', 'pack', '10000', '10000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00003', '2015-08-10 00:00:00', 'PFCB-RVRV115839', '25', 'pack', '14000', '14000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00003', '2015-08-10 00:00:00', 'PFCB-RWRV084000', '20', 'pack', '14000', '14000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00003', '2015-08-10 00:00:00', 'PFCB-RWRV084324', '40', 'pack', '72000', '72000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00004', '2015-08-12 00:00:00', 'PFCB-RWRV084324', '20', 'pack', '72000', '72000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/8-2015-00004', '2015-08-12 00:00:00', 'PFCB-RWRV084538', '50', 'pack', '100800', '100800', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV110640', '50', 'btl', '11000', '11000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV113349', '10', 'pack', '17000', '17000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV113644', '10', 'pack', '17500', '17500', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV113804', '20', 'pack', '17500', '17500', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-SSRV115509', '50', 'btl', '24000', '24000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00002', '2015-09-16 00:00:00', 'PFCB-RVRV110640', '50', 'btl', '24000', '24000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00002', '2015-09-16 00:00:00', 'PFCB-RVRV113349', '100', 'pack', '10000', '10000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00002', '2015-09-16 00:00:00', 'PFCB-RVRV113644', '100', 'pack', '11000', '11000', 'WH001');
INSERT INTO `i_stock_in` VALUES ('FRM/REV/09-2015-00002', '2015-09-16 00:00:00', 'PFCB-RVRV113804', '25', 'pack', '10000', '10000', 'WH001');

-- ----------------------------
-- Table structure for i_stock_out
-- ----------------------------
DROP TABLE IF EXISTS `i_stock_out`;
CREATE TABLE `i_stock_out` (
  `no_stock_out` varchar(60) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_item` varchar(30) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `cogs` double(10,0) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `id_warehouse` varchar(60) DEFAULT NULL,
  KEY `id_unit_fkey2` (`id_unit`),
  KEY `id_item_fkey2` (`id_item`),
  CONSTRAINT `id_item_fkey2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `id_unit_fkey2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_stock_out
-- ----------------------------
INSERT INTO `i_stock_out` VALUES ('FRM/DO/4-2015-00001', '2015-04-10 00:00:00', 'PFCB-SSRV115509', '1', 'btl', '27500', '27500', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/4-2015-00002', '2015-04-10 00:00:00', 'PFCB-SSRV115509', '1', 'btl', '27500', '27500', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/8-2015-00001', '2015-08-06 00:00:00', 'PFCB-RVRV110640', '5', 'btl', '14000', '14000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/8-2015-00001', '2015-08-06 00:00:00', 'PFCB-RVRV091750', '12', 'pcs', '1000', '1000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00001', '2015-09-12 00:00:00', 'PFCB-RVRV114632', '10', 'btl', '8500', '8500', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00001', '2015-09-12 00:00:00', 'PFCB-RVRV114728', '10', 'pcs', '10800', '10800', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00001', '2015-09-12 00:00:00', 'PFCB-RVRV115839', '5', 'pcs', '1700', '1700', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/PRU/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV110640', '1', 'btl', '0', '11000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/PRU/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-SSRV115509', '2', 'btl', '0', '24000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-RVRV113644', '5', 'btl', '21000', '21000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-RVRV113804', '5', 'btl', '21000', '21000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-RVRV110640', '5', 'btl', '14000', '14000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-SSRV115509', '2', 'btl', '27500', '27500', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', '0915000002', '11', 'pcs', '1800', '1800', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', '0915000001', '3', 'pcs', '125000', '125000', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', 'PFCB-RVRV113959', '1', 'pcs', '0', '0', 'WH001');
INSERT INTO `i_stock_out` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', 'PFCB-RVRV091158', '2', 'pcs', '0', '0', 'WH001');

-- ----------------------------
-- Table structure for i_tax_setting
-- ----------------------------
DROP TABLE IF EXISTS `i_tax_setting`;
CREATE TABLE `i_tax_setting` (
  `tax_name` varchar(30) NOT NULL,
  `tax_decription` varchar(200) DEFAULT NULL,
  `rate` float DEFAULT NULL,
  PRIMARY KEY (`tax_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_tax_setting
-- ----------------------------
INSERT INTO `i_tax_setting` VALUES ('PPN', 'Value Added Tax', '10');

-- ----------------------------
-- Table structure for i_templatehakakses
-- ----------------------------
DROP TABLE IF EXISTS `i_templatehakakses`;
CREATE TABLE `i_templatehakakses` (
  `nourut` int(11) NOT NULL,
  `parentkey` varchar(60) NOT NULL,
  `childkey` varchar(60) NOT NULL,
  `notes` text,
  `ismenu` int(11) DEFAULT NULL,
  PRIMARY KEY (`parentkey`,`childkey`),
  UNIQUE KEY `TEMPLATEHAKAKSES_PK` (`parentkey`,`childkey`),
  UNIQUE KEY `TEMPLATENOOROT` (`nourut`) USING BTREE,
  KEY `PARENTKEY` (`parentkey`),
  KEY `CHILDKEY` (`childkey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_templatehakakses
-- ----------------------------
INSERT INTO `i_templatehakakses` VALUES ('223', 'MN_ACCOUNT', 'MN_ACCOUNTING_REPORT', 'LAPORAN AKUNTANSI', '1');
INSERT INTO `i_templatehakakses` VALUES ('215', 'MN_ACCOUNT', 'MN_ADJUST_JOURNAL', 'JURNAL PENYESUAIAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('224', 'MN_ACCOUNT', 'MN_ANALYST_REPORT', 'LAPORAN ANALISA KEUANGAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('208', 'MN_ACCOUNT', 'MN_CASHBANK_SETUP', 'KAS/BANK SETUP', '1');
INSERT INTO `i_templatehakakses` VALUES ('222', 'MN_ACCOUNT', 'MN_CLOSE_PERIOD', 'TUTUP PERIODE AKUNTANSI', '1');
INSERT INTO `i_templatehakakses` VALUES ('202', 'MN_ACCOUNT', 'MN_COA', 'CHART OF ACCOUNT', '1');
INSERT INTO `i_templatehakakses` VALUES ('209', 'MN_ACCOUNT', 'MN_COA_ASET_SETUP', 'SETUP COA ASET', '1');
INSERT INTO `i_templatehakakses` VALUES ('207', 'MN_ACCOUNT', 'MN_COA_SETUP', 'SETUP COA INTEGRATION', '1');
INSERT INTO `i_templatehakakses` VALUES ('210', 'MN_ACCOUNT', 'MN_JOURNAL', 'JURNAL UMUM', '1');
INSERT INTO `i_templatehakakses` VALUES ('220', 'MN_ACCOUNT', 'MN_JOURNAL_LIST', 'DAFTAR JURNAL', '1');
INSERT INTO `i_templatehakakses` VALUES ('221', 'MN_ACCOUNT', 'MN_LEDGER', 'DAFTAR BUKU BESAR', '1');
INSERT INTO `i_templatehakakses` VALUES ('217', 'MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('218', 'MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('216', 'MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('219', 'MN_ADJUST_JOURNAL', 'MN_ADJUSTJOURNAL_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('111', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('112', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('110', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('113', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('146', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('147', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('145', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('148', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('201', 'MN_ASET', 'MN_ACCUMDEPR_REPORT', 'LAPORAN AKUMULASI PENYUSUTAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('195', 'MN_ASET', 'MN_DEPR_ASET', 'PENYUSUTAN ASET', '1');
INSERT INTO `i_templatehakakses` VALUES ('200', 'MN_ASET', 'MN_DEPR_HISTORY', 'HISTORY DAFTAR PENYUSUTAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('187', 'MN_ASET', 'MN_GOLONGAN_ASET', 'GOLONGAN ASET', '1');
INSERT INTO `i_templatehakakses` VALUES ('191', 'MN_ASET', 'MN_NAMA_ASET', 'DAFTAR ASET', '1');
INSERT INTO `i_templatehakakses` VALUES ('182', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('183', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('181', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('184', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('41', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('42', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('40', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('39', 'MN_CARDFILE', 'MN_BEGINING_BALANCE', 'SALDO AWAL BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('68', 'MN_CARDFILE', 'MN_CARD_FILE_REPORT', 'LAPORAN MASTER', '1');
INSERT INTO `i_templatehakakses` VALUES ('22', 'MN_CARDFILE', 'MN_CARD_LIST', 'DAFTAR MASTER', '1');
INSERT INTO `i_templatehakakses` VALUES ('56', 'MN_CARDFILE', 'MN_CURRENCY', 'MATA UANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('60', 'MN_CARDFILE', 'MN_CURRENCY_CONVERSION', 'KONVERSI MATA UANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('10', 'MN_CARDFILE', 'MN_CUSTOMER', 'PELANGGAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('18', 'MN_CARDFILE', 'MN_EMPLOYEE', 'KARYAWAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('64', 'MN_CARDFILE', 'MN_EXPEDITION', 'EKSPEDISI DAN TARIF', '1');
INSERT INTO `i_templatehakakses` VALUES ('31', 'MN_CARDFILE', 'MN_ITEM_BRAND', 'MEREK BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('27', 'MN_CARDFILE', 'MN_ITEM_CAT', 'KATEGORI BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('35', 'MN_CARDFILE', 'MN_ITEM_NAME', 'NAMA BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('23', 'MN_CARDFILE', 'MN_ITEM_TYPE', 'JENIS BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('43', 'MN_CARDFILE', 'MN_JENIS_JASA', 'JENIS JASA', '1');
INSERT INTO `i_templatehakakses` VALUES ('14', 'MN_CARDFILE', 'MN_SUPPLIER', 'PEMASOK', '1');
INSERT INTO `i_templatehakakses` VALUES ('47', 'MN_CARDFILE', 'MN_UNIT', 'SATUAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('51', 'MN_CARDFILE', 'MN_UNIT_CONVERSION', 'KONVERSI UNIT', '1');
INSERT INTO `i_templatehakakses` VALUES ('52', 'MN_CARDFILE', 'MN_WAREHOUSE', 'GUDANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('159', 'MN_CASHIER', 'MN_CASHIER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('160', 'MN_CASHIER', 'MN_CASHIER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('158', 'MN_CASHIER', 'MN_CASHIER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('161', 'MN_CASHIER', 'MN_CASHIER_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('164', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('165', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('163', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('166', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('180', 'MN_CASH_BANK', 'MN_BANK_RECONCILE', 'REKONSILIASI BANK', '1');
INSERT INTO `i_templatehakakses` VALUES ('186', 'MN_CASH_BANK', 'MN_CASHBANK_RECAP_REPORT', 'LAPORAN REKAPITULASI ', '1');
INSERT INTO `i_templatehakakses` VALUES ('179', 'MN_CASH_BANK', 'MN_CASHBANK_REGISTER', 'KAS/BANK REGISTER', '1');
INSERT INTO `i_templatehakakses` VALUES ('185', 'MN_CASH_BANK', 'MN_CASHBANK_TRANS_REPORT', 'LAPORAN DETAIL', '1');
INSERT INTO `i_templatehakakses` VALUES ('169', 'MN_CASH_BANK', 'MN_RECEIPT_MONEY', 'PENERIMAAN KAS/BANK', '1');
INSERT INTO `i_templatehakakses` VALUES ('174', 'MN_CASH_BANK', 'MN_SPEND_MONEY', 'PENGELUARAN KAS/BANK', '1');
INSERT INTO `i_templatehakakses` VALUES ('204', 'MN_COA', 'MN_COA_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('205', 'MN_COA', 'MN_COA_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('203', 'MN_COA', 'MN_COA_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('206', 'MN_COA', 'MN_COA_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('58', 'MN_CURRENCY', 'MN_CURRENCY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('59', 'MN_CURRENCY', 'MN_CURRENCY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('57', 'MN_CURRENCY', 'MN_CURRENCY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('62', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('63', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('61', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('12', 'MN_CUSTOMER', 'MN_CUSTOMER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('13', 'MN_CUSTOMER', 'MN_CUSTOMER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('11', 'MN_CUSTOMER', 'MN_CUSTOMER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('131', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('132', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('130', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('133', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('197', 'MN_DEPR_ASET', 'MN_DEPR_ASET_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('198', 'MN_DEPR_ASET', 'MN_DEPR_ASET_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('196', 'MN_DEPR_ASET', 'MN_DEPR_ASET_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('199', 'MN_DEPR_ASET', 'MN_DEPR_ASET_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('20', 'MN_EMPLOYEE', 'MN_EMPLOYEE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('21', 'MN_EMPLOYEE', 'MN_EMPLOYEE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('19', 'MN_EMPLOYEE', 'MN_EMPLOYEE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('66', 'MN_EXPEDITION', 'MN_EXPEDITION_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('67', 'MN_EXPEDITION', 'MN_EXPEDITION_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('65', 'MN_EXPEDITION', 'MN_EXPEDITION_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('189', 'MN_GOLONGAN_ASET', 'MN_GOLONGAN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('190', 'MN_GOLONGAN_ASET', 'MN_GOLONGAN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('188', 'MN_GOLONGAN_ASET', 'MN_GOLONGAN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('33', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('34', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('32', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('29', 'MN_ITEM_CAT', 'MN_ITEM_CAT_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('30', 'MN_ITEM_CAT', 'MN_ITEM_CAT_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('28', 'MN_ITEM_CAT', 'MN_ITEM_CAT_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('37', 'MN_ITEM_NAME', 'MN_ITEM_NAME_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('38', 'MN_ITEM_NAME', 'MN_ITEM_NAME_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('36', 'MN_ITEM_NAME', 'MN_ITEM_NAME_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('25', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('26', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('24', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('45', 'MN_JENIS_JASA', 'MN_JENIS_JASA_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('46', 'MN_JENIS_JASA', 'MN_JENIS_JASA_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('44', 'MN_JENIS_JASA', 'MN_JENIS_JASA_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('212', 'MN_JOURNAL', 'MN_JOURNAL_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('213', 'MN_JOURNAL', 'MN_JOURNAL_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('211', 'MN_JOURNAL', 'MN_JOURNAL_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('214', 'MN_JOURNAL', 'MN_JOURNAL_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('79', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('80', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('78', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('193', 'MN_NAMA_ASET', 'MN_NAMA_ASET_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('194', 'MN_NAMA_ASET', 'MN_NAMA_ASET_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('192', 'MN_NAMA_ASET', 'MN_NAMA_ASET_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('157', 'MN_OUTLET_SALES', 'MN_CASHIER', 'TRANSAKSI KASIR', '1');
INSERT INTO `i_templatehakakses` VALUES ('167', 'MN_OUTLET_SALES', 'MN_CASHIER_REGISTER', 'KASIR REGISTER', '1');
INSERT INTO `i_templatehakakses` VALUES ('162', 'MN_OUTLET_SALES', 'MN_CASHIER_RETURN', 'RETUR TRANSAKSI KASIR', '1');
INSERT INTO `i_templatehakakses` VALUES ('168', 'MN_OUTLET_SALES', 'MN_MUTASI_CASHIER', 'LAPORAN KASIR', '1');
INSERT INTO `i_templatehakakses` VALUES ('151', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('152', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('150', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('153', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('116', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('117', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('115', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('118', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('91', 'MN_PO', 'MN_PO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('92', 'MN_PO', 'MN_PO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('90', 'MN_PO', 'MN_PO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('93', 'MN_PO', 'MN_PO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('88', 'MN_PURCHASE', 'MN_APPROVAL_RO', 'APPROVAL PERMINTAAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('109', 'MN_PURCHASE', 'MN_AP_INITBALANCE', 'SALDO AWAL HUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('121', 'MN_PURCHASE', 'MN_AP_REPORT', 'LAPORAN HUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('114', 'MN_PURCHASE', 'MN_PEMBAYARAN_HUTANG', 'PEMBAYARAN HUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('89', 'MN_PURCHASE', 'MN_PO', 'ORDER PEMBELIAN (PO)', '1');
INSERT INTO `i_templatehakakses` VALUES ('99', 'MN_PURCHASE', 'MN_PURCHASE_INV', 'FAKTUR BELI', '1');
INSERT INTO `i_templatehakakses` VALUES ('120', 'MN_PURCHASE', 'MN_PURCHASE_REPORT', 'LAPORAN PEMBELIAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('104', 'MN_PURCHASE', 'MN_PURCHASE_RETURN', 'RETUR BELI', '1');
INSERT INTO `i_templatehakakses` VALUES ('94', 'MN_PURCHASE', 'MN_RECEIVED_ORDER', 'PENERIMAAN BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('83', 'MN_PURCHASE', 'MN_RO', 'PERMINTAAN GUDANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('119', 'MN_PURCHASE', 'MN_STATUS_HUTANG', 'STATUS HUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('101', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('102', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('100', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('103', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('106', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('107', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('105', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('108', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('171', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('172', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('170', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('173', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('96', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('97', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('95', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('98', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('85', 'MN_RO', 'MN_RO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('86', 'MN_RO', 'MN_RO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('84', 'MN_RO', 'MN_RO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('87', 'MN_RO', 'MN_RO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('144', 'MN_SALES', 'MN_AR_INITBALANCE', 'SALDO AWAL PIUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('154', 'MN_SALES', 'MN_AR_STATUS', 'STATUS PIUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('129', 'MN_SALES', 'MN_DELIVERED_ITEM', 'PENGIRIMAN BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('155', 'MN_SALES', 'MN_LAPORAN_JUAL', 'LAPORAN PENJUALAN', '1');
INSERT INTO `i_templatehakakses` VALUES ('156', 'MN_SALES', 'MN_LAPORAN_PIUTANG', 'LAPORAN PIUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('149', 'MN_SALES', 'MN_PAYMENT_AR', 'PEMBAYARAN PIUTANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('134', 'MN_SALES', 'MN_SALES_INV', 'FAKTUR JUAL', '1');
INSERT INTO `i_templatehakakses` VALUES ('139', 'MN_SALES', 'MN_SALES_RETURN', 'RETUR JUAL', '1');
INSERT INTO `i_templatehakakses` VALUES ('122', 'MN_SALES', 'MN_SET_MARKETING', 'SETUP MARKETING', '1');
INSERT INTO `i_templatehakakses` VALUES ('124', 'MN_SALES', 'MN_SO', 'ORDER PENJUALAN (SO)', '1');
INSERT INTO `i_templatehakakses` VALUES ('136', 'MN_SALES_INV', 'MN_SALES_INV_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('137', 'MN_SALES_INV', 'MN_SALES_INV_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('135', 'MN_SALES_INV', 'MN_SALES_INV_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('138', 'MN_SALES_INV', 'MN_SALES_INV_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('141', 'MN_SALES_RETURN', 'MN_SALES_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('142', 'MN_SALES_RETURN', 'MN_SALES_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('140', 'MN_SALES_RETURN', 'MN_SALES_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('143', 'MN_SALES_RETURN', 'MN_SALES_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('123', 'MN_SET_MARKETING', 'MN_SET_MARKETING_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('126', 'MN_SO', 'MN_SO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('127', 'MN_SO', 'MN_SO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('125', 'MN_SO', 'MN_SO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('128', 'MN_SO', 'MN_SO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('176', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('177', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('175', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('178', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses` VALUES ('81', 'MN_STOCK', 'MN_ITEM_LIST', 'DAFTAR BARANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('77', 'MN_STOCK', 'MN_MOVE_ITEM', 'PINDAH GUDANG', '1');
INSERT INTO `i_templatehakakses` VALUES ('73', 'MN_STOCK', 'MN_STOCK_CORRECTION', 'KOREKSI STOK', '1');
INSERT INTO `i_templatehakakses` VALUES ('69', 'MN_STOCK', 'MN_STOCK_OPNAME', 'STOK OPNAME', '1');
INSERT INTO `i_templatehakakses` VALUES ('82', 'MN_STOCK', 'MN_STOCK_REPORT', 'LAPORAN STOK', '1');
INSERT INTO `i_templatehakakses` VALUES ('75', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('76', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('74', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('71', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('72', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('70', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('16', 'MN_SUPPLIER', 'MN_SUPPLIER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('17', 'MN_SUPPLIER', 'MN_SUPPLIER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('15', 'MN_SUPPLIER', 'MN_SUPPLIER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('225', 'MN_TOOLS', 'MN_BACKUP', 'BACKUP', '1');
INSERT INTO `i_templatehakakses` VALUES ('227', 'MN_TOOLS', 'MN_LOG', 'LOG TRANSAKSI', '1');
INSERT INTO `i_templatehakakses` VALUES ('226', 'MN_TOOLS', 'MN_RESTORE', 'RESTORE', '1');
INSERT INTO `i_templatehakakses` VALUES ('229', 'MN_TOOLS', 'MN_SET_PATH', 'SETUP IMAGE DIREKTORI PATH', '1');
INSERT INTO `i_templatehakakses` VALUES ('228', 'MN_TOOLS', 'MN_USERMANAGE', 'PENGATURAN USER', '1');
INSERT INTO `i_templatehakakses` VALUES ('49', 'MN_UNIT', 'MN_UNIT_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('50', 'MN_UNIT', 'MN_UNIT_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('48', 'MN_UNIT', 'MN_UNIT_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('54', 'MN_WAREHOUSE', 'MN_WAREHOUSE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses` VALUES ('55', 'MN_WAREHOUSE', 'MN_WAREHOUSE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses` VALUES ('53', 'MN_WAREHOUSE', 'MN_WAREHOUSE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses` VALUES ('8', 'ROOT', 'MN_ACCOUNT', 'AKUNTANSI', '0');
INSERT INTO `i_templatehakakses` VALUES ('7', 'ROOT', 'MN_ASET', 'ASET', '0');
INSERT INTO `i_templatehakakses` VALUES ('1', 'ROOT', 'MN_CARDFILE', 'MASTER DATA', '0');
INSERT INTO `i_templatehakakses` VALUES ('6', 'ROOT', 'MN_CASH_BANK', 'KEUANGAN', '0');
INSERT INTO `i_templatehakakses` VALUES ('5', 'ROOT', 'MN_OUTLET_SALES', 'KASIR', '0');
INSERT INTO `i_templatehakakses` VALUES ('3', 'ROOT', 'MN_PURCHASE', 'PEMBELIAN', '0');
INSERT INTO `i_templatehakakses` VALUES ('4', 'ROOT', 'MN_SALES', 'PENJUALAN', '0');
INSERT INTO `i_templatehakakses` VALUES ('2', 'ROOT', 'MN_STOCK', 'STOK', '0');
INSERT INTO `i_templatehakakses` VALUES ('9', 'ROOT', 'MN_TOOLS', 'TOOLS', '0');

-- ----------------------------
-- Table structure for i_templatehakakses_setmanufacture
-- ----------------------------
DROP TABLE IF EXISTS `i_templatehakakses_setmanufacture`;
CREATE TABLE `i_templatehakakses_setmanufacture` (
  `nourut` int(11) NOT NULL,
  `parentkey` varchar(60) NOT NULL,
  `childkey` varchar(60) NOT NULL,
  `notes` text,
  `ismenu` int(11) DEFAULT NULL,
  PRIMARY KEY (`parentkey`,`childkey`),
  UNIQUE KEY `TEMPLATEHAKAKSES_PK` (`parentkey`,`childkey`),
  UNIQUE KEY `TEMPLATENOOROT` (`nourut`) USING BTREE,
  KEY `PARENTKEY` (`parentkey`),
  KEY `CHILDKEY` (`childkey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_templatehakakses_setmanufacture
-- ----------------------------
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('199', 'MN_ACCOUNT', 'MN_ACCOUNT_REPORT', 'MENU ACCOUNTING & ANALYST REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('191', 'MN_ACCOUNT', 'MN_CASHBANK_SETUP', 'MENU ADD CASH/BANK TYPE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('186', 'MN_ACCOUNT', 'MN_COA', 'MENU CHART OF ACCOUNT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('192', 'MN_ACCOUNT', 'MN_JOURNAL', 'MENU GENERAL JOURNAL', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('197', 'MN_ACCOUNT', 'MN_JOURNAL_LIST', 'MENU JOURNAL LIST', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('198', 'MN_ACCOUNT', 'MN_LEDGER', 'MENU LEDGER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('200', 'MN_ACCOUNT_REPORT', 'MN_ACCOUNTING_REPORT', 'MENU ACCOUNTING REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('201', 'MN_ACCOUNT_REPORT', 'MN_ANALYST_REPORT', 'MENU ANALYST REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('220', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('221', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('219', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('222', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('157', 'MN_AR', 'MN_AR_STATUS', 'MENU A/R STATUS', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('152', 'MN_AR', 'MN_PAYMENT_AR', 'MENU A/R PAYMENT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('225', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('226', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('224', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('227', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('180', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('181', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('179', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('182', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('40', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('41', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('39', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('24', 'MN_CARDFILE', 'MN_CARD_LIST', 'MENU CARD LIST', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('55', 'MN_CARDFILE', 'MN_CURRENCY', 'MENU CURRENCY', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('59', 'MN_CARDFILE', 'MN_CURRENCY_CONVERSION', 'MENU CURRENCY CONVERSION', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('12', 'MN_CARDFILE', 'MN_CUSTOMER', 'CUSTOMER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('20', 'MN_CARDFILE', 'MN_EMPLOYEE', 'MENU EMPLOYEE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('25', 'MN_CARDFILE', 'MN_ITEM', 'MENU ITEM', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('42', 'MN_CARDFILE', 'MN_JENIS_JASA', 'MENU SERVICE ITEM', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('63', 'MN_CARDFILE', 'MN_LAPORAN', 'MENU  MASTER REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('16', 'MN_CARDFILE', 'MN_SUPPLIER', 'MENU SUPPLIER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('46', 'MN_CARDFILE', 'MN_UNIT', 'MENU UNIT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('50', 'MN_CARDFILE', 'MN_UNIT_CONVERSION', 'MENU UNIT CONVERSION', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('51', 'MN_CARDFILE', 'MN_WAREHOUSE', 'MENU WAREHOUSE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('185', 'MN_CASHBANK_REPORT', 'MN_CASHBANK_RECAP_REPORT', 'MENU CASH/BANK SUMMARY', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('184', 'MN_CASHBANK_REPORT', 'MN_CASHBANK_TRANS_REPORT', 'MENU CASH/BANK DETAIL', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('163', 'MN_CASHIER', 'MN_CASHIER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('164', 'MN_CASHIER', 'MN_CASHIER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('162', 'MN_CASHIER', 'MN_CASHIER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('165', 'MN_CASHIER', 'MN_CASHIER_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('214', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('216', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('213', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('217', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('178', 'MN_CASH_BANK', 'MN_BANK_RECONCILE', 'MENU BANK RECONCILE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('177', 'MN_CASH_BANK', 'MN_CASHBANK_REGISTER', 'MENU CASH/BANK REGISTER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('183', 'MN_CASH_BANK', 'MN_CASHBANK_REPORT', 'MENU CASH/BANK REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('167', 'MN_CASH_BANK', 'MN_RECEIPT_MONEY', 'MENU CASH/BANK RECEIPTS', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('172', 'MN_CASH_BANK', 'MN_SPEND_MONEY', 'MENU CASH/BANK DISBURSEMENT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('188', 'MN_COA', 'MN_COA_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('189', 'MN_COA', 'MN_COA_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('187', 'MN_COA', 'MN_COA_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('190', 'MN_COA', 'MN_COA_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('57', 'MN_CURRENCY', 'MN_CURRENCY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('58', 'MN_CURRENCY', 'MN_CURRENCY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('56', 'MN_CURRENCY', 'MN_CURRENCY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('61', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('62', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('60', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('14', 'MN_CUSTOMER', 'MN_CUSTOMER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('15', 'MN_CUSTOMER', 'MN_CUSTOMER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('13', 'MN_CUSTOMER', 'MN_CUSTOMER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('138', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('139', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('137', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('140', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('22', 'MN_EMPLOYEE', 'MN_EMPLOYEE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('23', 'MN_EMPLOYEE', 'MN_EMPLOYEE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('21', 'MN_EMPLOYEE', 'MN_EMPLOYEE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('38', 'MN_ITEM', 'MN_BEGINING_BALANCE', 'MENU BEGINNING BALANCE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('231', 'MN_ITEM', 'MN_ITEM_BRAND', 'MENU ITEM TYPE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('30', 'MN_ITEM', 'MN_ITEM_CAT', 'MENU ITEM CATEGORY', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('34', 'MN_ITEM', 'MN_ITEM_NAME', 'MENU ITEM NAME', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('26', 'MN_ITEM', 'MN_ITEM_TYPE', 'MENU ITEM TYPE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('233', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('234', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('232', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('32', 'MN_ITEM_CAT', 'MN_ITEM_CAT_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('33', 'MN_ITEM_CAT', 'MN_ITEM_CAT_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('31', 'MN_ITEM_CAT', 'MN_ITEM_CAT_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('36', 'MN_ITEM_NAME', 'MN_ITEM_NAME_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('37', 'MN_ITEM_NAME', 'MN_ITEM_NAME_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('35', 'MN_ITEM_NAME', 'MN_ITEM_NAME_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('28', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('29', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('27', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('44', 'MN_JENIS_JASA', 'MN_JENIS_JASA_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('45', 'MN_JENIS_JASA', 'MN_JENIS_JASA_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('43', 'MN_JENIS_JASA', 'MN_JENIS_JASA_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('194', 'MN_JOURNAL', 'MN_JOURNAL_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('195', 'MN_JOURNAL', 'MN_JOURNAL_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('193', 'MN_JOURNAL', 'MN_JOURNAL_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('196', 'MN_JOURNAL', 'MN_JOURNAL_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('64', 'MN_LAPORAN', 'MN_CARD_FILE_REPORT', 'MENU CARD FILE REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('75', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('76', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('74', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('161', 'MN_OUTLET_SALES', 'MN_CASHIER', 'MENU CASHIER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('166', 'MN_OUTLET_SALES', 'MN_CASHIER_REGISTER', 'MENU CASHIER SUMMARY', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('212', 'MN_OUTLET_SALES', 'MN_CASHIER_RETURN', 'MENU CASHIER RETURN', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('211', 'MN_OUTLET_SALES', 'MN_MUTASI_CASHIER', 'MENU CASHIER REGISTER DETAIL', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('107', 'MN_PAYMENT_AP', 'MN_PEMBAYARAN_HUTANG', 'MENU A/P PAYMENT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('112', 'MN_PAYMENT_AP', 'MN_STATUS_HUTANG', 'MENU A/P STATUS', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('154', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('155', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('153', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('156', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('109', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('110', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('108', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('111', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('88', 'MN_PO', 'MN_PO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('89', 'MN_PO', 'MN_PO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('87', 'MN_PO', 'MN_PO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('90', 'MN_PO', 'MN_PO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('85', 'MN_PURCHASE', 'MN_APPROVAL_RO', 'MENU APPROVAL RO', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('218', 'MN_PURCHASE', 'MN_AP_INITBALANCE', 'MENU A/P BEGINNING BALANCE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('106', 'MN_PURCHASE', 'MN_PAYMENT_AP', 'MENU ACCOUNT PAYABLE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('86', 'MN_PURCHASE', 'MN_PO', 'MENU PURCHASE ORDER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('96', 'MN_PURCHASE', 'MN_PURCHASE_INV', 'MENU PURCHASE INVOICE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('113', 'MN_PURCHASE', 'MN_PURCHASE_REPORT', 'MENU PURCHASE & A/P REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('101', 'MN_PURCHASE', 'MN_PURCHASE_RETURN', 'MENU PURCHASE RETURN', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('91', 'MN_PURCHASE', 'MN_RECEIVED_ORDER', 'MENU RECEIVED ITEM', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('80', 'MN_PURCHASE', 'MN_RO', 'MENU PURCHASE REQUISITION', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('98', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('99', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('97', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('100', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('114', 'MN_PURCHASE_REPORT', 'MN_AP_REPORT', 'MENU A/P REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('103', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('104', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('102', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('105', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('169', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('170', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('168', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('171', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('93', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('94', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('92', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('95', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('82', 'MN_RO', 'MN_RO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('83', 'MN_RO', 'MN_RO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('81', 'MN_RO', 'MN_RO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('84', 'MN_RO', 'MN_RO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('151', 'MN_SALES', 'MN_AR', 'MENU ACCOUNT RECEIVABLE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('223', 'MN_SALES', 'MN_AR_INITBALANCE', 'MENU A/R BEGINNING BALANCE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('136', 'MN_SALES', 'MN_DELIVERED_ITEM', 'MENU DELIVERY ITEM', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('141', 'MN_SALES', 'MN_SALES_INV', 'MENU SALES INVOICE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('158', 'MN_SALES', 'MN_SALES_REPORT', 'MENU SALES / AR REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('146', 'MN_SALES', 'MN_SALES_RETURN', 'MENU SALES RETURN', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('228', 'MN_SALES', 'MN_SET_MARKETING', 'MENU ADD MARKETING FROM EMPLOYEE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('131', 'MN_SALES', 'MN_SO', 'MENU SALES ORDER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('143', 'MN_SALES_INV', 'MN_SALES_INV_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('144', 'MN_SALES_INV', 'MN_SALES_INV_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('142', 'MN_SALES_INV', 'MN_SALES_INV_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('145', 'MN_SALES_INV', 'MN_SALES_INV_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('159', 'MN_SALES_REPORT', 'MN_LAPORAN_JUAL', 'MENU SALES REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('160', 'MN_SALES_REPORT', 'MN_LAPORAN_PIUTANG', 'MENU A/R REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('148', 'MN_SALES_RETURN', 'MN_SALES_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('149', 'MN_SALES_RETURN', 'MN_SALES_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('147', 'MN_SALES_RETURN', 'MN_SALES_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('150', 'MN_SALES_RETURN', 'MN_SALES_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('229', 'MN_SET_MARKETING', 'MN_SET_MARKETING_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('133', 'MN_SO', 'MN_SO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('134', 'MN_SO', 'MN_SO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('132', 'MN_SO', 'MN_SO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('135', 'MN_SO', 'MN_SO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('174', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('175', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('173', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('176', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('77', 'MN_STOCK', 'MN_ITEM_LIST', 'MENU STOCK LIST', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('79', 'MN_STOCK', 'MN_LAPORAN_STOCK', 'MENU STOCK REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('73', 'MN_STOCK', 'MN_MOVE_ITEM', 'MENU STOCK TRANSFER', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('69', 'MN_STOCK', 'MN_STOCK_CORRECTION', 'MENU STOCK ADJUSTMENT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('65', 'MN_STOCK', 'MN_STOCK_OPNAME', 'MENU STOCK OPNAME', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('78', 'MN_STOCK', 'MN_STOCK_REPORT', 'MENU STOCK REPORT', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('71', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('72', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('70', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('67', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('68', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('66', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('18', 'MN_SUPPLIER', 'MN_SUPPLIER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('19', 'MN_SUPPLIER', 'MN_SUPPLIER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('17', 'MN_SUPPLIER', 'MN_SUPPLIER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('202', 'MN_TOOLS', 'MN_BACKUP', 'MENU BACKUP', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('204', 'MN_TOOLS', 'MN_LOG', 'MENU TRANSACTION LOG ', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('203', 'MN_TOOLS', 'MN_RESTORE', 'MENU RESTORE', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('230', 'MN_TOOLS', 'MN_SET_PATH', 'MENU SET IMAGE DIRECTORY', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('205', 'MN_TOOLS', 'MN_USERMANAGE', 'MENU USER MANAGEMENT ', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('48', 'MN_UNIT', 'MN_UNIT_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('49', 'MN_UNIT', 'MN_UNIT_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('47', 'MN_UNIT', 'MN_UNIT_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('53', 'MN_WAREHOUSE', 'MN_WAREHOUSE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('54', 'MN_WAREHOUSE', 'MN_WAREHOUSE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('52', 'MN_WAREHOUSE', 'MN_WAREHOUSE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('9', 'ROOT', 'MN_ACCOUNT', 'ACCOUNTING', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('1', 'ROOT', 'MN_CARDFILE', 'CARDFILE', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('8', 'ROOT', 'MN_CASH_BANK', 'CASH BANK', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('11', 'ROOT', 'MN_HELP', 'HELP', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('6', 'ROOT', 'MN_OUTLET_SALES', 'OUTLET SALES', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('3', 'ROOT', 'MN_PURCHASE', 'PURCHASE', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('5', 'ROOT', 'MN_SALES', 'SALES', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('2', 'ROOT', 'MN_STOCK', 'STOCK', '0');
INSERT INTO `i_templatehakakses_setmanufacture` VALUES ('10', 'ROOT', 'MN_TOOLS', 'TOOLS', '0');

-- ----------------------------
-- Table structure for i_templatehakakses_setretail
-- ----------------------------
DROP TABLE IF EXISTS `i_templatehakakses_setretail`;
CREATE TABLE `i_templatehakakses_setretail` (
  `nourut` int(11) NOT NULL,
  `parentkey` varchar(60) NOT NULL,
  `childkey` varchar(60) NOT NULL,
  `notes` text,
  `ismenu` int(11) DEFAULT NULL,
  PRIMARY KEY (`parentkey`,`childkey`),
  UNIQUE KEY `TEMPLATEHAKAKSES_PK` (`parentkey`,`childkey`),
  UNIQUE KEY `TEMPLATENOOROT` (`nourut`) USING BTREE,
  KEY `PARENTKEY` (`parentkey`),
  KEY `CHILDKEY` (`childkey`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_templatehakakses_setretail
-- ----------------------------
INSERT INTO `i_templatehakakses_setretail` VALUES ('199', 'MN_ACCOUNT', 'MN_ACCOUNT_REPORT', 'MENU ACCOUNTING & ANALYST REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('191', 'MN_ACCOUNT', 'MN_CASHBANK_SETUP', 'MENU ADD CASH/BANK TYPE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('186', 'MN_ACCOUNT', 'MN_COA', 'MENU CHART OF ACCOUNT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('192', 'MN_ACCOUNT', 'MN_JOURNAL', 'MENU GENERAL JOURNAL', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('197', 'MN_ACCOUNT', 'MN_JOURNAL_LIST', 'MENU JOURNAL LIST', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('198', 'MN_ACCOUNT', 'MN_LEDGER', 'MENU LEDGER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('200', 'MN_ACCOUNT_REPORT', 'MN_ACCOUNTING_REPORT', 'MENU ACCOUNTING REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('201', 'MN_ACCOUNT_REPORT', 'MN_ANALYST_REPORT', 'MENU ANALYST REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('220', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('221', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('219', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('222', 'MN_AP_INITBALANCE', 'MN_AP_INITBALANCE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('157', 'MN_AR', 'MN_AR_STATUS', 'MENU A/R STATUS', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('152', 'MN_AR', 'MN_PAYMENT_AR', 'MENU A/R PAYMENT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('225', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('226', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('224', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('227', 'MN_AR_INITBALANCE', 'MN_AR_INITBALANCE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('180', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('181', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('179', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('182', 'MN_BANK_RECONCILE', 'MN_BANK_RECONCILE_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('40', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('41', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('39', 'MN_BEGINING_BALANCE', 'MN_BEGINING_BALANCE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('24', 'MN_CARDFILE', 'MN_CARD_LIST', 'MENU CARD LIST', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('55', 'MN_CARDFILE', 'MN_CURRENCY', 'MENU CURRENCY', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('59', 'MN_CARDFILE', 'MN_CURRENCY_CONVERSION', 'MENU CURRENCY CONVERSION', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('12', 'MN_CARDFILE', 'MN_CUSTOMER', 'CUSTOMER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('20', 'MN_CARDFILE', 'MN_EMPLOYEE', 'MENU EMPLOYEE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('25', 'MN_CARDFILE', 'MN_ITEM', 'MENU ITEM', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('42', 'MN_CARDFILE', 'MN_JENIS_JASA', 'MENU SERVICE ITEM', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('63', 'MN_CARDFILE', 'MN_LAPORAN', 'MENU  MASTER REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('16', 'MN_CARDFILE', 'MN_SUPPLIER', 'MENU SUPPLIER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('46', 'MN_CARDFILE', 'MN_UNIT', 'MENU UNIT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('50', 'MN_CARDFILE', 'MN_UNIT_CONVERSION', 'MENU UNIT CONVERSION', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('51', 'MN_CARDFILE', 'MN_WAREHOUSE', 'MENU WAREHOUSE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('185', 'MN_CASHBANK_REPORT', 'MN_CASHBANK_RECAP_REPORT', 'MENU CASH/BANK SUMMARY', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('184', 'MN_CASHBANK_REPORT', 'MN_CASHBANK_TRANS_REPORT', 'MENU CASH/BANK DETAIL', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('163', 'MN_CASHIER', 'MN_CASHIER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('164', 'MN_CASHIER', 'MN_CASHIER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('162', 'MN_CASHIER', 'MN_CASHIER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('165', 'MN_CASHIER', 'MN_CASHIER_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('214', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('216', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('213', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('217', 'MN_CASHIER_RETURN', 'MN_CASHIER_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('178', 'MN_CASH_BANK', 'MN_BANK_RECONCILE', 'MENU BANK RECONCILE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('177', 'MN_CASH_BANK', 'MN_CASHBANK_REGISTER', 'MENU CASH/BANK REGISTER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('183', 'MN_CASH_BANK', 'MN_CASHBANK_REPORT', 'MENU CASH/BANK REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('167', 'MN_CASH_BANK', 'MN_RECEIPT_MONEY', 'MENU CASH/BANK RECEIPTS', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('172', 'MN_CASH_BANK', 'MN_SPEND_MONEY', 'MENU CASH/BANK DISBURSEMENT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('188', 'MN_COA', 'MN_COA_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('189', 'MN_COA', 'MN_COA_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('187', 'MN_COA', 'MN_COA_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('190', 'MN_COA', 'MN_COA_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('57', 'MN_CURRENCY', 'MN_CURRENCY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('58', 'MN_CURRENCY', 'MN_CURRENCY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('56', 'MN_CURRENCY', 'MN_CURRENCY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('61', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('62', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('60', 'MN_CURRENCY_CONVERSION', 'MN_CURRENCY_CONVERSION_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('14', 'MN_CUSTOMER', 'MN_CUSTOMER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('15', 'MN_CUSTOMER', 'MN_CUSTOMER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('13', 'MN_CUSTOMER', 'MN_CUSTOMER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('138', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('139', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('137', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('140', 'MN_DELIVERED_ITEM', 'MN_DELIVERED_ITEM_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('22', 'MN_EMPLOYEE', 'MN_EMPLOYEE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('23', 'MN_EMPLOYEE', 'MN_EMPLOYEE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('21', 'MN_EMPLOYEE', 'MN_EMPLOYEE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('38', 'MN_ITEM', 'MN_BEGINING_BALANCE', 'MENU BEGINNING BALANCE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('231', 'MN_ITEM', 'MN_ITEM_BRAND', 'MENU ITEM TYPE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('30', 'MN_ITEM', 'MN_ITEM_CAT', 'MENU ITEM CATEGORY', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('34', 'MN_ITEM', 'MN_ITEM_NAME', 'MENU ITEM NAME', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('26', 'MN_ITEM', 'MN_ITEM_TYPE', 'MENU ITEM TYPE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('233', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('234', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('232', 'MN_ITEM_BRAND', 'MN_ITEM_BRAND_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('32', 'MN_ITEM_CAT', 'MN_ITEM_CAT_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('33', 'MN_ITEM_CAT', 'MN_ITEM_CAT_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('31', 'MN_ITEM_CAT', 'MN_ITEM_CAT_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('36', 'MN_ITEM_NAME', 'MN_ITEM_NAME_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('37', 'MN_ITEM_NAME', 'MN_ITEM_NAME_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('35', 'MN_ITEM_NAME', 'MN_ITEM_NAME_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('28', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('29', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('27', 'MN_ITEM_TYPE', 'MN_ITEM_TYPE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('44', 'MN_JENIS_JASA', 'MN_JENIS_JASA_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('45', 'MN_JENIS_JASA', 'MN_JENIS_JASA_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('43', 'MN_JENIS_JASA', 'MN_JENIS_JASA_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('194', 'MN_JOURNAL', 'MN_JOURNAL_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('195', 'MN_JOURNAL', 'MN_JOURNAL_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('193', 'MN_JOURNAL', 'MN_JOURNAL_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('196', 'MN_JOURNAL', 'MN_JOURNAL_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('64', 'MN_LAPORAN', 'MN_CARD_FILE_REPORT', 'MENU CARD FILE REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('75', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('76', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('74', 'MN_MOVE_ITEM', 'MN_MOVE_ITEM_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('161', 'MN_OUTLET_SALES', 'MN_CASHIER', 'MENU CASHIER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('166', 'MN_OUTLET_SALES', 'MN_CASHIER_REGISTER', 'MENU CASHIER SUMMARY', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('212', 'MN_OUTLET_SALES', 'MN_CASHIER_RETURN', 'MENU CASHIER RETURN', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('211', 'MN_OUTLET_SALES', 'MN_MUTASI_CASHIER', 'MENU CASHIER REGISTER DETAIL', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('107', 'MN_PAYMENT_AP', 'MN_PEMBAYARAN_HUTANG', 'MENU A/P PAYMENT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('112', 'MN_PAYMENT_AP', 'MN_STATUS_HUTANG', 'MENU A/P STATUS', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('154', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('155', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('153', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('156', 'MN_PAYMENT_AR', 'MN_PAYMENT_AR_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('109', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('110', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('108', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('111', 'MN_PEMBAYARAN_HUTANG', 'MN_PEMBAYARAN_HUTANG_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('88', 'MN_PO', 'MN_PO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('89', 'MN_PO', 'MN_PO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('87', 'MN_PO', 'MN_PO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('90', 'MN_PO', 'MN_PO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('85', 'MN_PURCHASE', 'MN_APPROVAL_RO', 'MENU APPROVAL RO', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('218', 'MN_PURCHASE', 'MN_AP_INITBALANCE', 'MENU A/P BEGINNING BALANCE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('106', 'MN_PURCHASE', 'MN_PAYMENT_AP', 'MENU ACCOUNT PAYABLE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('86', 'MN_PURCHASE', 'MN_PO', 'MENU PURCHASE ORDER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('96', 'MN_PURCHASE', 'MN_PURCHASE_INV', 'MENU PURCHASE INVOICE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('113', 'MN_PURCHASE', 'MN_PURCHASE_REPORT', 'MENU PURCHASE & A/P REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('101', 'MN_PURCHASE', 'MN_PURCHASE_RETURN', 'MENU PURCHASE RETURN', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('91', 'MN_PURCHASE', 'MN_RECEIVED_ORDER', 'MENU RECEIVED ITEM', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('80', 'MN_PURCHASE', 'MN_RO', 'MENU PURCHASE REQUISITION', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('98', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('99', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('97', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('100', 'MN_PURCHASE_INV', 'MN_PURCHASE_INV_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('114', 'MN_PURCHASE_REPORT', 'MN_AP_REPORT', 'MENU A/P REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('103', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('104', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('102', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('105', 'MN_PURCHASE_RETURN', 'MN_PURCHASE_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('169', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('170', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('168', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('171', 'MN_RECEIPT_MONEY', 'MN_RECEIPT_MONEY_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('93', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('94', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('92', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('95', 'MN_RECEIVED_ORDER', 'MN_RECEIVED_ORDER_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('82', 'MN_RO', 'MN_RO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('83', 'MN_RO', 'MN_RO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('81', 'MN_RO', 'MN_RO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('84', 'MN_RO', 'MN_RO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('151', 'MN_SALES', 'MN_AR', 'MENU ACCOUNT RECEIVABLE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('223', 'MN_SALES', 'MN_AR_INITBALANCE', 'MENU A/R BEGINNING BALANCE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('136', 'MN_SALES', 'MN_DELIVERED_ITEM', 'MENU DELIVERY ITEM', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('141', 'MN_SALES', 'MN_SALES_INV', 'MENU SALES INVOICE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('158', 'MN_SALES', 'MN_SALES_REPORT', 'MENU SALES / AR REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('146', 'MN_SALES', 'MN_SALES_RETURN', 'MENU SALES RETURN', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('228', 'MN_SALES', 'MN_SET_MARKETING', 'MENU ADD MARKETING FROM EMPLOYEE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('131', 'MN_SALES', 'MN_SO', 'MENU SALES ORDER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('143', 'MN_SALES_INV', 'MN_SALES_INV_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('144', 'MN_SALES_INV', 'MN_SALES_INV_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('142', 'MN_SALES_INV', 'MN_SALES_INV_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('145', 'MN_SALES_INV', 'MN_SALES_INV_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('159', 'MN_SALES_REPORT', 'MN_LAPORAN_JUAL', 'MENU SALES REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('160', 'MN_SALES_REPORT', 'MN_LAPORAN_PIUTANG', 'MENU A/R REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('148', 'MN_SALES_RETURN', 'MN_SALES_RETURN_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('149', 'MN_SALES_RETURN', 'MN_SALES_RETURN_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('147', 'MN_SALES_RETURN', 'MN_SALES_RETURN_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('150', 'MN_SALES_RETURN', 'MN_SALES_RETURN_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('229', 'MN_SET_MARKETING', 'MN_SET_MARKETING_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('133', 'MN_SO', 'MN_SO_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('134', 'MN_SO', 'MN_SO_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('132', 'MN_SO', 'MN_SO_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('135', 'MN_SO', 'MN_SO_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('174', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('175', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('173', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('176', 'MN_SPEND_MONEY', 'MN_SPEND_MONEY_PRINT', 'Akses Print', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('77', 'MN_STOCK', 'MN_ITEM_LIST', 'MENU STOCK LIST', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('79', 'MN_STOCK', 'MN_LAPORAN_STOCK', 'MENU STOCK REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('73', 'MN_STOCK', 'MN_MOVE_ITEM', 'MENU STOCK TRANSFER', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('69', 'MN_STOCK', 'MN_STOCK_CORRECTION', 'MENU STOCK ADJUSTMENT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('65', 'MN_STOCK', 'MN_STOCK_OPNAME', 'MENU STOCK OPNAME', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('78', 'MN_STOCK', 'MN_STOCK_REPORT', 'MENU STOCK REPORT', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('71', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('72', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('70', 'MN_STOCK_CORRECTION', 'MN_STOCK_CORRECTION_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('67', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('68', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('66', 'MN_STOCK_OPNAME', 'MN_STOCK_OPNAME_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('18', 'MN_SUPPLIER', 'MN_SUPPLIER_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('19', 'MN_SUPPLIER', 'MN_SUPPLIER_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('17', 'MN_SUPPLIER', 'MN_SUPPLIER_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('202', 'MN_TOOLS', 'MN_BACKUP', 'MENU BACKUP', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('204', 'MN_TOOLS', 'MN_LOG', 'MENU TRANSACTION LOG ', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('203', 'MN_TOOLS', 'MN_RESTORE', 'MENU RESTORE', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('230', 'MN_TOOLS', 'MN_SET_PATH', 'MENU SET IMAGE DIRECTORY', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('205', 'MN_TOOLS', 'MN_USERMANAGE', 'MENU USER MANAGEMENT ', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('48', 'MN_UNIT', 'MN_UNIT_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('49', 'MN_UNIT', 'MN_UNIT_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('47', 'MN_UNIT', 'MN_UNIT_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('53', 'MN_WAREHOUSE', 'MN_WAREHOUSE_ADD', 'Akses Add', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('54', 'MN_WAREHOUSE', 'MN_WAREHOUSE_DELETE', 'Akses Delete', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('52', 'MN_WAREHOUSE', 'MN_WAREHOUSE_EDIT', 'Akses Edit', '1');
INSERT INTO `i_templatehakakses_setretail` VALUES ('9', 'ROOT', 'MN_ACCOUNT', 'ACCOUNTING', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('1', 'ROOT', 'MN_CARDFILE', 'CARDFILE', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('8', 'ROOT', 'MN_CASH_BANK', 'CASH BANK', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('11', 'ROOT', 'MN_HELP', 'HELP', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('6', 'ROOT', 'MN_OUTLET_SALES', 'OUTLET SALES', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('3', 'ROOT', 'MN_PURCHASE', 'PURCHASE', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('5', 'ROOT', 'MN_SALES', 'SALES', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('2', 'ROOT', 'MN_STOCK', 'STOCK', '0');
INSERT INTO `i_templatehakakses_setretail` VALUES ('10', 'ROOT', 'MN_TOOLS', 'TOOLS', '0');

-- ----------------------------
-- Table structure for i_upload_path
-- ----------------------------
DROP TABLE IF EXISTS `i_upload_path`;
CREATE TABLE `i_upload_path` (
  `form` varchar(250) NOT NULL,
  `path` text,
  PRIMARY KEY (`form`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of i_upload_path
-- ----------------------------
INSERT INTO `i_upload_path` VALUES ('Customer', 'E:/Image Accounting 2.6/Demo Pelanggan');
INSERT INTO `i_upload_path` VALUES ('Employee', 'E:/Image Accounting 2.6/Demo Karyawan');
INSERT INTO `i_upload_path` VALUES ('Item', 'E:/Image Accounting 2.6/Demo Barang');
INSERT INTO `i_upload_path` VALUES ('Logo', 'D:/LOGO/accreva copy.png');
INSERT INTO `i_upload_path` VALUES ('Supplier', 'E:/Image Accounting 2.6/Demo Supplier');

-- ----------------------------
-- Table structure for lap_mutasi_hpp
-- ----------------------------
DROP TABLE IF EXISTS `lap_mutasi_hpp`;
CREATE TABLE `lap_mutasi_hpp` (
  `no_bukti` varchar(60) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_item` varchar(50) DEFAULT NULL,
  `item_name` varchar(300) DEFAULT NULL,
  `masuk` double DEFAULT NULL,
  `keluar` double DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `price` double DEFAULT NULL,
  `saldo` double DEFAULT NULL,
  `company` text,
  `notes` text,
  `nmb_asc` int(11) DEFAULT NULL,
  `price_in` double DEFAULT NULL,
  `price_out` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of lap_mutasi_hpp
-- ----------------------------
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', '0915000001', 'Spare Part 12045', '20', '0', 'pcs', '108000', '20', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '108000', '108000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', '0915000001', 'Spare Part 12045', '0', '3', 'pcs', '108000', '17', 'PT. Aneka Dagang', 'Penjualan', '1', '108000', '108000');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', '0915000002', 'Item Coba', '20', '0', 'pcs', '1500', '20', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '1500', '1500');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', '0915000002', 'Item Coba', '0', '11', 'pcs', '1500', '9', 'PT. Aneka Dagang', 'Penjualan', '1', '1500', '1500');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV091158', 'Ballpoint Standard', '20', '0', 'pcs', '1500', '20', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '1500', '1500');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', 'PFCB-RVRV091158', 'Ballpoint Standard', '0', '2', 'pcs', '1500', '18', 'PT. Aneka Dagang', 'Penjualan', '1', '1500', '1500');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV091750', 'Bazic Penghapus Pensil', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00003', '2015-07-30 00:00:00', 'PFCB-RVRV091750', 'Bazic Penghapus Pensil', '240', '0', 'pack', '800', '240', 'PT. Aneka Dagang', 'Pembelian', '1', '800', '800');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/8-2015-00001', '2015-08-06 00:00:00', 'PFCB-RVRV091750', 'Bazic Penghapus Pensil', '0', '12', 'pcs', '810', '228', 'PT. Aneka Dagang', 'Penjualan', '2', '800', '800');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '0', '0', 'btl', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00001', '2015-07-25 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '20', '0', 'btl', '11000', '20', 'PT. Aneka Dagang', 'Pembelian', '1', '11000', '11000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00002', '2015-07-25 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '5', '0', 'btl', '11000', '25', 'PT. Aneka Dagang', 'Pembelian', '2', '11000', '11000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00003', '2015-07-30 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '50', '0', 'btl', '12000', '75', 'PT. Aneka Dagang', 'Pembelian', '3', '12500', '12500');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/8-2015-00001', '2015-08-06 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '0', '5', 'btl', '12125', '70', 'PT. Aneka Dagang', 'Penjualan', '4', '12000', '12000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '50', '0', 'btl', '11656', '120', 'PT. Aneka Dagang', 'Pembelian', '5', '11000', '11000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/PRU/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '0', '1', 'btl', '11651', '119', 'PT. Aneka Dagang', 'Retur Pembelian', '6', '11000', '11000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '0', '5', 'btl', '11746', '114', 'PT. Aneka Dagang', 'Penjualan', '7', '11651', '11651');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/09-2015-00002', '2015-09-16 00:00:00', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', '50', '0', 'btl', '15482', '164', 'PT. Aneka Dagang', 'Pembelian', '8', '24000', '24000');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV111453', 'Binder No 200 Penjepit Kertas', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00004', '2015-07-30 00:00:00', 'PFCB-RVRV111453', 'Binder No 200 Penjepit Kertas', '480', '0', 'pack', '200', '480', 'PT. Aneka Dagang', 'Pembelian', '1', '200', '200');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV112142', 'Binder No 260 Penjepit Kertas', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00004', '2015-07-30 00:00:00', 'PFCB-RVRV112142', 'Binder No 260 Penjepit Kertas', '480', '0', 'pack', '250', '480', 'PT. Aneka Dagang', 'Pembelian', '1', '250', '250');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV112337', 'Bindex Ordner Kecil', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00001', '2015-07-25 00:00:00', 'PFCB-RVRV112337', 'Bindex Ordner Kecil', '50', '0', 'pcs', '9500', '50', 'PT. Aneka Dagang', 'Pembelian', '1', '9500', '9500');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV112621', 'Buku Kwitansi 40lbr', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00001', '2015-08-03 00:00:00', 'PFCB-RVRV112621', 'Buku Kwitansi 40lbr', '50', '0', 'pcs', '5800', '50', 'PT. Aneka Dagang', 'Pembelian', '1', '5800', '5800');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV113247', 'Buku Kwitansi 50lbr', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00001', '2015-08-03 00:00:00', 'PFCB-RVRV113247', 'Buku Kwitansi 50lbr', '50', '0', 'pcs', '7500', '50', 'PT. Aneka Dagang', 'Pembelian', '1', '7500', '7500');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV113349', 'Casablanca Body Spray 65ml - Perfume', '0', '0', 'btl', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', '0', '0', 'btl', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/7-2015-00001', '2015-07-25 00:00:00', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', '240', '0', 'pack', '12500', '240', 'PT. Aneka Dagang', 'Pembelian', '1', '12500', '12500');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', '240', '0', 'pack', '6615', '480', 'PT. Aneka Dagang', 'Pembelian', '2', '729.1666666666666', '729.1666666666666');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', '0', '5', 'btl', '6763', '475', 'PT. Aneka Dagang', 'Penjualan', '3', '6615', '6615');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/09-2015-00002', '2015-09-16 00:00:00', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', '2400', '0', 'pack', '1500', '2875', 'PT. Aneka Dagang', 'Pembelian', '4', '458.3333333333333', '458.3333333333333');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV113804', 'Casablanca Perfume Biru 65ml', '0', '0', 'btl', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-RVRV113804', 'Casablanca Perfume Biru 65ml', '480', '0', 'pack', '729.1666666666666', '480', 'PT. Aneka Dagang', 'Pembelian', '1', '729.1666666666666', '729.1666666666666');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-RVRV113804', 'Casablanca Perfume Biru 65ml', '0', '5', 'btl', '938', '475', 'PT. Aneka Dagang', 'Penjualan', '2', '729.1666666666666', '729.1666666666666');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/09-2015-00002', '2015-09-16 00:00:00', 'PFCB-RVRV113804', 'Casablanca Perfume Biru 65ml', '600', '0', 'pack', '647', '1075', 'PT. Aneka Dagang', 'Pembelian', '3', '416.6666666666667', '416.6666666666667');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV113959', 'Dream Donna Buku Gambar', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00001', '2015-08-03 00:00:00', 'PFCB-RVRV113959', 'Dream Donna Buku Gambar', '120', '0', 'pack', '3000', '120', 'PT. Aneka Dagang', 'Pembelian', '1', '3000', '3000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00004', '2015-09-30 00:00:00', 'PFCB-RVRV113959', 'Dream Donna Buku Gambar', '0', '1', 'pcs', '2975', '119', 'PT. Aneka Dagang', 'Penjualan', '2', '3000', '3000');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV114057', 'Executive Notebook 38lbr', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV114222', 'Faber Castell Penghapus Pensil', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV114429', 'ABC Baterai Alkaline AAA', '0', '0', 'pack', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV114632', 'ABC Kecap Asin 140 ml - per botol', '0', '0', 'btl', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00002', '2015-08-04 00:00:00', 'PFCB-RVRV114632', 'ABC Kecap Asin 140 ml - per botol', '1200', '0', 'pack', '291.6666666666667', '1200', 'PT. Aneka Dagang', 'Pembelian', '1', '291.6666666666667', '291.6666666666667');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00001', '2015-09-12 00:00:00', 'PFCB-RVRV114632', 'ABC Kecap Asin 140 ml - per botol', '0', '10', 'btl', '360', '1190', 'PT. Aneka Dagang', 'Penjualan', '2', '291.6666666666667', '291.6666666666667');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV114728', 'ABC Kecap Inggris 195 ml - per botol', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00002', '2015-08-04 00:00:00', 'PFCB-RVRV114728', 'ABC Kecap Inggris 195 ml - per botol', '720', '0', 'pack', '375', '720', 'PT. Aneka Dagang', 'Pembelian', '1', '375', '375');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00001', '2015-09-12 00:00:00', 'PFCB-RVRV114728', 'ABC Kecap Inggris 195 ml - per botol', '0', '10', 'pcs', '518', '710', 'PT. Aneka Dagang', 'Penjualan', '2', '375', '375');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV114836', 'ABC Kecap Manis - per 10 sachet', '0', '0', 'pack', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV114944', 'ABC Kecap Manis 100ml - per pouch', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV115113', 'ABC Kecap Manis 140ml - per botol', '0', '0', 'btl', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV115225', 'ABC Kecap Manis 275ml - per botol', '0', '0', 'btl', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV115319', 'ABC Kecap Manis refil 600 ml - per pouch', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV115705', 'ABC Kopi Mocca - per sachet', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00003', '2015-08-10 00:00:00', 'PFCB-RVRV115705', 'ABC Kopi Mocca - per sachet', '200', '0', 'pack', '1000', '200', 'PT. Aneka Dagang', 'Pembelian', '1', '1000', '1000');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RVRV115839', 'ABC Kopi Susu 32gr - kopi instan - per sachet', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00003', '2015-08-10 00:00:00', 'PFCB-RVRV115839', 'ABC Kopi Susu 32gr - kopi instan - per sachet', '250', '0', 'pack', '1400', '250', 'PT. Aneka Dagang', 'Pembelian', '1', '1400', '1400');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00001', '2015-09-12 00:00:00', 'PFCB-RVRV115839', 'ABC Kopi Susu 32gr - kopi instan - per sachet', '0', '5', 'pcs', '1406', '245', 'PT. Aneka Dagang', 'Penjualan', '2', '1400', '1400');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RWRV084000', 'ABC Kopi Susu 32gr - kopi instan - per sachet', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RWRV084324', 'ABC Mie Soto Cup (Gelas) 60gr', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00003', '2015-08-10 00:00:00', 'PFCB-RWRV084324', 'ABC Mie Soto Cup (Gelas) 60gr', '960', '0', 'pack', '3000', '960', 'PT. Aneka Dagang', 'Pembelian', '1', '3000', '3000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00004', '2015-08-12 00:00:00', 'PFCB-RWRV084324', 'ABC Mie Soto Cup (Gelas) 60gr', '480', '0', 'pack', '3000', '1440', 'PT. Aneka Dagang', 'Pembelian', '2', '3000', '3000');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-RWRV084538', 'ABC Minuman Asam Jawa 250ml - kemasan kotak', '0', '0', 'pcs', '0', '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', '0', '0');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/8-2015-00004', '2015-08-12 00:00:00', 'PFCB-RWRV084538', 'ABC Minuman Asam Jawa 250ml - kemasan kotak', '1200', '0', 'pack', '4200', '1200', 'PT. Aneka Dagang', 'Pembelian', '1', '4200', '4200');
INSERT INTO `lap_mutasi_hpp` VALUES ('Saldo Awal', '2015-04-10 00:00:00', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '0', '0', null, null, '0', 'PT. Aneka Dagang', 'Saldo Awal Barang', '0', null, null);
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/4-2015-00001', '2015-04-10 00:00:00', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '10', '0', 'btl', '25000', '10', 'PT. Aneka Dagang', 'Pembelian', '1', '25000', '25000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/4-2015-00001', '2015-04-10 00:00:00', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '0', '1', 'btl', '25227', '9', 'PT. Aneka Dagang', 'Penjualan', '2', '25000', '25000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/4-2015-00002', '2015-04-10 00:00:00', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '0', '1', 'btl', '25454', '8', 'PT. Aneka Dagang', 'Penjualan', '3', '25227', '25227');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/REV/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '50', '0', 'btl', '24201', '58', 'PT. Aneka Dagang', 'Pembelian', '4', '24000', '24000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/PRU/09-2015-00001', '2015-09-14 00:00:00', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '0', '2', 'btl', '24194', '56', 'PT. Aneka Dagang', 'Retur Pembelian', '5', '24000', '24000');
INSERT INTO `lap_mutasi_hpp` VALUES ('FRM/DO/09-2015-00002', '2015-09-14 00:00:00', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '0', '2', 'btl', '24308', '54', 'PT. Aneka Dagang', 'Penjualan', '6', '24194', '24194');

-- ----------------------------
-- Table structure for log_transaction
-- ----------------------------
DROP TABLE IF EXISTS `log_transaction`;
CREATE TABLE `log_transaction` (
  `id_log` int(11) NOT NULL AUTO_INCREMENT,
  `transaction_no` varchar(120) DEFAULT NULL,
  `form` varchar(120) DEFAULT NULL,
  `username` varchar(250) DEFAULT NULL,
  `action` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `value` text,
  PRIMARY KEY (`id_log`),
  KEY `fk_log1` (`username`),
  CONSTRAINT `fk_log1` FOREIGN KEY (`username`) REFERENCES `mst_user` (`username`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=806 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of log_transaction
-- ----------------------------
INSERT INTO `log_transaction` VALUES ('1', '1-0000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Assets');
INSERT INTO `log_transaction` VALUES ('2', '1-1000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Current Assets');
INSERT INTO `log_transaction` VALUES ('3', '1-1100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Cash/Bank');
INSERT INTO `log_transaction` VALUES ('4', '1-1101', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Main Cash');
INSERT INTO `log_transaction` VALUES ('5', '1-1102', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Petty Cash');
INSERT INTO `log_transaction` VALUES ('6', '1-1103', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Mandiri Bank');
INSERT INTO `log_transaction` VALUES ('7', '1-1104', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - BCA Bank');
INSERT INTO `log_transaction` VALUES ('8', '1-1105', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - BNI Bank');
INSERT INTO `log_transaction` VALUES ('9', '1-1199', 'Chart Of Account', 'admin', 'Input', '2015-01-07 00:00:00', 'Input Account Baru - Cashier Cash');
INSERT INTO `log_transaction` VALUES ('10', '1-1200', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Inventory');
INSERT INTO `log_transaction` VALUES ('11', '1-1201', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('12', '1-1299', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Miscellanous Inventory');
INSERT INTO `log_transaction` VALUES ('13', '1-1300', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Trade Bill');
INSERT INTO `log_transaction` VALUES ('14', '1-1301', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Account Receivables');
INSERT INTO `log_transaction` VALUES ('15', '1-1400', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Prepaid Expenses');
INSERT INTO `log_transaction` VALUES ('16', '1-1401', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Consultant Payment');
INSERT INTO `log_transaction` VALUES ('17', '1-1499', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Others Prepaid');
INSERT INTO `log_transaction` VALUES ('18', '1-1500', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Prepaid VAT');
INSERT INTO `log_transaction` VALUES ('19', '1-1501', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - VAT IN');
INSERT INTO `log_transaction` VALUES ('20', '1-1599', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Prepaid Other Tax');
INSERT INTO `log_transaction` VALUES ('21', '1-2000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Fixed Assets');
INSERT INTO `log_transaction` VALUES ('22', '1-2100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Land & Building');
INSERT INTO `log_transaction` VALUES ('23', '1-2101', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Land');
INSERT INTO `log_transaction` VALUES ('24', '1-2102', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Building');
INSERT INTO `log_transaction` VALUES ('25', '1-2103', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Building Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('26', '1-2104', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Office Equipment');
INSERT INTO `log_transaction` VALUES ('27', '1-2105', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Office Equip Accumulated Depr');
INSERT INTO `log_transaction` VALUES ('28', '1-2106', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Vehicles');
INSERT INTO `log_transaction` VALUES ('29', '1-2107', 'Chart Of Account', 'admin', 'Input', '2014-12-31 00:00:00', 'Input Account Baru - Vehicles Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('30', '1-2198', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Other Fixed Assets');
INSERT INTO `log_transaction` VALUES ('31', '1-2199', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Other FA Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('32', '2-0000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Liabilities');
INSERT INTO `log_transaction` VALUES ('33', '2-1000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Short Term Liabilities');
INSERT INTO `log_transaction` VALUES ('34', '2-1100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Trade Payable');
INSERT INTO `log_transaction` VALUES ('35', '2-1101', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Account Payable');
INSERT INTO `log_transaction` VALUES ('36', '2-1102', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - VAT OUT');
INSERT INTO `log_transaction` VALUES ('37', '2-1200', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Bank Payable');
INSERT INTO `log_transaction` VALUES ('38', '2-1201', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - BCA Payable');
INSERT INTO `log_transaction` VALUES ('39', '2-2000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Long Term Liabilities');
INSERT INTO `log_transaction` VALUES ('40', '2-2100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Bank Payable');
INSERT INTO `log_transaction` VALUES ('41', '2-2101', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - BCA Payable');
INSERT INTO `log_transaction` VALUES ('42', '3-0000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Capital');
INSERT INTO `log_transaction` VALUES ('43', '3-1000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Authorized Capital');
INSERT INTO `log_transaction` VALUES ('44', '3-1100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Owners Capital');
INSERT INTO `log_transaction` VALUES ('45', '3-1101', 'Chart Of Account', 'admin', 'Input', '2014-12-30 00:00:00', 'Input Account Baru - Paid-Up Capital');
INSERT INTO `log_transaction` VALUES ('46', '3-1102', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Prive');
INSERT INTO `log_transaction` VALUES ('47', '3-1199', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Profit-Loss Summary');
INSERT INTO `log_transaction` VALUES ('48', '4-0000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Income');
INSERT INTO `log_transaction` VALUES ('49', '4-1000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Operational Income');
INSERT INTO `log_transaction` VALUES ('50', '4-1100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Sales');
INSERT INTO `log_transaction` VALUES ('51', '4-1101', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Product Sales');
INSERT INTO `log_transaction` VALUES ('52', '4-1102', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Purchase Discount');
INSERT INTO `log_transaction` VALUES ('53', '4-1103', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Sales Discount');
INSERT INTO `log_transaction` VALUES ('54', '4-1104', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Account Payable Payment Disc');
INSERT INTO `log_transaction` VALUES ('55', '4-1105', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Account Receivable Payment Disc');
INSERT INTO `log_transaction` VALUES ('56', '4-1200', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Operational Revenues');
INSERT INTO `log_transaction` VALUES ('57', '4-1201', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Service Revenues');
INSERT INTO `log_transaction` VALUES ('58', '4-1202', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Service Revenues Discount');
INSERT INTO `log_transaction` VALUES ('59', '4-1203', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Other Revenues');
INSERT INTO `log_transaction` VALUES ('60', '4-2000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Non Operational Income');
INSERT INTO `log_transaction` VALUES ('61', '4-2100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Non Operational Revenues');
INSERT INTO `log_transaction` VALUES ('62', '4-2101', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Bank Interest Revenues');
INSERT INTO `log_transaction` VALUES ('63', '4-2102', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Exchange Rate Revenue');
INSERT INTO `log_transaction` VALUES ('64', '5-0000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Cost Of Goods');
INSERT INTO `log_transaction` VALUES ('65', '5-1000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Cost Of Goods Sold');
INSERT INTO `log_transaction` VALUES ('66', '5-1100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Inventory COGS');
INSERT INTO `log_transaction` VALUES ('67', '5-1101', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Merchandise Inventory COGS');
INSERT INTO `log_transaction` VALUES ('68', '5-1199', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Other Inventory COGS');
INSERT INTO `log_transaction` VALUES ('69', '6-0000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Expenses');
INSERT INTO `log_transaction` VALUES ('70', '6-1000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Operational Expenses');
INSERT INTO `log_transaction` VALUES ('71', '6-1100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Adm & GA Expenses');
INSERT INTO `log_transaction` VALUES ('72', '6-1101', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Electricity, Phone & Water Expense');
INSERT INTO `log_transaction` VALUES ('73', '6-1102', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Office Supplies Expense');
INSERT INTO `log_transaction` VALUES ('74', '6-1103', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Tax Expense');
INSERT INTO `log_transaction` VALUES ('75', '6-1104', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Building Depreciation Expense');
INSERT INTO `log_transaction` VALUES ('76', '6-1105', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Vehicles Depreciation Expense');
INSERT INTO `log_transaction` VALUES ('77', '6-1106', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Equipment Depreciation Expense');
INSERT INTO `log_transaction` VALUES ('78', '6-1107', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Freight');
INSERT INTO `log_transaction` VALUES ('79', '6-1199', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Other Adm & GA Expense');
INSERT INTO `log_transaction` VALUES ('80', '6-1200', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Sales & Marketing Expense');
INSERT INTO `log_transaction` VALUES ('81', '6-1201', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Advertising & Promotion Expense');
INSERT INTO `log_transaction` VALUES ('82', '6-1202', 'Chart Of Account', 'admin', 'Input', '2014-06-11 00:00:00', 'Input Account Baru - Commission Expense');
INSERT INTO `log_transaction` VALUES ('83', '6-1299', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Other Marketing Expense');
INSERT INTO `log_transaction` VALUES ('84', '6-2000', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Non Operational Expense');
INSERT INTO `log_transaction` VALUES ('85', '6-2100', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Non Operational Cost');
INSERT INTO `log_transaction` VALUES ('86', '6-2101', 'Chart Of Account', 'Admin', 'Input', '2014-01-01 00:00:00', 'Input Account Baru - Exchange Rate Expense');
INSERT INTO `log_transaction` VALUES ('87', 'PFCB-SSRV115509', 'Master Barang', 'admin', 'Input', '2015-03-23 00:00:00', 'Input Master Barang Baru - Axe Deodorant Nelu 150ml Pewangi Tubuh');
INSERT INTO `log_transaction` VALUES ('88', '$US', 'Master Currency', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Master Currency - Dollar Amerika');
INSERT INTO `log_transaction` VALUES ('89', 'FRM/JU/4-2015-00001', 'Jurnal Umum', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Jurnal Umum Baru - FRM/JU/4-2015-00001');
INSERT INTO `log_transaction` VALUES ('90', 'FRM/SPM/4-2015-00001', 'Kas BankBK', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Transaksi Kas Bank Baru - 1-1104');
INSERT INTO `log_transaction` VALUES ('91', 'CUST.000001', 'Master Customer', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Master Customer Baru - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('92', 'PFCB-SSRV115509', 'Master Item', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Master Item - Axe Deodorant Nelu 150ml Pewangi Tubuh');
INSERT INTO `log_transaction` VALUES ('93', 'FRM/RO/4-2015-00001', 'Request Order', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('94', 'FRM/RO/4-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-04-10 00:00:00', 'Approve Request OrderPFCB-SSRV115509');
INSERT INTO `log_transaction` VALUES ('95', 'SUPP.000001', 'Master Supplier', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Master Supplier Baru - UD Jaya Lestari');
INSERT INTO `log_transaction` VALUES ('96', 'FRM/PO/4-2015-00001', 'Purchase Order', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Purchase Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('97', 'FRM/REV/4-2015-00001', 'Received Order', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Received Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('98', 'FRM/REV/4-2015-00001', 'Received Order', 'admin', 'Hapus', '2015-04-10 00:00:00', 'Hapus Received Order - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('99', 'FRM/REV/4-2015-00001', 'Received Order', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Received Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('100', 'FRM/PU/4-2015-00001', 'Faktur Pembelian', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Faktur Beli Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('101', 'FRM/PO/4-2015-00001', 'Purchase Order', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Purchase Order - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('102', 'EMPY.000001', 'Master Pegawai', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Master Pegawai Baru - Andi Suryawan');
INSERT INTO `log_transaction` VALUES ('103', 'FRM/SO/4-2015-00001', 'Sales Order', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('104', 'FRM/DO/4-2015-00001', 'Surat Jalan', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('105', 'FRM/SA/4-2015-00001', 'Penjualan', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Faktur Jual Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('106', 'FRM/SO/4-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('107', 'FRM/PAR/4-2015-00001', 'Pembayaran Piutang', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Pembayaran Piutang Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('108', 'FRM/SO/4-2015-00002', 'Sales Order', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('109', 'FRM/DO/4-2015-00001', 'Surat Jalan', 'admin', 'Hapus', '2015-04-10 00:00:00', 'Hapus Surat Jalan - CUST.000001');
INSERT INTO `log_transaction` VALUES ('110', 'FRM/DO/4-2015-00001', 'Surat Jalan', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('111', 'FRM/DO/4-2015-00002', 'Surat Jalan', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('112', 'FRM/SA/4-2015-00002', 'Penjualan', 'admin', 'Input', '2015-04-10 00:00:00', 'Input Faktur Jual Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('113', 'FRM/SO/4-2015-00002', 'Sales Order', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('114', 'JRJTQ5914', 'Master Service', 'admin', 'Input', '2015-04-30 00:00:00', 'Input Master Service Baru - Jasa Perbaikan Aksesoris');
INSERT INTO `log_transaction` VALUES ('115', 'PFCB-SSRV115509', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Axe Deodorant Nelu 150ml Pewangi Tubuh');
INSERT INTO `log_transaction` VALUES ('116', 'PFCB-RVRV091158', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Ballpoint Standard');
INSERT INTO `log_transaction` VALUES ('117', 'PFCB-RVRV091750', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Bazic Penghapus Pensil');
INSERT INTO `log_transaction` VALUES ('118', 'PFCB-RVRV110640', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Bigen Semir Rambut 6gr');
INSERT INTO `log_transaction` VALUES ('119', 'PFCB-RVRV110640', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Bigen Semir Rambut 6gr');
INSERT INTO `log_transaction` VALUES ('120', 'PFCB-RVRV111453', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Binder No 200 Penjepit Kertas');
INSERT INTO `log_transaction` VALUES ('121', 'PFCB-RVRV112142', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Binder No 260 Penjepit Kertas');
INSERT INTO `log_transaction` VALUES ('122', 'PFCB-RVRV112337', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Bindex Ordner Kecil');
INSERT INTO `log_transaction` VALUES ('123', 'PFCB-RVRV112621', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Buku Kwitansi 40lbr');
INSERT INTO `log_transaction` VALUES ('124', 'PFCB-RVRV112621', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Buku Kwitansi 40lbr');
INSERT INTO `log_transaction` VALUES ('125', 'PFCB-RVRV113247', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Buku Kwitansi 50lbr');
INSERT INTO `log_transaction` VALUES ('126', 'PFCB-RVRV113349', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Casablanca Body Spray 65ml - Perfume');
INSERT INTO `log_transaction` VALUES ('127', 'PFCB-RVRV113644', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Casablanca Body Spray 65ml - Perfume Red');
INSERT INTO `log_transaction` VALUES ('128', 'PFCB-RVRV113804', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Casablanca Perfume Biru 65ml');
INSERT INTO `log_transaction` VALUES ('129', 'PFCB-RVRV113959', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Dream Donna Buku Gambar');
INSERT INTO `log_transaction` VALUES ('130', 'PFCB-RVRV114057', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Executive Notebook 38lbr');
INSERT INTO `log_transaction` VALUES ('131', 'PFCB-RVRV114222', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - Faber Castell Penghapus Pensil');
INSERT INTO `log_transaction` VALUES ('132', 'PFCB-RVRV114429', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Baterai Alkaline AAA');
INSERT INTO `log_transaction` VALUES ('133', 'PFCB-RVRV114632', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kecap Asin 140 ml - per botol');
INSERT INTO `log_transaction` VALUES ('134', 'PFCB-RVRV114728', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kecap Inggris 195 ml - per botol');
INSERT INTO `log_transaction` VALUES ('135', 'PFCB-RVRV114836', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kecap Manis - per 10 sachet');
INSERT INTO `log_transaction` VALUES ('136', 'PFCB-RVRV114944', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kecap Manis 100ml - per pouch');
INSERT INTO `log_transaction` VALUES ('137', 'PFCB-RVRV115113', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kecap Manis 140ml - per botol');
INSERT INTO `log_transaction` VALUES ('138', 'PFCB-RVRV115225', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kecap Manis 275ml - per botol');
INSERT INTO `log_transaction` VALUES ('139', 'PFCB-RVRV115319', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kecap Manis refil 600 ml - per pouch');
INSERT INTO `log_transaction` VALUES ('140', 'PFCB-RVRV115705', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kopi Mocca - per sachet');
INSERT INTO `log_transaction` VALUES ('141', 'PFCB-RVRV115839', 'Master Barang', 'admin', 'Input', '2015-07-15 00:00:00', 'Input Master Barang Baru - ABC Kopi Susu 32gr - kopi instan - per sachet');
INSERT INTO `log_transaction` VALUES ('142', 'PFCB-RWRV084000', 'Master Barang', 'admin', 'Input', '2015-07-16 00:00:00', 'Input Master Barang Baru - ABC Kopi Susu 32gr - kopi instan - per sachet');
INSERT INTO `log_transaction` VALUES ('143', 'PFCB-RWRV084324', 'Master Barang', 'admin', 'Input', '2015-07-16 00:00:00', 'Input Master Barang Baru - ABC Mie Soto Cup (Gelas) 60gr');
INSERT INTO `log_transaction` VALUES ('144', 'PFCB-RWRV084538', 'Master Barang', 'admin', 'Input', '2015-07-16 00:00:00', 'Input Master Barang Baru - ABC Minuman Asam Jawa 250ml - kemasan kotak');
INSERT INTO `log_transaction` VALUES ('145', 'FRM/RO/7-2015-00001', 'Request Order', 'admin', 'Input', '2015-07-21 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('146', 'FRM/RO/7-2015-00002', 'Request Order', 'admin', 'Input', '2015-07-21 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('147', 'FRM/RO/7-2015-00003', 'Request Order', 'admin', 'Input', '2015-07-21 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('148', 'FRM/RO/7-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-07-21 00:00:00', 'Approve Request OrderPFCB-RVRV113644');
INSERT INTO `log_transaction` VALUES ('149', 'FRM/RO/7-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-07-21 00:00:00', 'Approve Request OrderPFCB-RVRV110640');
INSERT INTO `log_transaction` VALUES ('150', 'FRM/RO/7-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-07-21 00:00:00', 'Approve Request OrderPFCB-RVRV112337');
INSERT INTO `log_transaction` VALUES ('151', 'FRM/RO/7-2015-00004', 'Request Order', 'admin', 'Input', '2015-07-21 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('152', 'FRM/RO/7-2015-00005', 'Request Order', 'admin', 'Input', '2015-07-21 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('153', 'FRM/RO/7-2015-00002', 'Request Order', 'Admin', 'Approve RO', '2015-07-21 00:00:00', 'Approve Request OrderPFCB-RVRV091158');
INSERT INTO `log_transaction` VALUES ('154', 'FRM/RO/7-2015-00002', 'Request Order', 'Admin', 'Approve RO', '2015-07-21 00:00:00', 'Approve Request OrderPFCB-RVRV091750');
INSERT INTO `log_transaction` VALUES ('155', 'FRM/RO/7-2015-00002', 'Request Order', 'Admin', 'Approve RO', '2015-07-21 00:00:00', 'Approve Request OrderPFCB-RVRV110640');
INSERT INTO `log_transaction` VALUES ('156', 'SUPP.000002', 'Master Supplier', 'admin', 'Input', '2015-07-21 00:00:00', 'Input Master Supplier Baru - CV Arum Jaya ');
INSERT INTO `log_transaction` VALUES ('157', 'FRM/PO/7-2015-00001', 'Purchase Order', 'admin', 'Input', '2015-07-21 00:00:00', 'Input Purchase Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('158', 'FRM/RO/7-2015-00006', 'Request Order', 'admin', 'Input', '2015-07-24 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('159', 'FRM/RO/7-2015-00007', 'Request Order', 'admin', 'Input', '2015-07-24 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('160', 'FRM/RO/7-2015-00003', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV111453');
INSERT INTO `log_transaction` VALUES ('161', 'FRM/RO/7-2015-00003', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV112142');
INSERT INTO `log_transaction` VALUES ('162', 'FRM/RO/7-2015-00004', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV112621');
INSERT INTO `log_transaction` VALUES ('163', 'FRM/RO/7-2015-00004', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV113247');
INSERT INTO `log_transaction` VALUES ('164', 'FRM/RO/7-2015-00004', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV113959');
INSERT INTO `log_transaction` VALUES ('165', 'FRM/RO/7-2015-00005', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV114632');
INSERT INTO `log_transaction` VALUES ('166', 'FRM/RO/7-2015-00005', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV114728');
INSERT INTO `log_transaction` VALUES ('167', 'FRM/RO/7-2015-00006', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV115705');
INSERT INTO `log_transaction` VALUES ('168', 'FRM/RO/7-2015-00006', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RVRV115839');
INSERT INTO `log_transaction` VALUES ('169', 'FRM/RO/7-2015-00006', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RWRV084000');
INSERT INTO `log_transaction` VALUES ('170', 'FRM/RO/7-2015-00006', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RWRV084324');
INSERT INTO `log_transaction` VALUES ('171', 'FRM/RO/7-2015-00007', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RWRV084324');
INSERT INTO `log_transaction` VALUES ('172', 'FRM/RO/7-2015-00007', 'Request Order', 'Admin', 'Approve RO', '2015-07-25 00:00:00', 'Approve Request OrderPFCB-RWRV084538');
INSERT INTO `log_transaction` VALUES ('173', 'FRM/PO/7-2015-00002', 'Purchase Order', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Purchase Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('174', 'FRM/PO/7-2015-00001', 'Purchase Order', 'admin', 'Hapus', '2015-07-21 00:00:00', 'Hapus Purchase Order - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('175', 'FRM/PO/7-2015-00001', 'Purchase Order', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Purchase Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('176', 'FRM/REV/7-2015-00001', 'Received Order', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Received Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('177', 'FRM/REV/7-2015-00002', 'Received Order', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Received Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('178', 'FRM/REV/7-2015-00003', 'Received Order', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Received Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('179', 'FRM/PU/8-2015-00001', 'Faktur Pembelian', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Faktur Beli Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('180', 'FRM/PO/7-2015-00001', 'Purchase Order', 'admin', 'Edit', '2015-07-25 00:00:00', 'Edit Purchase Order - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('181', 'CUST.000002', 'Master Customer', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('182', 'FRM/SO/8-2015-00001', 'Sales Order', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Sales Order Baru - CUST.000002');
INSERT INTO `log_transaction` VALUES ('183', 'FRM/DO/8-2015-00001', 'Surat Jalan', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Surat Jalan Baru - CUST.000002');
INSERT INTO `log_transaction` VALUES ('184', 'FRM/SA/8-2015-00001', 'Penjualan', 'admin', 'Input', '2015-07-25 00:00:00', 'Input Faktur Jual Baru - CUST.000002');
INSERT INTO `log_transaction` VALUES ('185', 'FRM/SO/8-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-07-25 00:00:00', 'Edit Sales Order - CUST.000002');
INSERT INTO `log_transaction` VALUES ('186', 'FRM/PO/7-2015-00003', 'Purchase Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Purchase Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('187', 'FRM/PO/7-2015-00004', 'Purchase Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Purchase Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('188', 'FRM/REV/7-2015-00004', 'Received Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Received Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('189', 'FRM/PU/8-2015-00002', 'Faktur Pembelian', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Faktur Beli Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('190', 'FRM/PO/7-2015-00002', 'Purchase Order', 'admin', 'Edit', '2015-07-25 00:00:00', 'Edit Purchase Order - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('191', 'FRM/PU/8-2015-00003', 'Faktur Pembelian', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Faktur Beli Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('192', 'FRM/PO/7-2015-00003', 'Purchase Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Purchase Order - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('193', 'FRM/PO/7-2015-00005', 'Purchase Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Purchase Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('194', 'FRM/PO/8-2015-00001', 'Purchase Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Purchase Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('195', 'FRM/PO/8-2015-00002', 'Purchase Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Purchase Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('196', 'PFCB-RVRV113959', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Dream Donna Buku Gambar');
INSERT INTO `log_transaction` VALUES ('197', 'PFCB-RVRV111453', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Binder No 200 Penjepit Kertas');
INSERT INTO `log_transaction` VALUES ('198', 'PFCB-RVRV091750', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Bazic Penghapus Pensil');
INSERT INTO `log_transaction` VALUES ('199', 'PFCB-RVRV110640', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Bigen Semir Rambut 6gr');
INSERT INTO `log_transaction` VALUES ('200', 'PFCB-SWRV063309', 'Master Barang', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Master Barang Baru - Item Coba');
INSERT INTO `log_transaction` VALUES ('201', 'PFCB-IKSWRV064409', 'Master Barang', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Master Barang Baru - Item Coba');
INSERT INTO `log_transaction` VALUES ('202', 'PFCB-SWRV063309', 'Master Item', 'admin', 'Hapus', '2015-07-26 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('203', 'PFCB-IKSWRV064409', 'Master Item', 'admin', 'Hapus', '2015-07-26 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('204', 'FRM/REV/8-2015-00001', 'Received Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Received Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('205', 'FRM/REV/8-2015-00002', 'Received Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Received Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('206', 'FRM/REV/8-2015-00003', 'Received Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Received Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('207', 'FRM/REV/8-2015-00004', 'Received Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Received Order Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('208', 'FRM/PU/8-2015-00004', 'Faktur Pembelian', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Faktur Beli Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('209', 'FRM/PO/7-2015-00004', 'Purchase Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Purchase Order - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('210', 'FRM/PU/8-2015-00005', 'Faktur Pembelian', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Faktur Beli Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('211', 'FRM/PO/7-2015-00005', 'Purchase Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Purchase Order - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('212', 'FRM/PU/9-2015-00001', 'Faktur Pembelian', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Faktur Beli Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('213', 'FRM/PO/8-2015-00001', 'Purchase Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Purchase Order - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('214', 'FRM/PU/9-2015-00002', 'Faktur Pembelian', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Faktur Beli Baru - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('215', 'FRM/PO/8-2015-00002', 'Purchase Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Purchase Order - SUPP.000001');
INSERT INTO `log_transaction` VALUES ('216', 'CUST.000003', 'Master Customer', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Master Customer Baru - Susanto Arifin');
INSERT INTO `log_transaction` VALUES ('217', 'CUST.000004', 'Master Customer', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Master Customer Baru - Surya Laksmana');
INSERT INTO `log_transaction` VALUES ('218', 'FRM/SO/8-2015-00002', 'Sales Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Sales Order Baru - CUST.000004');
INSERT INTO `log_transaction` VALUES ('219', 'FRM/SO/8-2015-00003', 'Sales Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Sales Order Baru - CUST.000003');
INSERT INTO `log_transaction` VALUES ('220', 'FRM/SO/8-2015-00004', 'Sales Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Sales Order Baru - CUST.000004');
INSERT INTO `log_transaction` VALUES ('221', 'FRM/SO/8-2015-00005', 'Sales Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('222', 'FRM/SO/7-2015-00001', 'Sales Order', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Sales Order Baru - CUST.000004');
INSERT INTO `log_transaction` VALUES ('223', 'SUPP.000003', 'Master Supplier', 'admin', 'Input', '2015-08-10 00:00:00', 'Input Master Supplier Baru - CV. Adisurya Makmur');
INSERT INTO `log_transaction` VALUES ('224', 'EMPY.000002', 'Master Pegawai', 'admin', 'Input', '2015-08-10 00:00:00', 'Input Master Pegawai Baru - Hendrik Santoso');
INSERT INTO `log_transaction` VALUES ('225', 'FRM/DO/09-2015-00001', 'Surat Jalan', 'admin', 'Input', '2015-09-12 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('226', 'FRM/RO/09-2015-00001', 'Request Order', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('227', 'FRM/RO/09-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-09-14 00:00:00', 'Approve Request OrderPFCB-RVRV110640');
INSERT INTO `log_transaction` VALUES ('228', 'FRM/RO/09-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-09-14 00:00:00', 'Approve Request OrderPFCB-RVRV113349');
INSERT INTO `log_transaction` VALUES ('229', 'FRM/RO/09-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-09-14 00:00:00', 'Approve Request OrderPFCB-RVRV113644');
INSERT INTO `log_transaction` VALUES ('230', 'FRM/RO/09-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-09-14 00:00:00', 'Approve Request OrderPFCB-RVRV113804');
INSERT INTO `log_transaction` VALUES ('231', 'FRM/RO/09-2015-00001', 'Request Order', 'Admin', 'Approve RO', '2015-09-14 00:00:00', 'Approve Request OrderPFCB-SSRV115509');
INSERT INTO `log_transaction` VALUES ('232', 'FRM/PO/09-2015-00001', 'Purchase Order', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Purchase Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('233', 'FRM/REV/09-2015-00001', 'Received Order', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Received Order Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('234', 'FRM/PU/09-2015-00003', 'Faktur Pembelian', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Faktur Beli Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('235', 'FRM/PO/09-2015-00001', 'Purchase Order', 'admin', 'Edit', '2015-09-14 00:00:00', 'Edit Purchase Order - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('236', 'FRM/PRU/09-2015-00001', 'Retur Pembelian', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Retur Beli Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('237', 'SUPP.000001', 'A/P Begining Balance', 'admin', 'Input', '2015-09-14 00:00:00', 'Input New A/P Begining Balance - INV/2014-01-000001');
INSERT INTO `log_transaction` VALUES ('238', 'SUPP.000001', 'Master Supplier', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Master Supplier - UD Jaya Lestari');
INSERT INTO `log_transaction` VALUES ('239', 'SUPP.000001', 'A/P Begining Balance', 'admin', 'Input', '2015-09-14 00:00:00', 'Input New A/P Begining Balance - INV/2015-01-000002');
INSERT INTO `log_transaction` VALUES ('240', 'SUPP.000001', 'Master Supplier', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Master Supplier - UD Jaya Lestari');
INSERT INTO `log_transaction` VALUES ('241', 'FRM/PAP/09-2015-00001', 'Pembayaran Pembelian', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Pembayaran Hutang Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('242', 'FRM/PAP/09-2015-00001', 'Pembayaran Pembelian', 'admin', 'Hapus', '2015-09-14 00:00:00', 'Hapus Pembayaran Pembelian - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('243', 'FRM/PAP/09-2015-00001', 'Pembayaran Pembelian', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Pembayaran Hutang Baru - SUPP.000002');
INSERT INTO `log_transaction` VALUES ('244', 'FRM/SO/09-2015-00001', 'Sales Order', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Sales Order Baru - CUST.000003');
INSERT INTO `log_transaction` VALUES ('245', 'FRM/DO/09-2015-00002', 'Surat Jalan', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Surat Jalan Baru - CUST.000003');
INSERT INTO `log_transaction` VALUES ('246', 'FRM/SA/09-2015-00001', 'Penjualan', 'admin', 'Input', '2015-09-14 00:00:00', 'Input Faktur Jual Baru - CUST.000003');
INSERT INTO `log_transaction` VALUES ('247', 'FRM/SO/09-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-09-14 00:00:00', 'Edit Sales Order - CUST.000003');
INSERT INTO `log_transaction` VALUES ('248', 'CUST.000002', 'A/R Begining Balance', 'admin', 'Input', '2015-09-15 00:00:00', 'Input New A/R Begining Balance - INV/AR/2015-01-00001');
INSERT INTO `log_transaction` VALUES ('249', 'CUST.000002', 'Master Customer', 'admin', 'Edit', '2015-07-25 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('250', 'FRM/PAR/09-2015-00001', 'Pembayaran Piutang', 'admin', 'Input', '2015-09-15 00:00:00', 'Input Pembayaran Piutang Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('251', 'FRM/RO/09-2015-00002', 'Request Order', 'admin', 'Input', '2015-09-16 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('252', 'FRM/RO/09-2015-00002', 'Request Order', 'Admin', 'Approve RO', '2015-09-16 00:00:00', 'Approve Request OrderPFCB-RVRV110640');
INSERT INTO `log_transaction` VALUES ('253', 'FRM/RO/09-2015-00002', 'Request Order', 'Admin', 'Approve RO', '2015-09-16 00:00:00', 'Approve Request OrderPFCB-RVRV113349');
INSERT INTO `log_transaction` VALUES ('254', 'FRM/RO/09-2015-00002', 'Request Order', 'Admin', 'Approve RO', '2015-09-16 00:00:00', 'Approve Request OrderPFCB-RVRV113644');
INSERT INTO `log_transaction` VALUES ('255', 'FRM/RO/09-2015-00002', 'Request Order', 'Admin', 'Approve RO', '2015-09-16 00:00:00', 'Approve Request OrderPFCB-RVRV113804');
INSERT INTO `log_transaction` VALUES ('256', 'FRM/PO/09-2015-00002', 'Purchase Order', 'admin', 'Input', '2015-09-16 00:00:00', 'Input Purchase Order Baru - SUPP.000003');
INSERT INTO `log_transaction` VALUES ('257', 'FRM/REV/09-2015-00002', 'Received Order', 'admin', 'Input', '2015-09-16 00:00:00', 'Input Received Order Baru - SUPP.000003');
INSERT INTO `log_transaction` VALUES ('258', 'FRM/PU/09-2015-00004', 'Faktur Pembelian', 'admin', 'Input', '2015-09-16 00:00:00', 'Input Faktur Beli Baru - SUPP.000003');
INSERT INTO `log_transaction` VALUES ('259', 'FRM/PO/09-2015-00002', 'Purchase Order', 'admin', 'Edit', '2015-09-16 00:00:00', 'Edit Purchase Order - SUPP.000003');
INSERT INTO `log_transaction` VALUES ('260', 'FRM/PAP/09-2015-00002', 'Pembayaran Pembelian', 'admin', 'Input', '2015-09-16 00:00:00', 'Input Pembayaran Hutang Baru - SUPP.000003');
INSERT INTO `log_transaction` VALUES ('261', 'BFERX0530', 'Master Service', 'admin', 'Input', '2015-09-17 00:00:00', 'Input Master Service Baru - bongkar pasang per');
INSERT INTO `log_transaction` VALUES ('262', 'PFCB-RVRV091158', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Ballpoint Standard');
INSERT INTO `log_transaction` VALUES ('263', 'PFCB-RVRV091750', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Bazic Penghapus Pensil');
INSERT INTO `log_transaction` VALUES ('264', 'PFCB-RVRV110640', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Bigen Semir Rambut 6gr');
INSERT INTO `log_transaction` VALUES ('265', 'PFCB-RVRV111453', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Binder No 200 Penjepit Kertas');
INSERT INTO `log_transaction` VALUES ('266', 'PFCB-RVRV112142', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Binder No 260 Penjepit Kertas');
INSERT INTO `log_transaction` VALUES ('267', 'PFCB-RVRV112337', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Bindex Ordner Kecil');
INSERT INTO `log_transaction` VALUES ('268', 'PFCB-RVRV112621', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Buku Kwitansi 40lbr');
INSERT INTO `log_transaction` VALUES ('269', 'PFCB-RVRV115839', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kopi Susu 32gr - kopi instan - per sachet');
INSERT INTO `log_transaction` VALUES ('270', 'PFCB-RVRV113247', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Buku Kwitansi 50lbr');
INSERT INTO `log_transaction` VALUES ('271', 'PFCB-RVRV113349', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Casablanca Body Spray 65ml - Perfume');
INSERT INTO `log_transaction` VALUES ('272', 'PFCB-RVRV113644', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Casablanca Body Spray 65ml - Perfume Red');
INSERT INTO `log_transaction` VALUES ('273', 'PFCB-RVRV113804', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Casablanca Perfume Biru 65ml');
INSERT INTO `log_transaction` VALUES ('274', 'PFCB-RVRV113959', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Dream Donna Buku Gambar');
INSERT INTO `log_transaction` VALUES ('275', 'PFCB-RVRV114057', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Executive Notebook 38lbr');
INSERT INTO `log_transaction` VALUES ('276', 'PFCB-RVRV114222', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Faber Castell Penghapus Pensil');
INSERT INTO `log_transaction` VALUES ('277', 'PFCB-RVRV114429', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Baterai Alkaline AAA');
INSERT INTO `log_transaction` VALUES ('278', 'PFCB-RVRV114632', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Asin 140 ml - per botol');
INSERT INTO `log_transaction` VALUES ('279', 'PFCB-RVRV114728', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Inggris 195 ml - per botol');
INSERT INTO `log_transaction` VALUES ('280', 'PFCB-RVRV114836', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis - per 10 sachet');
INSERT INTO `log_transaction` VALUES ('281', 'PFCB-RVRV114944', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis 100ml - per pouch');
INSERT INTO `log_transaction` VALUES ('282', 'PFCB-RVRV115113', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis 140ml - per botol');
INSERT INTO `log_transaction` VALUES ('283', 'PFCB-RVRV115225', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis 275ml - per botol');
INSERT INTO `log_transaction` VALUES ('284', 'PFCB-RVRV115319', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis refil 600 ml - per pouch');
INSERT INTO `log_transaction` VALUES ('285', 'PFCB-RVRV115705', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kopi Mocca - per sachet');
INSERT INTO `log_transaction` VALUES ('286', '0915000001', 'Master Barang', 'admin', 'Input', '2015-09-20 00:00:00', 'Input Master Barang Baru - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('287', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('288', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('289', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('290', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('291', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('292', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('293', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('294', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('295', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('296', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('297', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('298', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('299', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('300', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('301', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('302', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('303', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('304', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('305', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('306', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('307', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('308', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('309', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('310', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('311', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('312', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('313', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('314', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('315', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('316', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('317', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('318', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('319', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('320', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('321', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('322', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('323', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('324', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('325', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('326', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('327', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('328', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('329', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('330', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('331', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('332', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('333', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('334', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('335', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('336', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('337', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('338', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('339', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('340', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('341', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('342', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('343', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('344', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('345', 'FRM/JU/4-2015-00001', 'Jurnal Umum', 'admin', 'Hapus', '2015-04-10 00:00:00', 'Hapus Jurnal Umum - FRM/JU/4-2015-00001');
INSERT INTO `log_transaction` VALUES ('346', 'FRM/RCM/09-2015-00001', 'Kas BankKM', 'admin', 'Input', '2015-09-27 00:00:00', 'Input Transaksi Kas Bank Baru - 1-1101');
INSERT INTO `log_transaction` VALUES ('347', 'FRM/RCM/09-2015-00001', 'Kas BankKM', 'admin', 'Hapus', '2015-09-27 00:00:00', 'Hapus Transaksi Kas Bank - 1-1101');
INSERT INTO `log_transaction` VALUES ('348', 'FRM/RCM/09-2015-00001', 'Kas BankKM', 'admin', 'Input', '2015-09-27 00:00:00', 'Input Transaksi Kas Bank Baru - 1-1101');
INSERT INTO `log_transaction` VALUES ('349', 'FRM/SPM/09-2015-00001', 'Kas BankBK', 'admin', 'Input', '2015-09-27 00:00:00', 'Input Transaksi Kas Bank Baru - 1-1104');
INSERT INTO `log_transaction` VALUES ('350', 'FRM/REC/09-2015-00001', 'Rekonsiliasi Bank', 'admin', 'Input', '2015-09-27 00:00:00', 'Input Rekonsiliasi Bank Baru - 1-1104');
INSERT INTO `log_transaction` VALUES ('351', 'FRM/REC/09-2015-00001', 'Rekonsiliasi Bank', 'admin', 'Hapus', '2015-09-27 00:00:00', 'Hapus Rekonsiliasi Bank - 1-1104');
INSERT INTO `log_transaction` VALUES ('352', 'FRM/REC/09-2015-00001', 'Rekonsiliasi Bank', 'admin', 'Input', '2015-09-27 00:00:00', 'Input Rekonsiliasi Bank Baru - 1-1104');
INSERT INTO `log_transaction` VALUES ('353', '0915000002', 'Master Barang', 'admin', 'Input', '2015-09-28 00:00:00', 'Input Master Barang Baru - Item Coba');
INSERT INTO `log_transaction` VALUES ('354', '0915000002', 'Master Item', 'admin', 'Hapus', '2015-09-28 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('355', '0915000003', 'Master Barang', 'admin', 'Input', '2015-09-28 00:00:00', 'Input Master Barang Baru - Item Coba');
INSERT INTO `log_transaction` VALUES ('356', '0915000003', 'Master Item', 'admin', 'Hapus', '2015-09-28 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('357', '0915000003', 'Master Barang', 'admin', 'Input', '2015-09-28 00:00:00', 'Input Master Barang Baru - Item Coba');
INSERT INTO `log_transaction` VALUES ('358', '0915000005', 'Master Barang', 'admin', 'Input', '2015-09-28 00:00:00', 'Input Master Barang Baru - Item Coba 2');
INSERT INTO `log_transaction` VALUES ('359', '0915000006', 'Master Barang', 'admin', 'Input', '2015-09-28 00:00:00', 'Input Master Barang Baru - Item Coba 3');
INSERT INTO `log_transaction` VALUES ('360', '0915000003', 'Master Item', 'admin', 'Hapus', '2015-09-28 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('361', '0915000005', 'Master Item', 'admin', 'Hapus', '2015-09-28 00:00:00', 'Edit Master Item - Item Coba 2');
INSERT INTO `log_transaction` VALUES ('362', '0915000002', 'Master Barang', 'admin', 'Input', '2015-09-28 00:00:00', 'Input Master Barang Baru - Item Coba');
INSERT INTO `log_transaction` VALUES ('363', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('364', '0915000006', 'Master Item', 'admin', 'Hapus', '2015-09-28 00:00:00', 'Edit Master Item - Item Coba 3');
INSERT INTO `log_transaction` VALUES ('365', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('366', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('367', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('368', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('369', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('370', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('371', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('372', 'PFCB-RVRV113959', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Dream Donna Buku Gambar');
INSERT INTO `log_transaction` VALUES ('373', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('374', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('375', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('376', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('377', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('378', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('379', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('380', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('381', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('382', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('383', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('384', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('385', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('386', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('387', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('388', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('389', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('390', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('391', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('392', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('393', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('394', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('395', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('396', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('397', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('398', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('399', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('400', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('401', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('402', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('403', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('404', 'FRM/SO/09-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-09-14 00:00:00', 'Edit Sales Order - CUST.000003');
INSERT INTO `log_transaction` VALUES ('405', 'FRM/SO/4-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('406', 'FRM/SO/4-2015-00002', 'Sales Order', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('407', 'FRM/SO/7-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000004');
INSERT INTO `log_transaction` VALUES ('408', 'FRM/SO/8-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-07-25 00:00:00', 'Edit Sales Order - CUST.000002');
INSERT INTO `log_transaction` VALUES ('409', 'FRM/SO/8-2015-00002', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000004');
INSERT INTO `log_transaction` VALUES ('410', 'FRM/SO/8-2015-00003', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000003');
INSERT INTO `log_transaction` VALUES ('411', 'FRM/SO/8-2015-00004', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000004');
INSERT INTO `log_transaction` VALUES ('412', 'FRM/SO/8-2015-00005', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('413', 'FRM/SO/09-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-09-14 00:00:00', 'Edit Sales Order - CUST.000003');
INSERT INTO `log_transaction` VALUES ('414', 'FRM/SO/4-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('415', 'FRM/SO/4-2015-00002', 'Sales Order', 'admin', 'Edit', '2015-04-10 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('416', 'FRM/SO/7-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000004');
INSERT INTO `log_transaction` VALUES ('417', 'FRM/SO/8-2015-00001', 'Sales Order', 'admin', 'Edit', '2015-07-25 00:00:00', 'Edit Sales Order - CUST.000002');
INSERT INTO `log_transaction` VALUES ('418', 'FRM/SO/8-2015-00002', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000004');
INSERT INTO `log_transaction` VALUES ('419', 'FRM/SO/8-2015-00003', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000003');
INSERT INTO `log_transaction` VALUES ('420', 'FRM/SO/8-2015-00004', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000004');
INSERT INTO `log_transaction` VALUES ('421', 'FRM/SO/8-2015-00005', 'Sales Order', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('422', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('423', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('424', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('425', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('426', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('427', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('428', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('429', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('430', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('431', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('432', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('433', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('434', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('435', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('436', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('437', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('438', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('439', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('440', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('441', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('442', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('443', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('444', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('445', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('446', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('447', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('448', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('449', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('450', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('451', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('452', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('453', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('454', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('455', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('456', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('457', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('458', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('459', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('460', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('461', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('462', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('463', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('464', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('465', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('466', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('467', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('468', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('469', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('470', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('471', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('472', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('473', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('474', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('475', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('476', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('477', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('478', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('479', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('480', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('481', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('482', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Input', '2015-09-29 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('483', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Hapus', '2015-09-29 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('484', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Input', '2015-09-29 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('485', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Hapus', '2015-09-29 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('486', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Input', '2015-09-29 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('487', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Hapus', '2015-09-29 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('488', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('489', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('490', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('491', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('492', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('493', 'PFCB-RWRV084000', 'Master Item', 'admin', 'Edit', '2015-07-16 00:00:00', 'Edit Master Item - ABC Kopi Susu 32gr - kopi instan - per sachet');
INSERT INTO `log_transaction` VALUES ('494', 'PFCB-RWRV084324', 'Master Item', 'admin', 'Edit', '2015-07-16 00:00:00', 'Edit Master Item - ABC Mie Soto Cup (Gelas) 60gr');
INSERT INTO `log_transaction` VALUES ('495', 'PFCB-RWRV084538', 'Master Item', 'admin', 'Edit', '2015-07-16 00:00:00', 'Edit Master Item - ABC Minuman Asam Jawa 250ml - kemasan kotak');
INSERT INTO `log_transaction` VALUES ('496', 'PFCB-SSRV115509', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Axe Deodorant Nelu 150ml Pewangi Tubuh');
INSERT INTO `log_transaction` VALUES ('497', 'FRM/SO/09-2015-00002', 'Sales Order', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('498', 'FRM/SO/09-2015-00003', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('499', 'FRM/SO/09-2015-00003', 'Sales Order', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('500', 'FRM/SO/09-2015-00003', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('501', 'FRM/SO/09-2015-00003', 'Sales Order', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('502', 'FRM/SO/09-2015-00003', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('503', 'FRM/SO/09-2015-00003', 'Sales Order', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('504', 'FRM/SO/09-2015-00004', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('505', 'FRM/SO/09-2015-00004', 'Sales Order', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('506', 'FRM/SO/09-2015-00004', 'Sales Order', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Sales Order Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('507', '0915000001', 'Master Item', 'admin', 'Edit', '2015-09-20 00:00:00', 'Edit Master Item - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('508', '0915000002', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Item Coba');
INSERT INTO `log_transaction` VALUES ('509', 'PFCB-RVRV091158', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Ballpoint Standard');
INSERT INTO `log_transaction` VALUES ('510', 'PFCB-RVRV091750', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Bazic Penghapus Pensil');
INSERT INTO `log_transaction` VALUES ('511', 'PFCB-RVRV111453', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Binder No 200 Penjepit Kertas');
INSERT INTO `log_transaction` VALUES ('512', 'PFCB-RVRV110640', 'Master Item', 'admin', 'Edit', '2015-07-26 00:00:00', 'Edit Master Item - Bigen Semir Rambut 6gr');
INSERT INTO `log_transaction` VALUES ('513', 'PFCB-RVRV112142', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Binder No 260 Penjepit Kertas');
INSERT INTO `log_transaction` VALUES ('514', 'PFCB-RVRV112337', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Bindex Ordner Kecil');
INSERT INTO `log_transaction` VALUES ('515', 'PFCB-RVRV112621', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Buku Kwitansi 40lbr');
INSERT INTO `log_transaction` VALUES ('516', 'PFCB-RVRV113247', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Buku Kwitansi 50lbr');
INSERT INTO `log_transaction` VALUES ('517', 'PFCB-RVRV113349', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Casablanca Body Spray 65ml - Perfume');
INSERT INTO `log_transaction` VALUES ('518', 'PFCB-RVRV113644', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Casablanca Body Spray 65ml - Perfume Red');
INSERT INTO `log_transaction` VALUES ('519', 'PFCB-RVRV113804', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Casablanca Perfume Biru 65ml');
INSERT INTO `log_transaction` VALUES ('520', 'PFCB-RVRV113959', 'Master Item', 'admin', 'Edit', '2015-09-29 00:00:00', 'Edit Master Item - Dream Donna Buku Gambar');
INSERT INTO `log_transaction` VALUES ('521', 'PFCB-RVRV114057', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Executive Notebook 38lbr');
INSERT INTO `log_transaction` VALUES ('522', 'PFCB-RVRV114222', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Faber Castell Penghapus Pensil');
INSERT INTO `log_transaction` VALUES ('523', 'PFCB-RVRV114429', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Baterai Alkaline AAA');
INSERT INTO `log_transaction` VALUES ('524', 'PFCB-RVRV114632', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Asin 140 ml - per botol');
INSERT INTO `log_transaction` VALUES ('525', 'PFCB-RVRV114728', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Inggris 195 ml - per botol');
INSERT INTO `log_transaction` VALUES ('526', 'PFCB-RVRV114836', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis - per 10 sachet');
INSERT INTO `log_transaction` VALUES ('527', 'PFCB-RVRV114944', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis 100ml - per pouch');
INSERT INTO `log_transaction` VALUES ('528', 'PFCB-RVRV115113', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis 140ml - per botol');
INSERT INTO `log_transaction` VALUES ('529', 'PFCB-RVRV115225', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis 275ml - per botol');
INSERT INTO `log_transaction` VALUES ('530', 'PFCB-RVRV115319', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kecap Manis refil 600 ml - per pouch');
INSERT INTO `log_transaction` VALUES ('531', 'PFCB-RVRV115705', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kopi Mocca - per sachet');
INSERT INTO `log_transaction` VALUES ('532', 'PFCB-RVRV115839', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - ABC Kopi Susu 32gr - kopi instan - per sachet');
INSERT INTO `log_transaction` VALUES ('533', 'PFCB-RWRV084000', 'Master Item', 'admin', 'Edit', '2015-07-16 00:00:00', 'Edit Master Item - ABC Kopi Susu 32gr - kopi instan - per sachet');
INSERT INTO `log_transaction` VALUES ('534', 'PFCB-RWRV084324', 'Master Item', 'admin', 'Edit', '2015-07-16 00:00:00', 'Edit Master Item - ABC Mie Soto Cup (Gelas) 60gr');
INSERT INTO `log_transaction` VALUES ('535', 'PFCB-RWRV084538', 'Master Item', 'admin', 'Edit', '2015-07-16 00:00:00', 'Edit Master Item - ABC Minuman Asam Jawa 250ml - kemasan kotak');
INSERT INTO `log_transaction` VALUES ('536', 'PFCB-SSRV115509', 'Master Item', 'admin', 'Edit', '2015-07-15 00:00:00', 'Edit Master Item - Axe Deodorant Nelu 150ml Pewangi Tubuh');
INSERT INTO `log_transaction` VALUES ('537', '0915000003', 'Master Barang', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Master Barang Baru - Item Coba 2');
INSERT INTO `log_transaction` VALUES ('538', '0915000003', 'Master Item', 'admin', 'Edit', '2015-09-30 00:00:00', 'Edit Master Item - Item Coba 2');
INSERT INTO `log_transaction` VALUES ('539', '0915000003', 'Master Item', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Edit Master Item - Item Coba 2');
INSERT INTO `log_transaction` VALUES ('540', 'FRM/DO/09-2015-00003', 'Surat Jalan', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('541', 'FRM/DO/09-2015-00003', 'Surat Jalan', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Surat Jalan - CUST.000001');
INSERT INTO `log_transaction` VALUES ('542', 'FRM/DO/09-2015-00003', 'Surat Jalan', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('543', 'FRM/DO/09-2015-00003', 'Surat Jalan', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Surat Jalan - CUST.000001');
INSERT INTO `log_transaction` VALUES ('544', 'FRM/DO/09-2015-00004', 'Surat Jalan', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('545', 'FRM/DO/09-2015-00004', 'Surat Jalan', 'admin', 'Hapus', '2015-09-30 00:00:00', 'Hapus Surat Jalan - CUST.000001');
INSERT INTO `log_transaction` VALUES ('546', 'FRM/DO/09-2015-00004', 'Surat Jalan', 'admin', 'Input', '2015-09-30 00:00:00', 'Input Surat Jalan Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('547', 'FRM/SA/10-2015-00001', 'Penjualan', 'admin', 'Input', '2015-10-01 00:00:00', 'Input Faktur Jual Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('548', 'FRM/SO/09-2015-00004', 'Sales Order', 'admin', 'Edit', '2015-09-30 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('549', 'FRM/SA/10-2015-00001', 'Penjualan', 'admin', 'Hapus', '2015-10-01 00:00:00', 'Hapus Faktur Jual - CUST.000001');
INSERT INTO `log_transaction` VALUES ('550', 'FRM/SO/09-2015-00004', 'Sales Order', 'admin', 'Edit', '2015-09-30 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('551', 'FRM/SA/10-2015-00002', 'Penjualan', 'admin', 'Input', '2015-10-01 00:00:00', 'Input Faktur Jual Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('552', 'FRM/SO/09-2015-00004', 'Sales Order', 'admin', 'Edit', '2015-09-30 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('553', 'FRM/SA/10-2015-00002', 'Penjualan', 'admin', 'Hapus', '2015-10-01 00:00:00', 'Hapus Faktur Jual - CUST.000001');
INSERT INTO `log_transaction` VALUES ('554', 'FRM/SA/10-2015-00002', 'Penjualan', 'admin', 'Input', '2015-10-01 00:00:00', 'Input Faktur Jual Baru - CUST.000001');
INSERT INTO `log_transaction` VALUES ('555', 'FRM/SO/09-2015-00004', 'Sales Order', 'admin', 'Edit', '2015-09-30 00:00:00', 'Edit Sales Order - CUST.000001');
INSERT INTO `log_transaction` VALUES ('556', 'FRM/RO/10-2015-00001', 'Request Order', 'admin', 'Input', '2015-10-01 00:00:00', 'Input Request Order Baru - WH001');
INSERT INTO `log_transaction` VALUES ('557', 'E.2015000003', 'Master Pegawai', 'admin', 'Input', '2015-10-02 00:00:00', 'Input Master Pegawai Baru - Demo ');
INSERT INTO `log_transaction` VALUES ('558', 'AST1015000002', 'Master Aset', 'admin', 'Input', '2015-10-13 00:00:00', 'Input Master Aset - Komputer staf Akuntansi 2');
INSERT INTO `log_transaction` VALUES ('559', 'AST1015000001', 'Master Aset', 'admin', 'Edit', '2015-10-12 00:00:00', 'Edit Master Aset - Komputer Staf Akuntansi 1');
INSERT INTO `log_transaction` VALUES ('560', 'AST1015000002', 'Master Aset', 'admin', 'Edit', '2015-10-13 00:00:00', 'Edit Master Aset - Komputer staf Akuntansi 2');
INSERT INTO `log_transaction` VALUES ('561', 'AST1015000003', 'Master Aset', 'admin', 'Input', '2015-10-13 00:00:00', 'Input Master Aset - Komputer Gudang Meja 3');
INSERT INTO `log_transaction` VALUES ('562', '1-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Assets');
INSERT INTO `log_transaction` VALUES ('563', '1-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Current Assets');
INSERT INTO `log_transaction` VALUES ('564', '1-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Cash/Bank');
INSERT INTO `log_transaction` VALUES ('565', '1-1101', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Main Cash');
INSERT INTO `log_transaction` VALUES ('566', '1-1102', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Petty Cash');
INSERT INTO `log_transaction` VALUES ('567', '1-1103', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Mandiri Bank');
INSERT INTO `log_transaction` VALUES ('568', '1-1104', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - BCA Bank');
INSERT INTO `log_transaction` VALUES ('569', '1-1105', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - BNI Bank');
INSERT INTO `log_transaction` VALUES ('570', '1-1199', 'Chart Of Account', 'admin', 'Edit', '2015-01-07 00:00:00', 'Edit Account - Cashier Cash');
INSERT INTO `log_transaction` VALUES ('571', '1-1200', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Inventory');
INSERT INTO `log_transaction` VALUES ('572', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('573', '1-1299', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Miscellanous Inventory');
INSERT INTO `log_transaction` VALUES ('574', '1-1300', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Trade Bill');
INSERT INTO `log_transaction` VALUES ('575', '1-1301', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Account Receivables');
INSERT INTO `log_transaction` VALUES ('576', '1-1400', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prepaid Expenses');
INSERT INTO `log_transaction` VALUES ('577', '1-1401', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Consultant Payment');
INSERT INTO `log_transaction` VALUES ('578', '1-1499', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Others Prepaid');
INSERT INTO `log_transaction` VALUES ('579', '1-1500', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prepaid VAT');
INSERT INTO `log_transaction` VALUES ('580', '1-1501', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - VAT IN');
INSERT INTO `log_transaction` VALUES ('581', '1-1599', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prepaid Other Tax');
INSERT INTO `log_transaction` VALUES ('582', '1-2000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Fixed Assets');
INSERT INTO `log_transaction` VALUES ('583', '1-2100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Land & Building');
INSERT INTO `log_transaction` VALUES ('584', '1-2101', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Land');
INSERT INTO `log_transaction` VALUES ('585', '1-2102', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Building');
INSERT INTO `log_transaction` VALUES ('586', '1-2103', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Building Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('587', '1-2104', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Office Equipment');
INSERT INTO `log_transaction` VALUES ('588', '1-2105', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Office Equip Accumulated Depr');
INSERT INTO `log_transaction` VALUES ('589', '1-2106', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Vehicles');
INSERT INTO `log_transaction` VALUES ('590', '1-2107', 'Chart Of Account', 'admin', 'Edit', '2014-12-31 00:00:00', 'Edit Account - Vehicles Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('591', '1-2198', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other Fixed Assets');
INSERT INTO `log_transaction` VALUES ('592', '1-2199', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other FA Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('593', '2-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Liabilities');
INSERT INTO `log_transaction` VALUES ('594', '2-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Short Term Liabilities');
INSERT INTO `log_transaction` VALUES ('595', '2-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Trade Payable');
INSERT INTO `log_transaction` VALUES ('596', '2-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Account Payable');
INSERT INTO `log_transaction` VALUES ('597', '2-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - VAT OUT');
INSERT INTO `log_transaction` VALUES ('598', '2-1200', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Bank Payable');
INSERT INTO `log_transaction` VALUES ('599', '2-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Liabilities');
INSERT INTO `log_transaction` VALUES ('600', '2-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Short Term Liabilities');
INSERT INTO `log_transaction` VALUES ('601', '2-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Trade Payable');
INSERT INTO `log_transaction` VALUES ('602', '2-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Account Payable');
INSERT INTO `log_transaction` VALUES ('603', '2-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - VAT OUT');
INSERT INTO `log_transaction` VALUES ('604', '2-1200', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Bank Payable');
INSERT INTO `log_transaction` VALUES ('605', '2-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - BCA Payable');
INSERT INTO `log_transaction` VALUES ('606', '2-2000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Long Term Liabilities');
INSERT INTO `log_transaction` VALUES ('607', '2-2100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Bank Payable');
INSERT INTO `log_transaction` VALUES ('608', '2-2101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - BCA Payable');
INSERT INTO `log_transaction` VALUES ('609', '3-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Capital');
INSERT INTO `log_transaction` VALUES ('610', '3-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Authorized Capital');
INSERT INTO `log_transaction` VALUES ('611', '3-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Owners Capital');
INSERT INTO `log_transaction` VALUES ('612', '3-1101', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Paid-Up Capital');
INSERT INTO `log_transaction` VALUES ('613', '3-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prive');
INSERT INTO `log_transaction` VALUES ('614', '3-1199', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Profit-Loss Summary');
INSERT INTO `log_transaction` VALUES ('615', '4-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Income');
INSERT INTO `log_transaction` VALUES ('616', '4-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Operational Income');
INSERT INTO `log_transaction` VALUES ('617', '4-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Sales');
INSERT INTO `log_transaction` VALUES ('618', '4-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Product Sales');
INSERT INTO `log_transaction` VALUES ('619', '4-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Purchase Discount');
INSERT INTO `log_transaction` VALUES ('620', '3-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Capital');
INSERT INTO `log_transaction` VALUES ('621', '3-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Authorized Capital');
INSERT INTO `log_transaction` VALUES ('622', '3-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Owners Capital');
INSERT INTO `log_transaction` VALUES ('623', '3-1101', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Paid-Up Capital');
INSERT INTO `log_transaction` VALUES ('624', '3-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prive');
INSERT INTO `log_transaction` VALUES ('625', '3-1199', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Profit-Loss Summary');
INSERT INTO `log_transaction` VALUES ('626', '4-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Income');
INSERT INTO `log_transaction` VALUES ('627', '4-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Operational Income');
INSERT INTO `log_transaction` VALUES ('628', '4-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Sales');
INSERT INTO `log_transaction` VALUES ('629', '4-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Product Sales');
INSERT INTO `log_transaction` VALUES ('630', '4-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Purchase Discount');
INSERT INTO `log_transaction` VALUES ('631', '4-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Income');
INSERT INTO `log_transaction` VALUES ('632', '4-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Operational Income');
INSERT INTO `log_transaction` VALUES ('633', '4-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Sales');
INSERT INTO `log_transaction` VALUES ('634', '4-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Product Sales');
INSERT INTO `log_transaction` VALUES ('635', '4-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Purchase Discount');
INSERT INTO `log_transaction` VALUES ('636', '1-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Assets');
INSERT INTO `log_transaction` VALUES ('637', '1-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Current Assets');
INSERT INTO `log_transaction` VALUES ('638', '1-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Cash/Bank');
INSERT INTO `log_transaction` VALUES ('639', '1-1101', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Main Cash');
INSERT INTO `log_transaction` VALUES ('640', '1-1102', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Petty Cash');
INSERT INTO `log_transaction` VALUES ('641', '1-1103', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Mandiri Bank');
INSERT INTO `log_transaction` VALUES ('642', '1-1104', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - BCA Bank');
INSERT INTO `log_transaction` VALUES ('643', '1-1105', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - BNI Bank');
INSERT INTO `log_transaction` VALUES ('644', '1-1199', 'Chart Of Account', 'admin', 'Edit', '2015-01-07 00:00:00', 'Edit Account - Cashier Cash');
INSERT INTO `log_transaction` VALUES ('645', '1-1200', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Inventory');
INSERT INTO `log_transaction` VALUES ('646', '1-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory');
INSERT INTO `log_transaction` VALUES ('647', '1-1299', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Miscellanous Inventory');
INSERT INTO `log_transaction` VALUES ('648', '1-1300', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Trade Bill');
INSERT INTO `log_transaction` VALUES ('649', '1-1301', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Account Receivables');
INSERT INTO `log_transaction` VALUES ('650', '1-1400', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prepaid Expenses');
INSERT INTO `log_transaction` VALUES ('651', '1-1401', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Consultant Payment');
INSERT INTO `log_transaction` VALUES ('652', '1-1499', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Others Prepaid');
INSERT INTO `log_transaction` VALUES ('653', '1-1500', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prepaid VAT');
INSERT INTO `log_transaction` VALUES ('654', '1-1501', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - VAT IN');
INSERT INTO `log_transaction` VALUES ('655', '1-1599', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prepaid Other Tax');
INSERT INTO `log_transaction` VALUES ('656', '1-2000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Fixed Assets');
INSERT INTO `log_transaction` VALUES ('657', '1-2100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Land & Building');
INSERT INTO `log_transaction` VALUES ('658', '1-2101', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Land');
INSERT INTO `log_transaction` VALUES ('659', '1-2102', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Building');
INSERT INTO `log_transaction` VALUES ('660', '1-2103', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Building Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('661', '1-2104', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Office Equipment');
INSERT INTO `log_transaction` VALUES ('662', '1-2105', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Office Equip Accumulated Depr');
INSERT INTO `log_transaction` VALUES ('663', '1-2106', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Vehicles');
INSERT INTO `log_transaction` VALUES ('664', '1-2107', 'Chart Of Account', 'admin', 'Edit', '2014-12-31 00:00:00', 'Edit Account - Vehicles Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('665', '1-2198', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other Fixed Assets');
INSERT INTO `log_transaction` VALUES ('666', '1-2199', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other FA Accumulated Depreciation');
INSERT INTO `log_transaction` VALUES ('667', '2-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Liabilities');
INSERT INTO `log_transaction` VALUES ('668', '2-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Short Term Liabilities');
INSERT INTO `log_transaction` VALUES ('669', '2-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Trade Payable');
INSERT INTO `log_transaction` VALUES ('670', '2-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Account Payable');
INSERT INTO `log_transaction` VALUES ('671', '2-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - VAT OUT');
INSERT INTO `log_transaction` VALUES ('672', '2-1200', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Bank Payable');
INSERT INTO `log_transaction` VALUES ('673', '2-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - BCA Payable');
INSERT INTO `log_transaction` VALUES ('674', '2-2000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Long Term Liabilities');
INSERT INTO `log_transaction` VALUES ('675', '2-2100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Bank Payable');
INSERT INTO `log_transaction` VALUES ('676', '2-2101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - BCA Payable');
INSERT INTO `log_transaction` VALUES ('677', '3-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Capital');
INSERT INTO `log_transaction` VALUES ('678', '3-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Authorized Capital');
INSERT INTO `log_transaction` VALUES ('679', '3-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Owners Capital');
INSERT INTO `log_transaction` VALUES ('680', '3-1101', 'Chart Of Account', 'admin', 'Edit', '2014-12-30 00:00:00', 'Edit Account - Paid-Up Capital');
INSERT INTO `log_transaction` VALUES ('681', '3-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Prive');
INSERT INTO `log_transaction` VALUES ('682', '3-1199', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Profit-Loss Summary');
INSERT INTO `log_transaction` VALUES ('683', '4-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Income');
INSERT INTO `log_transaction` VALUES ('684', '4-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Operational Income');
INSERT INTO `log_transaction` VALUES ('685', '4-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Sales');
INSERT INTO `log_transaction` VALUES ('686', '4-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Product Sales');
INSERT INTO `log_transaction` VALUES ('687', '4-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Purchase Discount');
INSERT INTO `log_transaction` VALUES ('688', '4-1103', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Sales Discount');
INSERT INTO `log_transaction` VALUES ('689', '4-1104', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Account Payable Payment Disc');
INSERT INTO `log_transaction` VALUES ('690', '4-1105', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Account Receivable Payment Disc');
INSERT INTO `log_transaction` VALUES ('691', '4-1200', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Operational Revenues');
INSERT INTO `log_transaction` VALUES ('692', '4-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Service Revenues');
INSERT INTO `log_transaction` VALUES ('693', '4-1202', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Service Revenues Discount');
INSERT INTO `log_transaction` VALUES ('694', '4-1203', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other Revenues');
INSERT INTO `log_transaction` VALUES ('695', '4-2000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Non Operational Income');
INSERT INTO `log_transaction` VALUES ('696', '4-2100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Non Operational Revenues');
INSERT INTO `log_transaction` VALUES ('697', '4-2101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Bank Interest Revenues');
INSERT INTO `log_transaction` VALUES ('698', '4-2102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Exchange Rate Revenue');
INSERT INTO `log_transaction` VALUES ('699', '5-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Cost Of Goods');
INSERT INTO `log_transaction` VALUES ('700', '5-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Cost Of Goods Sold');
INSERT INTO `log_transaction` VALUES ('701', '5-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Inventory COGS');
INSERT INTO `log_transaction` VALUES ('702', '5-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Merchandise Inventory COGS');
INSERT INTO `log_transaction` VALUES ('703', '5-1199', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other Inventory COGS');
INSERT INTO `log_transaction` VALUES ('704', '6-0000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Expenses');
INSERT INTO `log_transaction` VALUES ('705', '6-1000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Operational Expenses');
INSERT INTO `log_transaction` VALUES ('706', '6-1100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Adm & GA Expenses');
INSERT INTO `log_transaction` VALUES ('707', '6-1101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Electricity, Phone & Water Expense');
INSERT INTO `log_transaction` VALUES ('708', '6-1102', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Office Supplies Expense');
INSERT INTO `log_transaction` VALUES ('709', '6-1103', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Tax Expense');
INSERT INTO `log_transaction` VALUES ('710', '6-1104', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Building Depreciation Expense');
INSERT INTO `log_transaction` VALUES ('711', '6-1105', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Vehicles Depreciation Expense');
INSERT INTO `log_transaction` VALUES ('712', '6-1106', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Equipment Depreciation Expense');
INSERT INTO `log_transaction` VALUES ('713', '6-1107', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Freight');
INSERT INTO `log_transaction` VALUES ('714', '6-1199', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other Adm & GA Expense');
INSERT INTO `log_transaction` VALUES ('715', '6-1200', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Sales & Marketing Expense');
INSERT INTO `log_transaction` VALUES ('716', '6-1201', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Advertising & Promotion Expense');
INSERT INTO `log_transaction` VALUES ('717', '6-1202', 'Chart Of Account', 'admin', 'Edit', '2014-06-11 00:00:00', 'Edit Account - Commission Expense');
INSERT INTO `log_transaction` VALUES ('718', '6-1299', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Other Marketing Expense');
INSERT INTO `log_transaction` VALUES ('719', '6-2000', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Non Operational Expense');
INSERT INTO `log_transaction` VALUES ('720', '6-2100', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Non Operational Cost');
INSERT INTO `log_transaction` VALUES ('721', '6-2101', 'Chart Of Account', 'Admin', 'Edit', '2014-01-01 00:00:00', 'Edit Account - Exchange Rate Expense');
INSERT INTO `log_transaction` VALUES ('722', 'FRM/JU/4-2015-00001', 'Jurnal Umum', 'admin', 'Hapus', '2015-04-10 00:00:00', 'Hapus Jurnal Umum - FRM/JU/4-2015-00001');
INSERT INTO `log_transaction` VALUES ('723', 'ADJ/10-2015-00001', 'Jurnal Umum', 'admin', 'Input', '2015-10-14 00:00:00', 'Input Jurnal Umum Baru - ADJ/10-2015-00001');
INSERT INTO `log_transaction` VALUES ('724', 'AST1015000001', 'Master Aset', 'admin', 'Edit', '2015-10-12 00:00:00', 'Edit Master Aset - Komputer Staf Akuntansi 1');
INSERT INTO `log_transaction` VALUES ('725', 'AST1015000002', 'Master Aset', 'admin', 'Edit', '2015-10-13 00:00:00', 'Edit Master Aset - Komputer staf Akuntansi 2');
INSERT INTO `log_transaction` VALUES ('726', 'AST1015000003', 'Master Aset', 'admin', 'Edit', '2015-10-13 00:00:00', 'Edit Master Aset - Komputer Gudang Meja 3');
INSERT INTO `log_transaction` VALUES ('727', 'E.2015000003', 'Master Pegawai', 'admin', 'Edit', '2015-10-02 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('728', 'E.2015000003', 'Master Pegawai', 'admin', 'Edit', '2015-10-02 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('729', 'E.2015000003', 'Master Pegawai', 'admin', 'Edit', '2015-10-02 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('730', 'E.2015000003', 'Master Pegawai', 'admin', 'Edit', '2015-10-02 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('731', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-19 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('732', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-19 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('733', 'EMPY.000001', 'Master Pegawai', 'demo', 'Edit', '2015-10-19 00:00:00', 'Edit Master Pegawai - Andi Suryawan');
INSERT INTO `log_transaction` VALUES ('734', 'SUPP.000003', 'Master Supplier', 'demo', 'Edit', '2015-10-19 00:00:00', 'Edit Master Supplier - CV. Adisurya Makmur');
INSERT INTO `log_transaction` VALUES ('735', 'SUPP.000001', 'Master Supplier', 'demo', 'Edit', '2015-10-19 00:00:00', 'Edit Master Supplier - UD Jaya Lestari');
INSERT INTO `log_transaction` VALUES ('736', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('737', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('738', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('739', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('740', 'CUST.000003', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Susanto Arifin');
INSERT INTO `log_transaction` VALUES ('741', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('742', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('743', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('744', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('745', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('746', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('747', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('748', 'CUST.000002', 'Master Customer', 'demo', 'Edit', '2015-10-20 00:00:00', 'Edit Master Customer - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('749', 'ADJ/10-2015-00001', 'Jurnal Umum', 'admin', 'Hapus', '2015-10-14 00:00:00', 'Hapus Jurnal Umum - ADJ/10-2015-00001');
INSERT INTO `log_transaction` VALUES ('750', 'ADJ/10-2015-00001', 'Jurnal Umum', 'demo', 'Input', '2015-10-20 00:00:00', 'Input Jurnal Umum Baru - ADJ/10-2015-00001');
INSERT INTO `log_transaction` VALUES ('751', 'ADJ/10-2015-00001', 'Jurnal Umum', 'demo', 'Hapus', '2015-10-20 00:00:00', 'Hapus Jurnal Umum - ADJ/10-2015-00001');
INSERT INTO `log_transaction` VALUES ('752', 'ADJ/10-2015-00001', 'Jurnal Umum', 'demo', 'Input', '2015-10-20 00:00:00', 'Input Jurnal Umum Baru - ADJ/10-2015-00001');
INSERT INTO `log_transaction` VALUES ('753', 'E.2015000003', 'Master Pegawai', 'admin', 'Edit', '2015-10-02 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('754', 'tes213', 'Master Customer', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Master Customer Baru - Surya Laksmana');
INSERT INTO `log_transaction` VALUES ('755', 'tes213', 'Master Customer', 'admin', 'Input', '2015-07-26 00:00:00', 'Input Master Customer Baru - Surya Laksmana');
INSERT INTO `log_transaction` VALUES ('758', 'tes213', 'Master Customer', null, 'Input', null, null);
INSERT INTO `log_transaction` VALUES ('759', null, 'Master Customer', null, 'Input', null, null);
INSERT INTO `log_transaction` VALUES ('760', null, 'Master Customer', null, 'Input', null, null);
INSERT INTO `log_transaction` VALUES ('761', null, 'Master Customer', null, 'Input', null, 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('762', null, 'Master Customer', null, 'Input', null, 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('764', null, 'Master Customer', null, 'Input', null, 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('765', null, 'Master Customer', null, 'Input', null, 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('766', null, 'Master Customer', null, 'Input', null, 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('767', null, 'Master Customer', null, 'Input', null, 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('769', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 16:19:06', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('770', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 16:19:06', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('771', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 16:40:01', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('772', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 16:40:01', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('773', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 16:43:02', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('774', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 16:43:02', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('775', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 17:31:45', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('776', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 17:31:45', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('777', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 17:34:07', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('778', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 17:34:07', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('779', 'C.2015000005', 'Master Customer', 'import', 'Input', '2015-10-21 17:42:49', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('780', 'C.2015000006', 'Master Customer', 'import', 'Input', '2015-10-21 17:42:49', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('781', 'C.2015000007', 'Master Customer', 'import', 'Input', '2015-10-21 17:43:11', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('782', 'C.2015000008', 'Master Customer', 'import', 'Input', '2015-10-21 17:43:11', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('783', 'C.2015000009', 'Master Customer', 'import', 'Input', '2015-10-21 17:57:23', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('784', 'C.2015000010', 'Master Customer', 'import', 'Input', '2015-10-21 17:57:23', 'Input Master Customer Baru - Rudi Antonio');
INSERT INTO `log_transaction` VALUES ('785', 'E.2015000003', 'Master Pegawai', 'admin', 'Edit', '2015-10-02 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('786', 'E.2015000003', 'Master Pegawai', 'admin', 'Edit', '2015-10-02 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('787', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('788', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('789', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('790', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('791', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('792', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('793', 'CUST.000001', 'Master Customer', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Customer - Andika Ahmadi');
INSERT INTO `log_transaction` VALUES ('794', 'E.2015000003', 'Master Pegawai', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Pegawai - Demo ');
INSERT INTO `log_transaction` VALUES ('795', 'EMPY.000001', 'Master Pegawai', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Pegawai - Andi Suryawan');
INSERT INTO `log_transaction` VALUES ('796', 'SUPP.000001', 'Master Supplier', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Supplier - UD Jaya Lestari');
INSERT INTO `log_transaction` VALUES ('797', 'SUPP.000002', 'Master Supplier', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Supplier - CV Arum Jaya ');
INSERT INTO `log_transaction` VALUES ('798', 'SUPP.000002', 'Master Supplier', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Supplier - CV Arum Jaya ');
INSERT INTO `log_transaction` VALUES ('799', '0915000001', 'Master Item', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Item - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('800', '0915000001', 'Master Item', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Item - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('801', '0915000001', 'Master Item', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Item - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('802', '0915000001', 'Master Item', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Item - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('803', '0915000001', 'Master Item', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Item - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('804', '0915000001', 'Master Item', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Item - Spare Part 12045');
INSERT INTO `log_transaction` VALUES ('805', '0915000001', 'Master Item', 'demo', 'Edit', '2015-10-23 00:00:00', 'Edit Master Item - Spare Part 12045');

-- ----------------------------
-- Table structure for mst_account
-- ----------------------------
DROP TABLE IF EXISTS `mst_account`;
CREATE TABLE `mst_account` (
  `id_account` varchar(25) NOT NULL,
  `account_name` varchar(60) DEFAULT NULL,
  `parent` varchar(25) DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `flag_header` int(11) DEFAULT NULL,
  `is_income` int(11) DEFAULT NULL,
  `is_balance_sheet` int(11) DEFAULT NULL,
  `notes` text,
  `def_position` char(1) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `beg_balance` double DEFAULT NULL,
  `golongan` int(1) DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_account
-- ----------------------------
INSERT INTO `mst_account` VALUES ('1-0000', 'Assets', '', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1000', 'Current Assets', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1100', 'Cash/Bank', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1101', 'Main Cash', '1-1100', '1', '0', '0', '1', 'Account Kas Utama\r\n', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '20000000', '1');
INSERT INTO `mst_account` VALUES ('1-1102', 'Petty Cash', '1-1100', '1', '0', '0', '1', 'Account Petty Cash', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000', '1');
INSERT INTO `mst_account` VALUES ('1-1103', 'Mandiri Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000', '1');
INSERT INTO `mst_account` VALUES ('1-1104', 'BCA Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '200000000', '1');
INSERT INTO `mst_account` VALUES ('1-1105', 'BNI Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000000', '1');
INSERT INTO `mst_account` VALUES ('1-1199', 'Cashier Cash', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2015-01-07 00:00:00', '2015-01-07 00:00:00', 'admin', '2000000', '1');
INSERT INTO `mst_account` VALUES ('1-1200', 'Inventory', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1201', 'Merchandise Inventory', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '2220000', '1');
INSERT INTO `mst_account` VALUES ('1-1299', 'Miscellanous Inventory', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1300', 'Trade Bill', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1301', 'Account Receivables', '1-1300', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4000000', '1');
INSERT INTO `mst_account` VALUES ('1-1400', 'Prepaid Expenses', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1401', 'Consultant Payment', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1499', 'Others Prepaid', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1500', 'Prepaid VAT', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1501', 'VAT IN', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-1599', 'Prepaid Other Tax', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-2000', 'Fixed Assets', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-2100', 'Land & Building', '1-2000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-2101', 'Land', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '2000000000', '1');
INSERT INTO `mst_account` VALUES ('1-2102', 'Building', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '500000000', '1');
INSERT INTO `mst_account` VALUES ('1-2103', 'Building Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-2104', 'Office Equipment', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000', '1');
INSERT INTO `mst_account` VALUES ('1-2105', 'Office Equip Accumulated Depr', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '14758000', '1');
INSERT INTO `mst_account` VALUES ('1-2106', 'Vehicles', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '750000000', '1');
INSERT INTO `mst_account` VALUES ('1-2107', 'Vehicles Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-31 00:00:00', '2014-12-31 00:00:00', 'admin', '34774200', '1');
INSERT INTO `mst_account` VALUES ('1-2198', 'Other Fixed Assets', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('1-2199', 'Other FA Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '1');
INSERT INTO `mst_account` VALUES ('2-0000', 'Liabilities', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-1000', 'Short Term Liabilities', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-1100', 'Trade Payable', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-1101', 'Account Payable', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4400000', '2');
INSERT INTO `mst_account` VALUES ('2-1102', 'VAT OUT', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-1200', 'Bank Payable', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-1201', 'BCA Payable', '2-1200', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-2000', 'Long Term Liabilities', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-2100', 'Bank Payable', '2-2000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('2-2101', 'BCA Payable', '2-2100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '2');
INSERT INTO `mst_account` VALUES ('3-0000', 'Capital', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '3');
INSERT INTO `mst_account` VALUES ('3-1000', 'Authorized Capital', '3-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '3');
INSERT INTO `mst_account` VALUES ('3-1100', 'Owners Capital', '3-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '3');
INSERT INTO `mst_account` VALUES ('3-1101', 'Paid-Up Capital', '3-1100', '1', '0', '0', '1', '', 'K', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '3871693000', '3');
INSERT INTO `mst_account` VALUES ('3-1102', 'Prive', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '3');
INSERT INTO `mst_account` VALUES ('3-1199', 'Profit-Loss Summary', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '3');
INSERT INTO `mst_account` VALUES ('4-0000', 'Income', '', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1000', 'Operational Income', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1100', 'Sales', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1101', 'Product Sales', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1102', 'Purchase Discount', '4-1100', '1', '0', '1', '0', null, 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1103', 'Sales Discount', '4-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1104', 'Account Payable Payment Disc', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1105', 'Account Receivable Payment Disc', '4-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1200', 'Operational Revenues', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1201', 'Service Revenues', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1202', 'Service Revenues Discount', '4-1200', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-1203', 'Other Revenues', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-2000', 'Non Operational Income', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-2100', 'Non Operational Revenues', '4-2000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-2101', 'Bank Interest Revenues', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('4-2102', 'Exchange Rate Revenue', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '4');
INSERT INTO `mst_account` VALUES ('5-0000', 'Cost Of Goods', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '5');
INSERT INTO `mst_account` VALUES ('5-1000', 'Cost Of Goods Sold', '5-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '5');
INSERT INTO `mst_account` VALUES ('5-1100', 'Inventory COGS', '5-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '5');
INSERT INTO `mst_account` VALUES ('5-1101', 'Merchandise Inventory COGS', '5-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '5');
INSERT INTO `mst_account` VALUES ('5-1199', 'Other Inventory COGS', '5-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '5');
INSERT INTO `mst_account` VALUES ('6-0000', 'Expenses', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1000', 'Operational Expenses', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1100', 'Adm & GA Expenses', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1101', 'Electricity, Phone & Water Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1102', 'Office Supplies Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1103', 'Tax Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1104', 'Building Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1105', 'Vehicles Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1106', 'Equipment Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1107', 'Freight', '6-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1199', 'Other Adm & GA Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1200', 'Sales & Marketing Expense', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1201', 'Advertising & Promotion Expense', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1202', 'Commission Expense', '6-1200', '1', '0', '1', '0', 'Komisi Marketing', 'D', 'admin', '2014-06-11 00:00:00', '2014-06-11 00:00:00', 'admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-1299', 'Other Marketing Expense', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-2000', 'Non Operational Expense', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-2100', 'Non Operational Cost', '6-2000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');
INSERT INTO `mst_account` VALUES ('6-2101', 'Exchange Rate Expense', '6-2100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0', '6');

-- ----------------------------
-- Table structure for mst_account_setmanufacture_id
-- ----------------------------
DROP TABLE IF EXISTS `mst_account_setmanufacture_id`;
CREATE TABLE `mst_account_setmanufacture_id` (
  `id_account` varchar(25) NOT NULL,
  `account_name` varchar(60) DEFAULT NULL,
  `parent` varchar(25) DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `flag_header` int(11) DEFAULT NULL,
  `is_income` int(11) DEFAULT NULL,
  `is_balance_sheet` int(11) DEFAULT NULL,
  `notes` text,
  `def_position` char(1) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `beg_balance` double DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_account_setmanufacture_id
-- ----------------------------
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-0000', 'Aktiva', '', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1000', 'Aktiva Lancar', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1100', 'Kas / Bank', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1101', 'Kas Besar', '1-1100', '1', '0', '0', '1', 'Account Kas Utama\r\n', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '20000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1102', 'Kas Kecil', '1-1100', '1', '0', '0', '1', 'Account Petty Cash', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1103', 'Bank Mandiri', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1104', 'Bank BCA', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '200000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1105', 'Bank BNI', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1199', 'Kas Kasir', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2015-01-07 00:00:00', '2015-01-07 00:00:00', 'admin', '2000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1200', 'Persediaan', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1201', 'Persediaan Barang Dagangan', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '110800');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1299', 'Persediaan Lain', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1300', 'Piutang', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1301', 'Piutang Usaha', '1-1300', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1400', 'Biaya Dibayar Dimuka', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1401', 'Uang Muka Konsultan', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1499', 'Uang Muka Lain', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1500', 'Pajak Dibayar Dimuka', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1501', 'PPN Masukan', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-1599', 'Uang Muka Pajak Lain', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2000', 'Aktiva Tetap', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2100', 'Tanah dan Bangunan', '1-2000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2101', 'Tanah', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '2000000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2102', 'Bangunan', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '500000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2103', 'Akumulasi Depr Bangunan', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2104', 'Inventaris Kantor', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2105', 'Akumulasi Depr Inventaris Kantor', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '14758000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2106', 'Kendaraan', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '750000000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2107', 'Akumulasi Depr Kendaraan', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-31 00:00:00', '2014-12-31 00:00:00', 'admin', '34774200');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2198', 'Aktiva Tetap Lain', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('1-2199', 'Akumulasi Depr Aktiva Tetap Lain', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-0000', 'Kewajiban', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-1000', 'Kewajiban Lancar', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-1100', 'Hutang Usaha', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-1101', 'Hutang Ke Supplier', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4400000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-1102', 'PPN Keluaran', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-1200', 'Hutang Bank', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-1201', 'Hutang Bank Jangka Pendek', '2-1200', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-2000', 'Kewajiban Jangka Panjang', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-2100', 'Hutang Bank', '2-2000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('2-2101', 'Hutang Bank Jangka Panjang', '2-2100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('3-0000', 'Modal', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('3-1000', 'Modal Dasar', '3-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('3-1100', 'Modal Tn A', '3-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('3-1101', 'Modal Disetor', '3-1100', '1', '0', '0', '1', '', 'K', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '3871693000');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('3-1102', 'Prive', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('3-1199', 'Ikhtisar Laba / Rugi', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-0000', 'Pendapatan', '', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1000', 'Pendapatan Operasional', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1100', 'Penjualan', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1101', 'Penjualan Produk', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1102', 'Potongan Pembelian', '4-1100', '1', '0', '1', '0', null, 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1103', 'Potongan Penjualan', '4-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1104', 'Potongan Pembayaran Hutang', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1105', 'Potongan Pembayaran Piutang', '4-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1200', 'Pendapatan Usaha', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1201', 'Pendapatan Jasa', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1202', 'Potongan Penjualan Jasa', '4-1200', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-1203', 'Pendapatan Penjualan Lainnya', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-2000', 'Pendapatan Non Operasional', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-2100', 'Pendapatan di Luar Usaha', '4-2000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-2101', 'Pendapatan Bunga Bank', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('4-2102', 'Pendapatan Selisih Kurs', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('5-0000', 'Harga Pokok', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('5-1000', 'Harga Pokok Penjualan', '5-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('5-1100', 'Harga Pokok Penjualan Produk', '5-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('5-1101', 'HPP Barang Dagangan', '5-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('5-1199', 'HPP Barang Lainnya', '5-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-0000', 'Biaya', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1000', 'Biaya Operasional', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1100', 'Biaya Adm & Umum', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1101', 'Biaya Listrik, Telp & Air', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1102', 'Biaya Alat Tulis Kantor', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1103', 'Biaya Bea & Pajak', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1104', 'Biaya Penyusutan Bangunan', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1105', 'Biaya Penyusutan Kendaraan', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1106', 'Biaya Penyusutan Inventaris', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1107', 'Biaya Angkut', '6-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1199', 'Biaya Adm & Umum Lain', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1200', 'Biaya Penjualan', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1201', 'Biaya Iklan & Promosi', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1202', 'BIaya Komisi Marketing', '6-1200', '1', '0', '1', '0', 'Komisi Marketing', 'D', 'admin', '2014-06-11 00:00:00', '2014-06-11 00:00:00', 'admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-1299', 'Biaya Penjualan Lain', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-2000', 'Biaya Non Operasional', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-2100', 'Biaya di Luar Usaha', '6-2000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_id` VALUES ('6-2101', 'Biaya Selisih Kurs', '6-2100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');

-- ----------------------------
-- Table structure for mst_account_setmanufacture_int
-- ----------------------------
DROP TABLE IF EXISTS `mst_account_setmanufacture_int`;
CREATE TABLE `mst_account_setmanufacture_int` (
  `id_account` varchar(25) NOT NULL,
  `account_name` varchar(60) DEFAULT NULL,
  `parent` varchar(25) DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `flag_header` int(11) DEFAULT NULL,
  `is_income` int(11) DEFAULT NULL,
  `is_balance_sheet` int(11) DEFAULT NULL,
  `notes` text,
  `def_position` char(1) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `beg_balance` double DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_account_setmanufacture_int
-- ----------------------------
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-0000', 'Assets', '', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1000', 'Current Assets', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1100', 'Cash/Bank', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1101', 'Main Cash', '1-1100', '1', '0', '0', '1', 'Account Kas Utama\r\n', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '20000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1102', 'Petty Cash', '1-1100', '1', '0', '0', '1', 'Account Petty Cash', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1103', 'Mandiri Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1104', 'BCA Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '200000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1105', 'BNI Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1199', 'Cashier Cash', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2015-01-07 00:00:00', '2015-01-07 00:00:00', 'admin', '2000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1200', 'Inventory', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1201', 'Merchandise Inventory', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '110800');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1299', 'Miscellanous Inventory', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1300', 'Trade Bill', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1301', 'Account Receivables', '1-1300', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1400', 'Prepaid Expenses', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1401', 'Consultant Payment', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1499', 'Others Prepaid', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1500', 'Prepaid VAT', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1501', 'VAT IN', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-1599', 'Prepaid Other Tax', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2000', 'Fixed Assets', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2100', 'Land & Building', '1-2000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2101', 'Land', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '2000000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2102', 'Building', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '500000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2103', 'Building Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2104', 'Office Equipment', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2105', 'Office Equip Accumulated Depr', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '14758000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2106', 'Vehicles', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '750000000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2107', 'Vehicles Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-31 00:00:00', '2014-12-31 00:00:00', 'admin', '34774200');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2198', 'Other Fixed Assets', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('1-2199', 'Other FA Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-0000', 'Liabilities', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-1000', 'Short Term Liabilities', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-1100', 'Trade Payable', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-1101', 'Account Payable', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4400000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-1102', 'VAT OUT', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-1200', 'Bank Payable', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-1201', 'BCA Payable', '2-1200', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-2000', 'Long Term Liabilities', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-2100', 'Bank Payable', '2-2000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('2-2101', 'BCA Payable', '2-2100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('3-0000', 'Capital', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('3-1000', 'Authorized Capital', '3-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('3-1100', 'Owners Capital', '3-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('3-1101', 'Paid-Up Capital', '3-1100', '1', '0', '0', '1', '', 'K', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '3871693000');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('3-1102', 'Prive', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('3-1199', 'Profit-Loss Summary', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-0000', 'Income', '', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1000', 'Operational Income', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1100', 'Sales', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1101', 'Product Sales', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1102', 'Purchase Discount', '4-1100', '1', '0', '1', '0', null, 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1103', 'Sales Discount', '4-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1104', 'Account Payable Payment Disc', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1105', 'Account Receivable Payment Disc', '4-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1200', 'Operational Revenues', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1201', 'Service Revenues', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1202', 'Service Revenues Discount', '4-1200', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-1203', 'Other Revenues', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-2000', 'Non Operational Income', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-2100', 'Non Operational Revenues', '4-2000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-2101', 'Bank Interest Revenues', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('4-2102', 'Exchange Rate Revenue', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('5-0000', 'Cost Of Goods', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('5-1000', 'Cost Of Goods Sold', '5-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('5-1100', 'Inventory COGS', '5-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('5-1101', 'Merchandise Inventory COGS', '5-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('5-1199', 'Other Inventory COGS', '5-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-0000', 'Expenses', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1000', 'Operational Expenses', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1100', 'Adm & GA Expenses', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1101', 'Electricity, Phone & Water Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1102', 'Office Supplies Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1103', 'Tax Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1104', 'Building Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1105', 'Vehicles Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1106', 'Equipment Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1107', 'Freight', '6-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1199', 'Other Adm & GA Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1200', 'Sales & Marketing Expense', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1201', 'Advertising & Promotion Expense', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1202', 'Commission Expense', '6-1200', '1', '0', '1', '0', 'Komisi Marketing', 'D', 'admin', '2014-06-11 00:00:00', '2014-06-11 00:00:00', 'admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-1299', 'Other Marketing Expense', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-2000', 'Non Operational Expense', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-2100', 'Non Operational Cost', '6-2000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setmanufacture_int` VALUES ('6-2101', 'Exchange Rate Expense', '6-2100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');

-- ----------------------------
-- Table structure for mst_account_setretail_id
-- ----------------------------
DROP TABLE IF EXISTS `mst_account_setretail_id`;
CREATE TABLE `mst_account_setretail_id` (
  `id_account` varchar(25) NOT NULL,
  `account_name` varchar(60) DEFAULT NULL,
  `parent` varchar(25) DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `flag_header` int(11) DEFAULT NULL,
  `is_income` int(11) DEFAULT NULL,
  `is_balance_sheet` int(11) DEFAULT NULL,
  `notes` text,
  `def_position` char(1) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `beg_balance` double DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_account_setretail_id
-- ----------------------------
INSERT INTO `mst_account_setretail_id` VALUES ('1-0000', 'Aktiva', '', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1000', 'Aktiva Lancar', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1100', 'Kas / Bank', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1101', 'Kas Besar', '1-1100', '1', '0', '0', '1', 'Account Kas Utama\r\n', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '20000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1102', 'Kas Kecil', '1-1100', '1', '0', '0', '1', 'Account Petty Cash', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1103', 'Bank Mandiri', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1104', 'Bank BCA', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '200000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1105', 'Bank BNI', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1199', 'Kas Kasir', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2015-01-07 00:00:00', '2015-01-07 00:00:00', 'admin', '2000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1200', 'Persediaan', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1201', 'Persediaan Barang Dagangan', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '110800');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1299', 'Persediaan Lain', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1300', 'Piutang', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1301', 'Piutang Usaha', '1-1300', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1400', 'Biaya Dibayar Dimuka', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1401', 'Uang Muka Konsultan', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1499', 'Uang Muka Lain', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1500', 'Pajak Dibayar Dimuka', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1501', 'PPN Masukan', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-1599', 'Uang Muka Pajak Lain', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2000', 'Aktiva Tetap', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2100', 'Tanah dan Bangunan', '1-2000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2101', 'Tanah', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '2000000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2102', 'Bangunan', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '500000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2103', 'Akumulasi Depr Bangunan', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2104', 'Inventaris Kantor', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2105', 'Akumulasi Depr Inventaris Kantor', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '14758000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2106', 'Kendaraan', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '750000000');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2107', 'Akumulasi Depr Kendaraan', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-31 00:00:00', '2014-12-31 00:00:00', 'admin', '34774200');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2198', 'Aktiva Tetap Lain', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('1-2199', 'Akumulasi Depr Aktiva Tetap Lain', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-0000', 'Kewajiban', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-1000', 'Kewajiban Lancar', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-1100', 'Hutang Usaha', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-1101', 'Hutang Ke Supplier', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4400000');
INSERT INTO `mst_account_setretail_id` VALUES ('2-1102', 'PPN Keluaran', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-1200', 'Hutang Bank', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-1201', 'Hutang Bank Jangka Pendek', '2-1200', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-2000', 'Kewajiban Jangka Panjang', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-2100', 'Hutang Bank', '2-2000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('2-2101', 'Hutang Bank Jangka Panjang', '2-2100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('3-0000', 'Modal', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('3-1000', 'Modal Dasar', '3-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('3-1100', 'Modal Tn A', '3-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('3-1101', 'Modal Disetor', '3-1100', '1', '0', '0', '1', '', 'K', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '3871693000');
INSERT INTO `mst_account_setretail_id` VALUES ('3-1102', 'Prive', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('3-1199', 'Ikhtisar Laba / Rugi', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-0000', 'Pendapatan', '', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1000', 'Pendapatan Operasional', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1100', 'Penjualan', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1101', 'Penjualan Produk', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1102', 'Potongan Pembelian', '4-1100', '1', '0', '1', '0', null, 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1103', 'Potongan Penjualan', '4-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1104', 'Potongan Pembayaran Hutang', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1105', 'Potongan Pembayaran Piutang', '4-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1200', 'Pendapatan Usaha', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1201', 'Pendapatan Jasa', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1202', 'Potongan Penjualan Jasa', '4-1200', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-1203', 'Pendapatan Penjualan Lainnya', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-2000', 'Pendapatan Non Operasional', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-2100', 'Pendapatan di Luar Usaha', '4-2000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-2101', 'Pendapatan Bunga Bank', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('4-2102', 'Pendapatan Selisih Kurs', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('5-0000', 'Harga Pokok', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('5-1000', 'Harga Pokok Penjualan', '5-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('5-1100', 'Harga Pokok Penjualan Produk', '5-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('5-1101', 'HPP Barang Dagangan', '5-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('5-1199', 'HPP Barang Lainnya', '5-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-0000', 'Biaya', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1000', 'Biaya Operasional', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1100', 'Biaya Adm & Umum', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1101', 'Biaya Listrik, Telp & Air', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1102', 'Biaya Alat Tulis Kantor', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1103', 'Biaya Bea & Pajak', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1104', 'Biaya Penyusutan Bangunan', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1105', 'Biaya Penyusutan Kendaraan', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1106', 'Biaya Penyusutan Inventaris', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1107', 'Biaya Angkut', '6-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1199', 'Biaya Adm & Umum Lain', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1200', 'Biaya Penjualan', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1201', 'Biaya Iklan & Promosi', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1202', 'BIaya Komisi Marketing', '6-1200', '1', '0', '1', '0', 'Komisi Marketing', 'D', 'admin', '2014-06-11 00:00:00', '2014-06-11 00:00:00', 'admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-1299', 'Biaya Penjualan Lain', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-2000', 'Biaya Non Operasional', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-2100', 'Biaya di Luar Usaha', '6-2000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_id` VALUES ('6-2101', 'Biaya Selisih Kurs', '6-2100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');

-- ----------------------------
-- Table structure for mst_account_setretail_int
-- ----------------------------
DROP TABLE IF EXISTS `mst_account_setretail_int`;
CREATE TABLE `mst_account_setretail_int` (
  `id_account` varchar(25) NOT NULL,
  `account_name` varchar(60) DEFAULT NULL,
  `parent` varchar(25) DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `flag_header` int(11) DEFAULT NULL,
  `is_income` int(11) DEFAULT NULL,
  `is_balance_sheet` int(11) DEFAULT NULL,
  `notes` text,
  `def_position` char(1) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `beg_balance` double DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_account_setretail_int
-- ----------------------------
INSERT INTO `mst_account_setretail_int` VALUES ('1-0000', 'Assets', '', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1000', 'Current Assets', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1100', 'Cash/Bank', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1101', 'Main Cash', '1-1100', '1', '0', '0', '1', 'Account Kas Utama\r\n', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '20000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1102', 'Petty Cash', '1-1100', '1', '0', '0', '1', 'Account Petty Cash', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1103', 'Mandiri Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1104', 'BCA Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '200000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1105', 'BNI Bank', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '50000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1199', 'Cashier Cash', '1-1100', '1', '0', '0', '1', '', 'D', 'admin', '2015-01-07 00:00:00', '2015-01-07 00:00:00', 'admin', '2000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1200', 'Inventory', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1201', 'Merchandise Inventory', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '110800');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1299', 'Miscellanous Inventory', '1-1200', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1300', 'Trade Bill', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1301', 'Account Receivables', '1-1300', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1400', 'Prepaid Expenses', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1401', 'Consultant Payment', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1499', 'Others Prepaid', '1-1400', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1500', 'Prepaid VAT', '1-1000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1501', 'VAT IN', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-1599', 'Prepaid Other Tax', '1-1500', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2000', 'Fixed Assets', '1-0000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2100', 'Land & Building', '1-2000', '1', '1', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2101', 'Land', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '2000000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2102', 'Building', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '500000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2103', 'Building Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2104', 'Office Equipment', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '150000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2105', 'Office Equip Accumulated Depr', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '14758000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2106', 'Vehicles', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '750000000');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2107', 'Vehicles Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'admin', '2014-12-31 00:00:00', '2014-12-31 00:00:00', 'admin', '34774200');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2198', 'Other Fixed Assets', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('1-2199', 'Other FA Accumulated Depreciation', '1-2100', '1', '0', '0', '1', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-0000', 'Liabilities', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-1000', 'Short Term Liabilities', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-1100', 'Trade Payable', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-1101', 'Account Payable', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '4400000');
INSERT INTO `mst_account_setretail_int` VALUES ('2-1102', 'VAT OUT', '2-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-1200', 'Bank Payable', '2-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-1201', 'BCA Payable', '2-1200', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-2000', 'Long Term Liabilities', '2-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-2100', 'Bank Payable', '2-2000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('2-2101', 'BCA Payable', '2-2100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('3-0000', 'Capital', '', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('3-1000', 'Authorized Capital', '3-0000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('3-1100', 'Owners Capital', '3-1000', '1', '1', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('3-1101', 'Paid-Up Capital', '3-1100', '1', '0', '0', '1', '', 'K', 'admin', '2014-12-30 00:00:00', '2014-12-30 00:00:00', 'admin', '3871693000');
INSERT INTO `mst_account_setretail_int` VALUES ('3-1102', 'Prive', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('3-1199', 'Profit-Loss Summary', '3-1100', '1', '0', '0', '1', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-0000', 'Income', '', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1000', 'Operational Income', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1100', 'Sales', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1101', 'Product Sales', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1102', 'Purchase Discount', '4-1100', '1', '0', '1', '0', null, 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1103', 'Sales Discount', '4-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1104', 'Account Payable Payment Disc', '4-1100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1105', 'Account Receivable Payment Disc', '4-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1200', 'Operational Revenues', '4-1000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1201', 'Service Revenues', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1202', 'Service Revenues Discount', '4-1200', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-1203', 'Other Revenues', '4-1200', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-2000', 'Non Operational Income', '4-0000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-2100', 'Non Operational Revenues', '4-2000', '1', '1', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-2101', 'Bank Interest Revenues', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('4-2102', 'Exchange Rate Revenue', '4-2100', '1', '0', '1', '0', '', 'K', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('5-0000', 'Cost Of Goods', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('5-1000', 'Cost Of Goods Sold', '5-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('5-1100', 'Inventory COGS', '5-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('5-1101', 'Merchandise Inventory COGS', '5-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('5-1199', 'Other Inventory COGS', '5-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-0000', 'Expenses', '', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1000', 'Operational Expenses', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1100', 'Adm & GA Expenses', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1101', 'Electricity, Phone & Water Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1102', 'Office Supplies Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1103', 'Tax Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1104', 'Building Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1105', 'Vehicles Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1106', 'Equipment Depreciation Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1107', 'Freight', '6-1100', '1', '0', '1', '0', null, 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1199', 'Other Adm & GA Expense', '6-1100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1200', 'Sales & Marketing Expense', '6-1000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1201', 'Advertising & Promotion Expense', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1202', 'Commission Expense', '6-1200', '1', '0', '1', '0', 'Komisi Marketing', 'D', 'admin', '2014-06-11 00:00:00', '2014-06-11 00:00:00', 'admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-1299', 'Other Marketing Expense', '6-1200', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-2000', 'Non Operational Expense', '6-0000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-2100', 'Non Operational Cost', '6-2000', '1', '1', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');
INSERT INTO `mst_account_setretail_int` VALUES ('6-2101', 'Exchange Rate Expense', '6-2100', '1', '0', '1', '0', '', 'D', 'Admin', '2014-01-01 00:00:00', '2014-01-01 00:00:00', 'Admin', '0');

-- ----------------------------
-- Table structure for mst_ap_initialbalance
-- ----------------------------
DROP TABLE IF EXISTS `mst_ap_initialbalance`;
CREATE TABLE `mst_ap_initialbalance` (
  `cutoff_date` date DEFAULT NULL,
  `invoice_no` varchar(120) NOT NULL,
  `id_supplier` varchar(30) DEFAULT NULL,
  `amount_of` double DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  KEY `service_fkey1` (`id_supplier`),
  CONSTRAINT `mst_ap_initialbalance_ibfk_1` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_ap_initialbalance
-- ----------------------------
INSERT INTO `mst_ap_initialbalance` VALUES ('2015-09-14', 'INV/2014-01-000001', 'SUPP.000001', '4500000', '', 'admin', '2015-09-14 00:00:00', '2015-09-14 00:00:00', 'admin');
INSERT INTO `mst_ap_initialbalance` VALUES ('2015-09-14', 'INV/2015-01-000002', 'SUPP.000001', '900000', '', 'admin', '2015-09-14 00:00:00', '2015-09-14 00:00:00', 'admin');

-- ----------------------------
-- Table structure for mst_ar_initialbalance
-- ----------------------------
DROP TABLE IF EXISTS `mst_ar_initialbalance`;
CREATE TABLE `mst_ar_initialbalance` (
  `cutoff_date` date DEFAULT NULL,
  `invoice_no` varchar(120) NOT NULL,
  `id_customer` varchar(30) DEFAULT NULL,
  `amount_of` double DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  KEY `service_fkey1` (`id_customer`),
  CONSTRAINT `mst_ar_initialbalance_ibfk_1` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_ar_initialbalance
-- ----------------------------
INSERT INTO `mst_ar_initialbalance` VALUES ('2015-09-15', 'INV/AR/2015-01-00001', 'CUST.000002', '800000', '', 'admin', '2015-09-15 00:00:00', '2015-09-15 00:00:00', 'admin');

-- ----------------------------
-- Table structure for mst_aset
-- ----------------------------
DROP TABLE IF EXISTS `mst_aset`;
CREATE TABLE `mst_aset` (
  `id_aset` varchar(25) NOT NULL DEFAULT '',
  `id_coa_aset` varchar(30) DEFAULT NULL,
  `id_coa_penyusutan` varchar(30) DEFAULT NULL,
  `id_coa_akumulasi` varchar(30) DEFAULT NULL,
  `id_golongan` varchar(25) DEFAULT NULL,
  `nama` varchar(60) DEFAULT NULL,
  `notes` text,
  `tanggal_perolehan` date DEFAULT NULL,
  `nilai_perolehan` double DEFAULT NULL,
  `sawal_nilai_buku` double DEFAULT NULL,
  `id_department` int(11) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_aset`),
  KEY `id_golongan` (`id_golongan`),
  KEY `id_coa_aset` (`id_coa_aset`),
  KEY `id_department` (`id_department`),
  CONSTRAINT `mst_aset_ibfk_1` FOREIGN KEY (`id_golongan`) REFERENCES `mst_golaset` (`id_golongan`) ON UPDATE CASCADE,
  CONSTRAINT `mst_aset_ibfk_2` FOREIGN KEY (`id_department`) REFERENCES `mst_department` (`department_id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_aset
-- ----------------------------
INSERT INTO `mst_aset` VALUES ('AST1015000001', '1-2104', '6-1106', '1-2105', 'GOL1015000001', 'Komputer Staf Akuntansi 1', 'Komputer Akuntansi Meja 1', '2015-10-12', '3500000', '3500000', '2', '2015-10-12 00:00:00', '2015-10-12 00:00:00', 'admin', 'admin');
INSERT INTO `mst_aset` VALUES ('AST1015000002', '1-2104', '6-1106', '1-2105', 'GOL1015000001', 'Komputer staf Akuntansi 2', 'Komputer di Meja Akuntansi 2', '2015-10-13', '4000000', '0', '2', '2015-10-13 00:00:00', '2015-10-13 00:00:00', 'admin', 'admin');
INSERT INTO `mst_aset` VALUES ('AST1015000003', '1-2104', '6-1106', '1-2105', 'GOL1015000001', 'Komputer Gudang Meja 3', '', '2014-01-01', '4000000', '2250000', '4', '2015-10-13 00:00:00', '2015-10-13 00:00:00', 'admin', 'admin');

-- ----------------------------
-- Table structure for mst_bom_conversion
-- ----------------------------
DROP TABLE IF EXISTS `mst_bom_conversion`;
CREATE TABLE `mst_bom_conversion` (
  `no_bom` varchar(30) NOT NULL,
  `id_cost` varchar(30) DEFAULT NULL,
  `qty_hour` double DEFAULT NULL,
  `cost` double DEFAULT NULL,
  `notes` text,
  `total_cost` decimal(10,0) DEFAULT NULL,
  KEY `no_bom` (`no_bom`),
  KEY `id_cost` (`id_cost`),
  CONSTRAINT `mst_bom_conversion_ibfk_1` FOREIGN KEY (`no_bom`) REFERENCES `mst_bom_head` (`no_bom`) ON UPDATE CASCADE,
  CONSTRAINT `mst_bom_conversion_ibfk_2` FOREIGN KEY (`id_cost`) REFERENCES `mst_standard_cost` (`id_cost`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_bom_conversion
-- ----------------------------

-- ----------------------------
-- Table structure for mst_bom_head
-- ----------------------------
DROP TABLE IF EXISTS `mst_bom_head`;
CREATE TABLE `mst_bom_head` (
  `no_bom` varchar(30) NOT NULL,
  `id_item` varchar(60) DEFAULT NULL,
  `notes` text,
  `qty_item` double DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_bom`),
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `mst_bom_head_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `mst_bom_head_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_bom_head
-- ----------------------------

-- ----------------------------
-- Table structure for mst_bom_material
-- ----------------------------
DROP TABLE IF EXISTS `mst_bom_material`;
CREATE TABLE `mst_bom_material` (
  `no_bom` varchar(30) NOT NULL,
  `id_item` varchar(120) DEFAULT NULL,
  `qty_material` double DEFAULT NULL,
  `id_unit` varchar(255) DEFAULT NULL,
  `cost` double DEFAULT NULL,
  `notes` text,
  `total_cost` double DEFAULT NULL,
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  KEY `no_bom` (`no_bom`),
  CONSTRAINT `mst_bom_material_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `mst_bom_material_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE,
  CONSTRAINT `mst_bom_material_ibfk_3` FOREIGN KEY (`no_bom`) REFERENCES `mst_bom_head` (`no_bom`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_bom_material
-- ----------------------------

-- ----------------------------
-- Table structure for mst_brand
-- ----------------------------
DROP TABLE IF EXISTS `mst_brand`;
CREATE TABLE `mst_brand` (
  `id_brand` varchar(30) NOT NULL,
  `name_brand` varchar(120) DEFAULT NULL,
  `description` text,
  PRIMARY KEY (`id_brand`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_brand
-- ----------------------------
INSERT INTO `mst_brand` VALUES ('NN', 'Non Brand', 'Tanpa Merek');

-- ----------------------------
-- Table structure for mst_company
-- ----------------------------
DROP TABLE IF EXISTS `mst_company`;
CREATE TABLE `mst_company` (
  `company_code` varchar(60) NOT NULL,
  `company_name` varchar(200) DEFAULT NULL,
  `address` text,
  `city` varchar(200) DEFAULT NULL,
  `phone` varchar(255) DEFAULT NULL,
  `email` varchar(200) DEFAULT NULL,
  `website` varchar(200) DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `flag_status` int(11) DEFAULT NULL,
  `flag_type` int(11) DEFAULT NULL,
  `serial1` varchar(250) DEFAULT NULL,
  `serial2` varchar(250) DEFAULT NULL,
  `serial3` varchar(250) DEFAULT NULL,
  `serial4` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`company_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_company
-- ----------------------------
INSERT INTO `mst_company` VALUES ('HEAD-Surabaya', 'PT. Aneka Dagang', 'Jln. Pemuda No 90', 'Surabaya', '081653542349', '', '', '1', '1', '1', '34PFM', 'F1CBS', '5AZKI', 'B2RTR');

-- ----------------------------
-- Table structure for mst_currency
-- ----------------------------
DROP TABLE IF EXISTS `mst_currency`;
CREATE TABLE `mst_currency` (
  `id_currency` varchar(25) NOT NULL DEFAULT '',
  `currency` varchar(25) DEFAULT NULL,
  `nation` varchar(25) DEFAULT NULL,
  `flag_default` smallint(1) DEFAULT NULL,
  `notes` text,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id_currency`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_currency
-- ----------------------------
INSERT INTO `mst_currency` VALUES ('$US', 'Dollar Amerika', 'International', '0', 'Mata Uang Dollar \r\n', 'admin', '2014-05-30 00:00:00', 'admin', '2015-04-10 00:00:00');
INSERT INTO `mst_currency` VALUES ('IDR', 'Indonesian Rupiah', 'Indonesia', '1', 'Mata Uang Rupiah', 'admin', '2014-01-01 00:00:00', 'admin', '2014-01-01 00:00:00');

-- ----------------------------
-- Table structure for mst_customer
-- ----------------------------
DROP TABLE IF EXISTS `mst_customer`;
CREATE TABLE `mst_customer` (
  `id_customer` varchar(25) NOT NULL,
  `first_name` varchar(60) DEFAULT NULL,
  `last_name` varchar(60) DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  `city` varchar(120) DEFAULT NULL,
  `state` varchar(255) DEFAULT NULL,
  `postal_code` varchar(25) DEFAULT NULL,
  `country` varchar(120) DEFAULT NULL,
  `phone1` varchar(60) DEFAULT NULL,
  `phone2` varchar(60) DEFAULT NULL,
  `phone3` varchar(60) DEFAULT NULL,
  `fax` varchar(60) DEFAULT NULL,
  `email` varchar(120) DEFAULT NULL,
  `website` varchar(120) DEFAULT NULL,
  `photo` text,
  `credit_limit` double DEFAULT NULL,
  `notes` text,
  `id_account` varchar(25) NOT NULL,
  `def_due_date` date DEFAULT NULL,
  `def_payment_method` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `ar_balance` double(19,0) DEFAULT NULL,
  `id_barcode` varchar(200) DEFAULT NULL,
  `flag_credit_limit` int(11) DEFAULT NULL,
  PRIMARY KEY (`id_customer`),
  KEY `id_account` (`id_account`),
  CONSTRAINT `mst_customer_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_customer
-- ----------------------------
INSERT INTO `mst_customer` VALUES ('CUST.000001', 'Andika', 'Ahmadi', 'Jln. Panjaitan No 90', 'Surabaya', '', '', '', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000012310201557.jpg', '0', '', '1-1301', '2015-04-10', '2', '0', 'demo', '2015-04-10 00:00:00', '2015-10-23 00:00:00', 'admin', '0', '887359348', '0');
INSERT INTO `mst_customer` VALUES ('CUST.000002', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000022010201539.jpg', '0', 'Demo Customer 00002', '1-1301', '2015-07-25', '2', '0', 'demo', '2015-07-25 00:00:00', '2015-10-20 00:00:00', 'admin', '800000', '101000002', '1');
INSERT INTO `mst_customer` VALUES ('CUST.000003', 'Susanto', 'Arifin', 'Jln. Jawa No 45', 'Surabaya', 'Jawa Timur', '60298', 'Indonesia', '081283459001', '', '', '', 'susanto@gmail.com', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000032010201540.jpg', '0', '', '1-1301', '2015-07-26', '1', '0', 'demo', '2015-07-26 00:00:00', '2015-10-20 00:00:00', 'admin', '0', '', '1');
INSERT INTO `mst_customer` VALUES ('CUST.000004', 'Surya', 'Laksmana', 'Jln. Kalimantan No 77', 'Surabaya', 'Jawa Timur', '60284', 'Indonesia', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000032607201503.jpg', '0', '', '1-1301', '2015-07-26', '1', '0', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '0', '', '1');

-- ----------------------------
-- Table structure for mst_customer_copy
-- ----------------------------
DROP TABLE IF EXISTS `mst_customer_copy`;
CREATE TABLE `mst_customer_copy` (
  `id_customer` varchar(25) DEFAULT NULL,
  `first_name` varchar(60) DEFAULT NULL,
  `last_name` varchar(60) DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  `city` varchar(120) DEFAULT NULL,
  `state` varchar(255) DEFAULT NULL,
  `postal_code` varchar(25) DEFAULT NULL,
  `country` varchar(120) DEFAULT NULL,
  `phone1` varchar(60) DEFAULT NULL,
  `phone2` varchar(60) DEFAULT NULL,
  `phone3` varchar(60) DEFAULT NULL,
  `fax` varchar(60) DEFAULT NULL,
  `email` varchar(120) DEFAULT NULL,
  `website` varchar(120) DEFAULT NULL,
  `photo` text,
  `credit_limit` double DEFAULT NULL,
  `notes` text,
  `id_account` varchar(25) DEFAULT NULL,
  `def_due_date` date DEFAULT NULL,
  `def_payment_method` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `ar_balance` double(19,0) DEFAULT NULL,
  `id_barcode` varchar(200) DEFAULT NULL,
  `flag_credit_limit` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_customer_copy
-- ----------------------------
INSERT INTO `mst_customer_copy` VALUES ('CUST.000001', 'Andika', 'Ahmadi', 'Jln. Panjaitan No 90', 'Surabaya', '', '', '', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000012010201559.jpg', '0', '', '1-1301', '2015-04-10', '2', '0', 'demo', '2015-04-10 00:00:00', '2015-10-20 00:00:00', 'admin', '0', '887359348', '0');
INSERT INTO `mst_customer_copy` VALUES ('CUST.000002', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000022010201539.jpg', '0', 'Demo Customer 00002', '1-1301', '2015-07-25', '2', '0', 'demo', '2015-07-25 00:00:00', '2015-10-20 00:00:00', 'admin', '800000', '101000002', '1');
INSERT INTO `mst_customer_copy` VALUES ('CUST.000003', 'Susanto', 'Arifin', 'Jln. Jawa No 45', 'Surabaya', 'Jawa Timur', '60298', 'Indonesia', '081283459001', '', '', '', 'susanto@gmail.com', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000032010201540.jpg', '0', '', '1-1301', '2015-07-26', '1', '0', 'demo', '2015-07-26 00:00:00', '2015-10-20 00:00:00', 'admin', '0', '', '1');
INSERT INTO `mst_customer_copy` VALUES ('CUST.000004', 'Surya', 'Laksmana', 'Jln. Kalimantan No 77', 'Surabaya', 'Jawa Timur', '60284', 'Indonesia', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000032607201503.jpg', '0', '', '1-1301', '2015-07-26', '1', '0', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '0', '', '1');
INSERT INTO `mst_customer_copy` VALUES ('tes213', 'Surya', 'Laksmana', 'Jln. Kalimantan No 77', 'Surabaya', 'Jawa Timur', '60284', 'Indonesia', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000032607201503.jpg', '0', '', '1-1301', '2015-07-26', '1', '0', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '0', '', '1');
INSERT INTO `mst_customer_copy` VALUES ('tes213', 'Surya', 'Laksmana', 'Jln. Kalimantan No 77', 'Surabaya', 'Jawa Timur', '60284', 'Indonesia', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Pelanggan/CUST.0000032607201503.jpg', '0', '', '1-1301', '2015-07-26', '1', '0', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '0', '', '1');
INSERT INTO `mst_customer_copy` VALUES ('tes213', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, '1-1301', null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', null, null, 'Demo Customer 00002', null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', null, null, 'Demo Customer 00002', null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', null, null, 'Demo Customer 00002', null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES (null, 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', null, null, 'Demo Customer 00002', null, null, null, null, null, null, null, null, null, null, null);
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 16:19:06', '2015-10-21 16:19:06', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 16:19:06', '2015-10-21 16:19:06', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 16:40:01', '2015-10-21 16:40:01', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 16:40:01', '2015-10-21 16:40:01', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 16:43:02', '2015-10-21 16:43:02', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '315686901', '315686901', '315686901', '315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 16:43:02', '2015-10-21 16:43:02', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:31:45', '2015-10-21 17:31:45', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:31:45', '2015-10-21 17:31:45', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:34:07', '2015-10-21 17:34:07', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:34:07', '2015-10-21 17:34:07', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000005', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:42:49', '2015-10-21 17:42:49', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000006', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:42:49', '2015-10-21 17:42:49', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000007', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:43:11', '2015-10-21 17:43:11', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000008', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:43:11', '2015-10-21 17:43:11', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000009', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:57:23', '2015-10-21 17:57:23', 'import', '0', null, '0');
INSERT INTO `mst_customer_copy` VALUES ('C.2015000010', 'Rudi', 'Antonio', 'Jln Sumatra No 56', 'Surabaya', 'Jawa Timur', '60289', 'Indonesia', '0315686901', '0315686901', '0315686901', '0315686901', 'sales@yolk-it.com', 'www.yolk-it.com', '', '0', 'Demo Customer 00002', '1-1301', null, '2', '1', 'import', '2015-10-21 17:57:23', '2015-10-21 17:57:23', 'import', '0', null, '0');

-- ----------------------------
-- Table structure for mst_department
-- ----------------------------
DROP TABLE IF EXISTS `mst_department`;
CREATE TABLE `mst_department` (
  `department_id` int(11) NOT NULL AUTO_INCREMENT,
  `department_name` varchar(100) NOT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`department_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_department
-- ----------------------------
INSERT INTO `mst_department` VALUES ('1', 'Sales', '1', 'Sales Department', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:49', 'admin');
INSERT INTO `mst_department` VALUES ('2', 'Finance and Accounting', '1', 'Finance and Accounting Department', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');
INSERT INTO `mst_department` VALUES ('3', 'GA', '1', 'GA Department', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');
INSERT INTO `mst_department` VALUES ('4', 'Warehouse', '1', 'Warehouse Department', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');
INSERT INTO `mst_department` VALUES ('5', 'Purchasing', '1', 'Purchasing Department', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');

-- ----------------------------
-- Table structure for mst_employee
-- ----------------------------
DROP TABLE IF EXISTS `mst_employee`;
CREATE TABLE `mst_employee` (
  `id_employee` varchar(25) NOT NULL,
  `first_name` varchar(60) DEFAULT NULL,
  `last_name` varchar(60) DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  `city` varchar(120) DEFAULT NULL,
  `state` varchar(255) DEFAULT NULL,
  `postal_code` varchar(25) DEFAULT NULL,
  `country` varchar(120) DEFAULT NULL,
  `phone1` varchar(60) DEFAULT NULL,
  `phone2` varchar(60) DEFAULT NULL,
  `phone3` varchar(60) DEFAULT NULL,
  `fax` varchar(60) DEFAULT NULL,
  `email` varchar(120) DEFAULT NULL,
  `website` varchar(120) DEFAULT NULL,
  `photo` text,
  `target` double(19,4) NOT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `grade` varchar(120) DEFAULT NULL,
  `notes` text,
  `status` int(11) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `position_id` int(11) DEFAULT NULL,
  `department_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id_employee`,`target`),
  KEY `marketing_fkey1` (`id_account`),
  KEY `id_employee` (`id_employee`),
  KEY `department_id` (`department_id`),
  KEY `position_id` (`position_id`),
  CONSTRAINT `mst_employee_ibfk_1` FOREIGN KEY (`department_id`) REFERENCES `mst_department` (`department_id`) ON UPDATE CASCADE,
  CONSTRAINT `mst_employee_ibfk_2` FOREIGN KEY (`position_id`) REFERENCES `mst_position` (`position_id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_employee
-- ----------------------------
INSERT INTO `mst_employee` VALUES ('E.2015000003', 'Demo', '', '', '', '', '', '', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Karyawan/E.20150000032310201515.jpg', '0.0000', '', 'Senior', '', '0', 'demo', '2015-10-23 00:00:00', '2015-10-23 00:00:00', 'demo', '1', '2');
INSERT INTO `mst_employee` VALUES ('EMPY.000001', 'Andi', 'Suryawan', '', '', '', '', '', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Karyawan/EMPY.0000012310201523.jpg', '0.0000', '', 'Senior', '', '0', 'demo', '2015-10-23 00:00:00', '2015-10-23 00:00:00', 'demo', '1', '1');
INSERT INTO `mst_employee` VALUES ('EMPY.000002', 'Hendrik', 'Santoso', 'Jln. Raya Ketabang Kali No 90', 'Surabaya', 'Jawa Timur', '60292', 'Indonesia', '0315657003', '', '', '', 'hendrik_s@yahoo.com', '', 'E:/Image Accounting 2.6/Demo Karyawan/EMPY.0000021008201522.jpg', '0.0000', '', 'Senior', '', '0', 'admin', '2015-08-10 00:00:00', '2015-08-10 00:00:00', 'admin', '3', '2');

-- ----------------------------
-- Table structure for mst_expedition
-- ----------------------------
DROP TABLE IF EXISTS `mst_expedition`;
CREATE TABLE `mst_expedition` (
  `id_expedition` varchar(120) NOT NULL,
  `expedition_name` varchar(250) DEFAULT NULL,
  `from_city` varchar(120) DEFAULT NULL,
  `to_city` varchar(120) DEFAULT NULL,
  `expedition_rate` double DEFAULT NULL,
  `qty_perunit` double DEFAULT NULL,
  `notes` text,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_expedition`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_expedition
-- ----------------------------
INSERT INTO `mst_expedition` VALUES ('EXP1015000001', 'JNE', 'Surabaya', 'Jakarta', '24000', '1', 'JNE SBY-JKT', '2015-10-20 00:00:00', '2015-10-20 00:00:00', 'demo', 'demo');
INSERT INTO `mst_expedition` VALUES ('EXP1015000002', 'TIKI', 'Surabaya', 'Jakarta', '25000', '1', 'TIKI Express', '2015-10-20 00:00:00', '2015-10-20 00:00:00', 'demo', 'demo');
INSERT INTO `mst_expedition` VALUES ('EXP1015000003', 'POS Indonesia', 'Surabaya', 'Jakarta', '25000', '1', '', '2015-10-20 00:00:00', '2015-10-20 00:00:00', 'demo', 'demo');

-- ----------------------------
-- Table structure for mst_golaset
-- ----------------------------
DROP TABLE IF EXISTS `mst_golaset`;
CREATE TABLE `mst_golaset` (
  `id_golongan` varchar(30) NOT NULL,
  `masa_manfaat` double DEFAULT NULL,
  `rate_penyusutan` double DEFAULT NULL,
  `type` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_golongan`),
  KEY `type` (`type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_golaset
-- ----------------------------
INSERT INTO `mst_golaset` VALUES ('GOL1015000001', '4', '25', 'Golongan 1', 'admin', '2015-00-11 00:00:00', '2015-00-11 00:00:00', 'admin');
INSERT INTO `mst_golaset` VALUES ('GOL1015000002', '8', '12.5', 'Golongan 2', 'admin', '2015-10-12 00:00:00', '2015-10-12 00:00:00', 'admin');
INSERT INTO `mst_golaset` VALUES ('GOL1015000003', '16', '6.25', 'Golongan 3', 'admin', '2015-10-12 00:00:00', '2015-10-12 00:00:00', 'admin');
INSERT INTO `mst_golaset` VALUES ('GOL1015000004', '20', '5', 'Golongan 4', 'admin', '2015-10-12 00:00:00', '2015-10-12 00:00:00', 'admin');

-- ----------------------------
-- Table structure for mst_item
-- ----------------------------
DROP TABLE IF EXISTS `mst_item`;
CREATE TABLE `mst_item` (
  `id_item` varchar(25) NOT NULL,
  `item_name` varchar(60) DEFAULT NULL,
  `id_category` varchar(25) DEFAULT NULL,
  `id_jenis` varchar(25) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `main_unit` varchar(25) DEFAULT NULL,
  `buy_unit` varchar(25) DEFAULT NULL,
  `sell_unit` varchar(25) DEFAULT NULL,
  `flag_buy` int(1) DEFAULT NULL,
  `flag_sell` int(1) DEFAULT NULL,
  `flag_inv` int(1) DEFAULT NULL,
  `blob_image` text,
  `sell_price` double DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `id_warehouse` varchar(120) DEFAULT NULL,
  `max_qty` int(11) DEFAULT NULL,
  `min_qty` int(11) DEFAULT NULL,
  `notes` text,
  `length` float(18,2) DEFAULT NULL,
  `width` float(18,2) DEFAULT NULL,
  `height` float(18,2) DEFAULT NULL,
  `weight` float(18,2) DEFAULT NULL,
  `id_barcode` varchar(30) DEFAULT NULL,
  `id_account_cogs` varchar(60) DEFAULT NULL,
  `account_cogs` varchar(250) DEFAULT NULL,
  `min_qty_unit` varchar(30) DEFAULT NULL,
  `id_brand` varchar(255) DEFAULT NULL,
  `item_disc_qty` double DEFAULT NULL,
  `item_disc_unit` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id_item`),
  KEY `fk_category` (`id_category`),
  KEY `fk_jenis` (`id_jenis`),
  KEY `fk_account` (`id_account`),
  KEY `fk_main_unit` (`main_unit`),
  KEY `id_brand` (`id_brand`),
  CONSTRAINT `fk_account` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE,
  CONSTRAINT `fk_category` FOREIGN KEY (`id_category`) REFERENCES `mst_itemcat` (`mst_itemcat_id`) ON UPDATE CASCADE,
  CONSTRAINT `fk_jenis` FOREIGN KEY (`id_jenis`) REFERENCES `mst_itemjenis` (`mst_itemjenis_id`) ON UPDATE CASCADE,
  CONSTRAINT `fk_main_unit` FOREIGN KEY (`main_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE,
  CONSTRAINT `mst_item_ibfk_1` FOREIGN KEY (`id_brand`) REFERENCES `mst_itembrand` (`mst_itembrand_id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_item
-- ----------------------------
INSERT INTO `mst_item` VALUES ('0915000001', 'Spare Part 12045', 'SYFRZ0951', 'PVIRZ1741', '1-1201', 'pcs', 'pcs', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/09150000012310201529.jpg', '120000', 'demo', '2015-10-23 00:00:00', '2015-10-23 00:00:00', 'demo', 'WH001', '0', '2', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'BYYRY4659', '0', 'pcs');
INSERT INTO `mst_item` VALUES ('0915000002', 'Item Coba', 'BFCRV0739', 'ACRRV1021', '1-1201', 'pcs', 'pcs', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/09150000022909201552.jpg', '1800', 'admin', '2015-09-29 00:00:00', '2015-09-29 00:00:00', 'admin', 'WH001', '0', '0', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'NN', '10', 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV091158', 'Ballpoint Standard', 'BFCRV0739', 'ACRRV1021', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'C:/Users/Ari/Desktop/Image Accounting/PFCB-RVRV091158.jpg', '2000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '1', '', '10.00', '1.00', '1.00', '8.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV091750', 'Bazic Penghapus Pensil', 'PVERV0725', 'ACRRV1021', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/PFCB-RVRV0917502607201510.jpg', '1000', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', 'WH001', '0', '1', '', '3.00', '1.00', '1.00', '3.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', 'SVDRV0723', 'KFJSS5414', '1-1201', 'btl', 'btl', 'btl', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/PFCB-RVRV1106402607201510.jpg', '14000', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', 'WH001', '0', '3', '', '2.00', '3.00', '8.00', '0.50', null, '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV111453', 'Binder No 200 Penjepit Kertas', 'BZERV0719', 'ACRRV1021', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/PFCB-RVRV1114532607201523.jpg', '250', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', 'WH001', '0', '2', '', '0.00', '0.00', '0.00', '7.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV112142', 'Binder No 260 Penjepit Kertas', 'BZERV0719', 'ACRRV1021', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201511.jpg', '300', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '2', '', '0.00', '0.00', '0.00', '7.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV112337', 'Bindex Ordner Kecil', 'BZERV0707', 'ACRRV1021', '1-1201', 'pcs', 'pcs', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201517.jpg', '11000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '20.00', '5.00', '15.00', '500.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV112621', 'Buku Kwitansi 40lbr', 'SLIRV0700', 'ACRRV1021', '1-1201', 'pcs', 'pcs', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201508.jpg', '7500', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV113247', 'Buku Kwitansi 50lbr', 'SLIRV0700', 'ACRRV1021', '1-1201', 'pcs', 'pcs', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201530.jpg', '9000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV113349', 'Casablanca Body Spray 65ml - Perfume', 'PRISS0345', 'KFJSS5414', '1-1201', 'btl', 'pack', 'btl', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201535.jpg', '20000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', 'PRISS0345', 'KFJSS5414', '1-1201', 'btl', 'pack', 'btl', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201544.jpg', '21000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV113804', 'Casablanca Perfume Biru 65ml', 'PRISS0345', 'KFJSS5414', '1-1201', 'btl', 'pack', 'btl', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201524.jpg', '21000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV113959', 'Dream Donna Buku Gambar', 'BLBRV0709', 'ACRRV1021', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/PFCB-RVRV1139592909201549.jpg', '4000', 'admin', '2015-09-29 00:00:00', '2015-09-29 00:00:00', 'admin', 'WH001', '0', '1', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', '0', 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV114057', 'Executive Notebook 38lbr', 'BLBRV0709', 'ACRRV1021', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201545.jpg', '3000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '2', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV114222', 'Faber Castell Penghapus Pensil', 'PVERV0725', 'ACRRV1021', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201546.jpg', '1800', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '2', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV114429', 'ABC Baterai Alkaline AAA', 'BRKRV0706', 'ACRRV4350', '1-1201', 'pack', 'pack', 'pack', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201520.jpg', '15000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV114632', 'ABC Kecap Asin 140 ml - per botol', 'KVTRV0707', 'BLDRV4548', '1-1201', 'btl', 'pack', 'btl', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201515.jpg', '8500', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV114728', 'ABC Kecap Inggris 195 ml - per botol', 'KVTRV0707', 'BLDRV4548', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201513.jpg', '10800', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV114836', 'ABC Kecap Manis - per 10 sachet', 'KVTRV0707', 'BLDRV4548', '1-1201', 'pack', 'pack', 'pack', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201504.jpg', '6000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '2', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV114944', 'ABC Kecap Manis 100ml - per pouch', 'KVTRV0707', 'BLDRV4548', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201529.jpg', '6500', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV115113', 'ABC Kecap Manis 140ml - per botol', 'KVTRV0707', 'BLDRV4548', '1-1201', 'btl', 'pack', 'btl', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201509.jpg', '8500', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV115225', 'ABC Kecap Manis 275ml - per botol', 'KVTRV0707', 'BLDRV4548', '1-1201', 'btl', 'pack', 'btl', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201502.jpg', '14000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV115319', 'ABC Kecap Manis refil 600 ml - per pouch', 'KVTRV0707', 'BLDRV4548', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201506.jpg', '18000', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '3', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pcs', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV115705', 'ABC Kopi Mocca - per sachet', 'MZERV0748', 'MZERV5433', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201500.jpg', '1250', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '4', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RVRV115839', 'ABC Kopi Susu 32gr - kopi instan - per sachet', 'MZERV0748', 'MZERV5433', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1507201525.jpg', '1700', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RWRV084000', 'ABC Kopi Susu 32gr - kopi instan - per sachet', 'MZERV0748', 'MZERV5433', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1607201556.jpg', '1700', 'admin', '2015-07-16 00:00:00', '2015-07-16 00:00:00', 'admin', 'WH001', '0', '5', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RWRV084324', 'ABC Mie Soto Cup (Gelas) 60gr', 'MZVRV0746', 'MRBRV5506', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1607201511.jpg', '3500', 'admin', '2015-07-16 00:00:00', '2015-07-16 00:00:00', 'admin', 'WH001', '0', '2', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-RWRV084538', 'ABC Minuman Asam Jawa 250ml - kemasan kotak', 'MZERW0725', 'MZERV5433', '1-1201', 'pcs', 'pack', 'pcs', '0', '1', '0', 'E:/Image Accounting 2.6/Demo Barang/1607201513.jpg', '5000', 'admin', '2015-07-16 00:00:00', '2015-07-16 00:00:00', 'admin', 'WH001', '0', '1', '', '0.00', '0.00', '0.00', '0.00', null, '5-1101', 'Merchandise Inventory COGS', 'pack', 'NN', null, 'pcs');
INSERT INTO `mst_item` VALUES ('PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', 'PRISS0345', 'KFJSS5414', '1-1201', 'btl', 'btl', 'btl', '0', '1', '0', 'D:/New folder/PFCB-SSRV115509.jpg', '27500', 'admin', '2015-07-15 00:00:00', '2015-07-15 00:00:00', 'admin', 'WH001', '0', '100', '', '0.00', '0.00', '0.00', '0.00', '', '5-1101', 'Merchandise Inventory COGS', 'btl', 'NN', null, 'pcs');

-- ----------------------------
-- Table structure for mst_itembrand
-- ----------------------------
DROP TABLE IF EXISTS `mst_itembrand`;
CREATE TABLE `mst_itembrand` (
  `mst_itembrand_id` varchar(25) NOT NULL,
  `mst_itembrand_nm` varchar(120) DEFAULT NULL,
  `description` text,
  `disc` double DEFAULT NULL,
  PRIMARY KEY (`mst_itembrand_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_itembrand
-- ----------------------------
INSERT INTO `mst_itembrand` VALUES ('BYYRY4659', 'BHHK', '', '5');
INSERT INTO `mst_itembrand` VALUES ('IEURY4645', 'Indospring', '', '2');
INSERT INTO `mst_itembrand` VALUES ('NN', 'Non Category', 'Tanpa Kategori', '2');

-- ----------------------------
-- Table structure for mst_itemcat
-- ----------------------------
DROP TABLE IF EXISTS `mst_itemcat`;
CREATE TABLE `mst_itemcat` (
  `mst_itemcat_id` varchar(25) NOT NULL,
  `mst_itemjenis_id` varchar(25) DEFAULT NULL,
  `mst_itemcat_nm` varchar(120) DEFAULT NULL,
  `description` text,
  `discount` double DEFAULT NULL,
  PRIMARY KEY (`mst_itemcat_id`),
  KEY `fk_itemjenis_id` (`mst_itemjenis_id`),
  CONSTRAINT `fk_itemjenis_id` FOREIGN KEY (`mst_itemjenis_id`) REFERENCES `mst_itemjenis` (`mst_itemjenis_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_itemcat
-- ----------------------------
INSERT INTO `mst_itemcat` VALUES ('BFCRV0739', 'ACRRV1021', 'Bolpoint', '', '4');
INSERT INTO `mst_itemcat` VALUES ('BLBRV0709', 'ACRRV1021', 'Buku', '', null);
INSERT INTO `mst_itemcat` VALUES ('BRKRV0706', 'ACRRV4350', 'Baterai', '', null);
INSERT INTO `mst_itemcat` VALUES ('BZERV0707', 'ACRRV1021', 'Binder dan Map', '', null);
INSERT INTO `mst_itemcat` VALUES ('BZERV0719', 'ACRRV1021', 'Binder', 'Penjepit Kertas', null);
INSERT INTO `mst_itemcat` VALUES ('KVIRV0718', 'ACRRV1021', 'Kertas', '', null);
INSERT INTO `mst_itemcat` VALUES ('KVTRV0707', 'BLDRV4548', 'Kecap', '', null);
INSERT INTO `mst_itemcat` VALUES ('MZERV0748', 'MZERV5433', 'Minuman Sachet', '', null);
INSERT INTO `mst_itemcat` VALUES ('MZERW0725', 'MZERV5433', 'Minuman Instant', '', null);
INSERT INTO `mst_itemcat` VALUES ('MZVRV0746', 'MRBRV5506', 'Mie Instant', '', null);
INSERT INTO `mst_itemcat` VALUES ('NN', 'NN', 'Non Category', 'Tanpa Kategori', '2');
INSERT INTO `mst_itemcat` VALUES ('PRISS0345', 'KFJSS5414', 'Parfum & Deodorant', '', null);
INSERT INTO `mst_itemcat` VALUES ('PVERV0725', 'ACRRV1021', 'Penghapus Pencil', '', null);
INSERT INTO `mst_itemcat` VALUES ('SLIRV0700', 'ACRRV1021', 'Surat Kwitansi dan Nota', '', null);
INSERT INTO `mst_itemcat` VALUES ('SVDRV0723', 'KFJSS5414', 'Semir Rambut', '', null);
INSERT INTO `mst_itemcat` VALUES ('SYFRZ0951', 'PVIRZ1741', 'Shock Breaker', '', '7');

-- ----------------------------
-- Table structure for mst_itemjenis
-- ----------------------------
DROP TABLE IF EXISTS `mst_itemjenis`;
CREATE TABLE `mst_itemjenis` (
  `mst_itemjenis_id` varchar(25) NOT NULL,
  `mst_itemjenis_nm` varchar(120) DEFAULT NULL,
  `description` text,
  `discount` double DEFAULT NULL,
  PRIMARY KEY (`mst_itemjenis_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_itemjenis
-- ----------------------------
INSERT INTO `mst_itemjenis` VALUES ('ACRRV1021', 'Alat Tulis Kantor', '', '3');
INSERT INTO `mst_itemjenis` VALUES ('ACRRV4350', 'Alat Kelistrikan', '', null);
INSERT INTO `mst_itemjenis` VALUES ('BLDRV4548', 'Bumbu Masakan', '', null);
INSERT INTO `mst_itemjenis` VALUES ('KFJSS5414', 'Kosmetik', '', null);
INSERT INTO `mst_itemjenis` VALUES ('MRBRV5506', 'Makanan', '', null);
INSERT INTO `mst_itemjenis` VALUES ('MZERV5433', 'Minuman', '', null);
INSERT INTO `mst_itemjenis` VALUES ('NN', 'Non Category', 'Tanpa Kategori', '2');
INSERT INTO `mst_itemjenis` VALUES ('PVIRZ1741', 'Per Truck', '', '5');

-- ----------------------------
-- Table structure for mst_item_disc
-- ----------------------------
DROP TABLE IF EXISTS `mst_item_disc`;
CREATE TABLE `mst_item_disc` (
  `id_item` varchar(60) DEFAULT NULL,
  `id_item_disc` varchar(60) DEFAULT NULL,
  `qty` double DEFAULT NULL,
  `id_unit` varchar(255) DEFAULT NULL,
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `mst_item_disc_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `mst_item_disc_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_item_disc
-- ----------------------------
INSERT INTO `mst_item_disc` VALUES ('0915000002', 'PFCB-RVRV113959', '1', 'pcs');
INSERT INTO `mst_item_disc` VALUES ('0915000002', 'PFCB-RVRV091158', '2', 'pcs');

-- ----------------------------
-- Table structure for mst_jenis_aset
-- ----------------------------
DROP TABLE IF EXISTS `mst_jenis_aset`;
CREATE TABLE `mst_jenis_aset` (
  `id_jenis_aset` int(30) NOT NULL AUTO_INCREMENT,
  `nm_jenis_aset` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_jenis_aset`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_jenis_aset
-- ----------------------------

-- ----------------------------
-- Table structure for mst_marketing
-- ----------------------------
DROP TABLE IF EXISTS `mst_marketing`;
CREATE TABLE `mst_marketing` (
  `id_marketing` bigint(20) NOT NULL AUTO_INCREMENT,
  `id_employee` varchar(60) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_marketing`),
  KEY `id_employee` (`id_employee`),
  CONSTRAINT `mst_marketing_ibfk_1` FOREIGN KEY (`id_employee`) REFERENCES `mst_employee` (`id_employee`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_marketing
-- ----------------------------
INSERT INTO `mst_marketing` VALUES ('1', 'EMPY.000001', 'admin', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin');

-- ----------------------------
-- Table structure for mst_position
-- ----------------------------
DROP TABLE IF EXISTS `mst_position`;
CREATE TABLE `mst_position` (
  `position_id` int(11) NOT NULL AUTO_INCREMENT,
  `position_name` varchar(100) NOT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`position_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_position
-- ----------------------------
INSERT INTO `mst_position` VALUES ('1', 'Staff', '1', 'Non Management', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');
INSERT INTO `mst_position` VALUES ('2', 'Supervisor', '1', 'Low Management', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');
INSERT INTO `mst_position` VALUES ('3', 'Unit Manager', '1', 'Middle Management', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');
INSERT INTO `mst_position` VALUES ('4', 'Director', '1', 'Top Management', 'admin', '2014-10-20 18:22:44', '2014-10-20 18:22:44', 'admin');

-- ----------------------------
-- Table structure for mst_service
-- ----------------------------
DROP TABLE IF EXISTS `mst_service`;
CREATE TABLE `mst_service` (
  `id_service` varchar(25) NOT NULL,
  `service_name` varchar(60) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `price` double DEFAULT NULL,
  `senior_commission` double DEFAULT NULL,
  `junior_commission` double DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_service`),
  KEY `service_fkey1` (`id_account`),
  CONSTRAINT `mst_service_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_service
-- ----------------------------
INSERT INTO `mst_service` VALUES ('BFERX0530', 'bongkar pasang per', '4-1201', '30000', '0', '0', 'admin', '2015-09-17 00:00:00', '2015-09-17 00:00:00', 'admin');
INSERT INTO `mst_service` VALUES ('JRJTQ5914', 'Jasa Perbaikan Aksesoris', '4-1201', '25000', '0', '0', 'admin', '2015-04-30 00:00:00', '2015-04-30 00:00:00', 'admin');

-- ----------------------------
-- Table structure for mst_setcurrency
-- ----------------------------
DROP TABLE IF EXISTS `mst_setcurrency`;
CREATE TABLE `mst_setcurrency` (
  `id_currency` varchar(15) NOT NULL,
  `convert_value` double DEFAULT NULL,
  `id_currencydef` varchar(15) NOT NULL,
  `notes` varchar(120) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_setcurrency
-- ----------------------------
INSERT INTO `mst_setcurrency` VALUES ('IDR', '1', 'IDR', 'Mata Uang Rupiah', 'admin', '2014-01-01 00:00:00', 'admin', '2014-01-01 00:00:00');
INSERT INTO `mst_setcurrency` VALUES ('$US', '13000', 'IDR', 'Mata Uang Dollar Amerika\r\n', 'admin', '2014-05-30 00:00:00', 'admin', '2014-05-30 00:00:00');

-- ----------------------------
-- Table structure for mst_setunit
-- ----------------------------
DROP TABLE IF EXISTS `mst_setunit`;
CREATE TABLE `mst_setunit` (
  `id_item` varchar(60) DEFAULT NULL,
  `id_unit` varchar(15) NOT NULL,
  `qty` double DEFAULT NULL,
  `notes` varchar(120) DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `mst_setunit_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `mst_setunit_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_setunit
-- ----------------------------
INSERT INTO `mst_setunit` VALUES ('PFCB-SSRV115509', 'btl', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV091158', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV112337', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV112621', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113247', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113349', 'btl', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114057', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114222', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114429', 'pack', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114836', 'pack', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114944', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV115113', 'btl', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV115225', 'btl', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV115319', 'pcs', '1', '', 'admin', '2015-07-15 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RWRV084000', 'pcs', '1', '', 'admin', '2015-07-16 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113644', 'btl', '1', 'Satuan Botol', 'admin', '2015-07-25 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113644', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-25 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113804', 'btl', '1', 'Satuan Botol', 'admin', '2015-07-25 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113804', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-25 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV091750', 'pack', '12', 'Satuan Small Pack', 'admin', '2015-07-25 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV111453', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV112142', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV112142', 'pcs', '1', 'Satuan Pieces\r\n', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113959', 'pack', '12', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114632', 'btl', '1', 'Satuan Botol', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114632', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114728', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV114728', 'pcs', '1', 'Satuan Pieces\r\n', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV115705', 'pack', '10', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV115705', 'pcs', '1', 'Satuan Pieces\r\n', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV115839', 'pack', '10', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV115839', 'pcs', '1', 'Satuan Pieces\r\n', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RWRV084324', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RWRV084324', 'pcs', '1', 'Satuan Pieces\r\n', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RWRV084538', 'pack', '24', 'Satuan Small Pack', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RWRV084538', 'pcs', '1', 'Satuan Pieces\r\n', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV111453', 'pcs', '1', '', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV091750', 'pcs', '1', '', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV110640', 'btl', '1', '', 'admin', '2015-07-26 00:00:00');
INSERT INTO `mst_setunit` VALUES ('PFCB-RVRV113959', 'pcs', '1', '', 'admin', '2015-09-29 00:00:00');
INSERT INTO `mst_setunit` VALUES ('0915000002', 'pcs', '1', '', 'admin', '2015-09-29 00:00:00');
INSERT INTO `mst_setunit` VALUES ('0915000001', 'pcs', '1', '', 'demo', '2015-10-23 00:00:00');

-- ----------------------------
-- Table structure for mst_standard_cost
-- ----------------------------
DROP TABLE IF EXISTS `mst_standard_cost`;
CREATE TABLE `mst_standard_cost` (
  `id_cost` varchar(30) NOT NULL,
  `cost_name` varchar(120) DEFAULT NULL,
  `cost_def` double DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  `notes` text,
  `id_account` varchar(30) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_cost`),
  KEY `id_account` (`id_account`),
  CONSTRAINT `mst_standard_cost_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_standard_cost
-- ----------------------------

-- ----------------------------
-- Table structure for mst_supplier
-- ----------------------------
DROP TABLE IF EXISTS `mst_supplier`;
CREATE TABLE `mst_supplier` (
  `id_supplier` varchar(25) NOT NULL,
  `first_name` varchar(60) DEFAULT NULL,
  `last_name` varchar(60) DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  `city` varchar(120) DEFAULT NULL,
  `state` varchar(255) DEFAULT NULL,
  `postal_code` varchar(25) DEFAULT NULL,
  `country` varchar(120) DEFAULT NULL,
  `phone1` varchar(60) DEFAULT NULL,
  `phone2` varchar(60) DEFAULT NULL,
  `phone3` varchar(60) DEFAULT NULL,
  `fax` varchar(60) DEFAULT NULL,
  `email` varchar(120) DEFAULT NULL,
  `website` varchar(120) DEFAULT NULL,
  `photo` text,
  `id_account` varchar(25) DEFAULT NULL,
  `notes` text,
  `contact_person` varchar(120) DEFAULT NULL,
  `credit_limit` double DEFAULT NULL,
  `def_due_date` date DEFAULT NULL,
  `def_payment_method` int(11) DEFAULT NULL,
  `status` varchar(11) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `ap_balance` double(19,0) DEFAULT NULL,
  `flag_credit_limit` int(11) DEFAULT NULL,
  PRIMARY KEY (`id_supplier`),
  KEY `supplier_fkey1` (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_supplier
-- ----------------------------
INSERT INTO `mst_supplier` VALUES ('SUPP.000001', 'UD Jaya', 'Lestari', 'Jln. Rungkut Tengah No 99', 'Surabaya', 'Jawa Timur', '', '', '', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Supplier/SUPP.0000012310201536.jpg', '2-1101', '', 'Andik', '0', '2015-04-10', '2', '0', 'demo', '2015-10-23 00:00:00', '2015-10-23 00:00:00', 'demo', '5400000', '1');
INSERT INTO `mst_supplier` VALUES ('SUPP.000002', 'CV Arum Jaya', '', 'Jln. Sukodono no 90', 'Sidoarjo', 'Jawa Timur', '61789', 'Indonesia', '031785403', '', '', '', '', '', 'E:/Image Accounting 2.6/Demo Supplier/SUPP.0000022310201558.jpg', '2-1101', '', 'Rahmat', '0', '2015-07-21', '2', '0', 'demo', '2015-10-23 00:00:00', '2015-10-23 00:00:00', 'demo', '0', '1');
INSERT INTO `mst_supplier` VALUES ('SUPP.000003', 'CV. Adisurya', 'Makmur', 'Jln. Pahlawan No 89', 'Surabaya', 'Jawa Timur', '60298', 'Indonesia', '0315678400', '', '', '0315678401', 'adisurya@gmail.com', 'www.adisurya_makmur.com', 'E:/Image Accounting 2.6/Demo Supplier/SUPP.0000031910201533.jpg', '2-1101', 'Supplier 3', 'Agus', '0', '2015-08-10', '1', '0', 'demo', '2015-10-19 00:00:00', '2015-10-19 00:00:00', 'demo', '0', '1');

-- ----------------------------
-- Table structure for mst_unit
-- ----------------------------
DROP TABLE IF EXISTS `mst_unit`;
CREATE TABLE `mst_unit` (
  `id_unit` varchar(15) NOT NULL DEFAULT '',
  `unit` varchar(60) DEFAULT NULL,
  `notes` varchar(120) DEFAULT NULL,
  `flag_default` smallint(1) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id_unit`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_unit
-- ----------------------------
INSERT INTO `mst_unit` VALUES ('btl', 'Botol', 'Satuan Botol', '0', 'admin', '2015-02-10 00:00:00', 'admin', '2015-02-10 00:00:00');
INSERT INTO `mst_unit` VALUES ('dus', 'Kardus', 'Satuan Kardus', '0', 'admin', '2014-09-27 00:00:00', 'admin', '2014-09-27 00:00:00');
INSERT INTO `mst_unit` VALUES ('ltr', 'Liter', 'Satuan Volume', '0', 'admin', '2015-03-05 00:00:00', 'admin', '2015-03-05 00:00:00');
INSERT INTO `mst_unit` VALUES ('m2', 'Meter Persegi', 'Satuan Panjang Material', '0', 'admin', '2015-01-14 00:00:00', 'admin', '2015-01-14 00:00:00');
INSERT INTO `mst_unit` VALUES ('pack', 'Package', 'Satuan Small Pack', '0', 'admin', '2014-09-27 00:00:00', 'admin', '2014-09-27 00:00:00');
INSERT INTO `mst_unit` VALUES ('pcs', 'Pieces', 'Satuan Pieces\r\n', '0', 'admin', '2014-09-26 00:00:00', 'admin', '2014-09-26 00:00:00');
INSERT INTO `mst_unit` VALUES ('Unit', 'Unit', 'Satuan Default', '1', 'admin', '2014-09-26 00:00:00', 'admin', '2014-09-26 00:00:00');

-- ----------------------------
-- Table structure for mst_user
-- ----------------------------
DROP TABLE IF EXISTS `mst_user`;
CREATE TABLE `mst_user` (
  `username` varchar(25) NOT NULL,
  `password` varchar(25) DEFAULT NULL,
  `id_employee` varchar(25) DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `flag_active` int(11) DEFAULT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_user
-- ----------------------------
INSERT INTO `mst_user` VALUES ('admin', 'RST', 'MKTG.000001', 'admin', '2014-10-21 00:00:00', 'admin', '2014-10-21 00:00:00', '1');
INSERT INTO `mst_user` VALUES ('Andi', 'RST', 'EMPY.000001', 'admin', '2015-08-18 00:00:00', 'admin', '2015-08-18 00:00:00', '1');
INSERT INTO `mst_user` VALUES ('demo', 'RST', 'E.2015000003', 'admin', '2015-10-02 00:00:00', 'admin', '2015-10-02 00:00:00', '1');
INSERT INTO `mst_user` VALUES ('Hendrik', 'RST', 'EMPY.000002', 'admin', '2015-08-18 00:00:00', 'admin', '2015-08-18 00:00:00', '1');
INSERT INTO `mst_user` VALUES ('import', 'RST', 'MKTG.000001', 'admin', '2014-10-21 00:00:00', 'admin', '2014-10-21 00:00:00', '1');

-- ----------------------------
-- Table structure for mst_warehouse
-- ----------------------------
DROP TABLE IF EXISTS `mst_warehouse`;
CREATE TABLE `mst_warehouse` (
  `id_warehouse` varchar(25) NOT NULL DEFAULT '',
  `warehouse_name` varchar(60) DEFAULT NULL,
  `qty_max` varchar(30) DEFAULT NULL,
  `unit_max` varchar(15) DEFAULT NULL,
  `address` varchar(200) DEFAULT NULL,
  `phone` varchar(120) DEFAULT NULL,
  `city` varchar(200) DEFAULT NULL,
  `notes` text,
  `flag_nonactive` smallint(1) DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `is_outlet` int(1) DEFAULT NULL,
  PRIMARY KEY (`id_warehouse`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of mst_warehouse
-- ----------------------------
INSERT INTO `mst_warehouse` VALUES ('OT001', 'Outlet Surabaya-Gubeng', 'Big', '', 'Jln. Gubang Kertajaya No 90', '08193453548', 'Surabaya', '', '0', 'admin', '2015-03-23 00:00:00', 'admin', '2015-03-23 00:00:00', '1');
INSERT INTO `mst_warehouse` VALUES ('WH001', 'Default Warehouse', 'Big', 'pcs', 'Jln. Kalimantan No 89', '0319888300', 'Surabaya', 'Gudang Utama', '0', 'admin', '2015-03-23 00:00:00', 'admin', '2015-03-23 00:00:00', '0');

-- ----------------------------
-- Table structure for neraca_lajur_temp
-- ----------------------------
DROP TABLE IF EXISTS `neraca_lajur_temp`;
CREATE TABLE `neraca_lajur_temp` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `parent_head` varchar(255) DEFAULT NULL,
  `account_parent_head` varchar(255) DEFAULT NULL,
  `parent_head_1` varchar(255) DEFAULT NULL,
  `account_parent_head_1` varchar(255) DEFAULT NULL,
  `bdebet` double DEFAULT NULL,
  `bkredit` double DEFAULT NULL,
  `debet` double DEFAULT NULL,
  `kredit` double DEFAULT NULL,
  `edebet` double DEFAULT NULL,
  `ekredit` double DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of neraca_lajur_temp
-- ----------------------------
INSERT INTO `neraca_lajur_temp` VALUES ('1-1101', 'Main Cash', '1-1100', 'Cash/Bank', '1-1000', 'Current Assets', '1-0000', 'Assets', '20000000', '0', '980000', '0', '20980000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1102', 'Petty Cash', '1-1100', 'Cash/Bank', '1-1000', 'Current Assets', '1-0000', 'Assets', '50000', '0', '0', '0', '50000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1103', 'Mandiri Bank', '1-1100', 'Cash/Bank', '1-1000', 'Current Assets', '1-0000', 'Assets', '150000000', '0', '0', '0', '150000000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1104', 'BCA Bank', '1-1100', 'Cash/Bank', '1-1000', 'Current Assets', '1-0000', 'Assets', '200000000', '0', '0', '40629660', '159370340', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1105', 'BNI Bank', '1-1100', 'Cash/Bank', '1-1000', 'Current Assets', '1-0000', 'Assets', '50000000', '0', '18022500', '0', '68022500', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1199', 'Cashier Cash', '1-1100', 'Cash/Bank', '1-1000', 'Current Assets', '1-0000', 'Assets', '2000000', '0', '110700', '0', '2110700', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1201', 'Merchandise Inventory', '1-1200', 'Inventory', '1-1000', 'Current Assets', '1-0000', 'Assets', '2220000', '0', '22411309', '0', '24631309', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1299', 'Miscellanous Inventory', '1-1200', 'Inventory', '1-1000', 'Current Assets', '1-0000', 'Assets', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1301', 'Account Receivables', '1-1300', 'Trade Bill', '1-1000', 'Current Assets', '1-0000', 'Assets', '4000000', '0', '894675', '0', '4894675', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1401', 'Consultant Payment', '1-1400', 'Prepaid Expenses', '1-1000', 'Current Assets', '1-0000', 'Assets', '0', '0', '5920000', '0', '5920000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1499', 'Others Prepaid', '1-1400', 'Prepaid Expenses', '1-1000', 'Current Assets', '1-0000', 'Assets', '0', '0', '4500000', '0', '4500000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1501', 'VAT IN', '1-1500', 'Prepaid VAT', '1-1000', 'Current Assets', '1-0000', 'Assets', '0', '0', '2874600', '0', '2874600', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-1599', 'Prepaid Other Tax', '1-1500', 'Prepaid VAT', '1-1000', 'Current Assets', '1-0000', 'Assets', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2101', 'Land', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '2000000000', '0', '0', '0', '2000000000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2102', 'Building', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '500000000', '0', '0', '0', '500000000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2103', 'Building Accumulated Depreciation', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2104', 'Office Equipment', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '150000000', '0', '0', '0', '150000000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2105', 'Office Equip Accumulated Depr', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '14758000', '0', '0', '256000', '14502000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2106', 'Vehicles', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '750000000', '0', '0', '0', '750000000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2107', 'Vehicles Accumulated Depreciation', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '34774200', '0', '0', '0', '34774200', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2198', 'Other Fixed Assets', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('1-2199', 'Other FA Accumulated Depreciation', '1-2100', 'Land & Building', '1-2000', 'Fixed Assets', '1-0000', 'Assets', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('2-1101', 'Account Payable', '2-1100', 'Trade Payable', '2-1000', 'Short Term Liabilities', '2-0000', 'Liabilities', '0', '4400000', '0', '14621000', '0', '19021000');
INSERT INTO `neraca_lajur_temp` VALUES ('2-1102', 'VAT OUT', '2-1100', 'Trade Payable', '2-1000', 'Short Term Liabilities', '2-0000', 'Liabilities', '0', '0', '0', '78834', '0', '78834');
INSERT INTO `neraca_lajur_temp` VALUES ('2-1201', 'BCA Payable', '2-1200', 'Bank Payable', '2-1000', 'Short Term Liabilities', '2-0000', 'Liabilities', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('2-2101', 'BCA Payable', '2-2100', 'Bank Payable', '2-2000', 'Long Term Liabilities', '2-0000', 'Liabilities', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('3-1101', 'Paid-Up Capital', '3-1100', 'Owners Capital', '3-1000', 'Authorized Capital', '3-0000', 'Capital', '0', '3871693000', '0', '0', '0', '3871693000');
INSERT INTO `neraca_lajur_temp` VALUES ('3-1102', 'Prive', '3-1100', 'Owners Capital', '3-1000', 'Authorized Capital', '3-0000', 'Capital', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('3-1199', 'Profit-Loss Summary', '3-1100', 'Owners Capital', '3-1000', 'Authorized Capital', '3-0000', 'Capital', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1101', 'Product Sales', '4-1100', 'Sales', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '0', '801268', '0', '801268');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1102', 'Purchase Discount', '4-1100', 'Sales', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1103', 'Sales Discount', '4-1100', 'Sales', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1104', 'Account Payable Payment Disc', '4-1100', 'Sales', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '0', '131890', '0', '131890');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1105', 'Account Receivable Payment Disc', '4-1100', 'Sales', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '0', '550', '-550', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1201', 'Service Revenues', '4-1200', 'Operational Revenues', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '0', '103200', '0', '103200');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1202', 'Service Revenues Discount', '4-1200', 'Operational Revenues', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '32927', '0', '32927', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('4-1203', 'Other Revenues', '4-1200', 'Operational Revenues', '4-1000', 'Operational Income', '4-0000', 'Income', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('4-2101', 'Bank Interest Revenues', '4-2100', 'Non Operational Revenues', '4-2000', 'Non Operational Income', '4-0000', 'Income', '0', '0', '0', '56000', '0', '56000');
INSERT INTO `neraca_lajur_temp` VALUES ('4-2102', 'Exchange Rate Revenue', '4-2100', 'Non Operational Revenues', '4-2000', 'Non Operational Income', '4-0000', 'Income', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('5-1101', 'Merchandise Inventory COGS', '5-1100', 'Inventory COGS', '5-1000', 'Cost Of Goods Sold', '5-0000', 'Cost Of Goods', '0', '0', '584691', '0', '584691', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('5-1199', 'Other Inventory COGS', '5-1100', 'Inventory COGS', '5-1000', 'Cost Of Goods Sold', '5-0000', 'Cost Of Goods', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1101', 'Electricity, Phone & Water Expense', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1102', 'Office Supplies Expense', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1103', 'Tax Expense', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1104', 'Building Depreciation Expense', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1105', 'Vehicles Depreciation Expense', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1106', 'Equipment Depreciation Expense', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '256000', '0', '256000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1107', 'Freight', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '10000', '0', '10000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1199', 'Other Adm & GA Expense', '6-1100', 'Adm & GA Expenses', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '31000', '0', '31000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1201', 'Advertising & Promotion Expense', '6-1200', 'Sales & Marketing Expense', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '50000', '0', '50000', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1202', 'Commission Expense', '6-1200', 'Sales & Marketing Expense', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-1299', 'Other Marketing Expense', '6-1200', 'Sales & Marketing Expense', '6-1000', 'Operational Expenses', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');
INSERT INTO `neraca_lajur_temp` VALUES ('6-2101', 'Exchange Rate Expense', '6-2100', 'Non Operational Cost', '6-2000', 'Non Operational Expense', '6-0000', 'Expenses', '0', '0', '0', '0', '0', '0');

-- ----------------------------
-- Table structure for ref_pay_method
-- ----------------------------
DROP TABLE IF EXISTS `ref_pay_method`;
CREATE TABLE `ref_pay_method` (
  `ref_status_id` int(11) NOT NULL,
  `ref_status_name` varchar(255) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`ref_status_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of ref_pay_method
-- ----------------------------
INSERT INTO `ref_pay_method` VALUES ('1', 'Cash', 'Pembayaran tunai pada setiap pembelian dan penjualan');
INSERT INTO `ref_pay_method` VALUES ('2', 'Credit', 'Pembayaran kredit pada setiap pembelian dan penjualan');

-- ----------------------------
-- Table structure for ref_status_master
-- ----------------------------
DROP TABLE IF EXISTS `ref_status_master`;
CREATE TABLE `ref_status_master` (
  `ref_status_id` int(11) NOT NULL,
  `ref_status_name` varchar(255) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`ref_status_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of ref_status_master
-- ----------------------------
INSERT INTO `ref_status_master` VALUES ('0', 'Non Aktive', 'Status Master Tidak Aktif');
INSERT INTO `ref_status_master` VALUES ('1', 'Aktive', 'Status Master Aktif');

-- ----------------------------
-- Table structure for tbl_close_income
-- ----------------------------
DROP TABLE IF EXISTS `tbl_close_income`;
CREATE TABLE `tbl_close_income` (
  `id_account` varchar(60) DEFAULT NULL,
  `nominal` double DEFAULT NULL,
  `closed_date` date DEFAULT NULL,
  `closed_period` int(11) DEFAULT NULL,
  `closed_year` int(11) DEFAULT NULL,
  `id_account_income` varchar(60) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tbl_close_income
-- ----------------------------

-- ----------------------------
-- Table structure for temp_aktiva
-- ----------------------------
DROP TABLE IF EXISTS `temp_aktiva`;
CREATE TABLE `temp_aktiva` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `saldo` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of temp_aktiva
-- ----------------------------
INSERT INTO `temp_aktiva` VALUES ('1-1101', 'Main Cash', '1-1100', 'Cash/Bank', '20980000');
INSERT INTO `temp_aktiva` VALUES ('1-1102', 'Petty Cash', '1-1100', 'Cash/Bank', '50000');
INSERT INTO `temp_aktiva` VALUES ('1-1103', 'Mandiri Bank', '1-1100', 'Cash/Bank', '150000000');
INSERT INTO `temp_aktiva` VALUES ('1-1104', 'BCA Bank', '1-1100', 'Cash/Bank', '159370340');
INSERT INTO `temp_aktiva` VALUES ('1-1105', 'BNI Bank', '1-1100', 'Cash/Bank', '68022500');
INSERT INTO `temp_aktiva` VALUES ('1-1199', 'Cashier Cash', '1-1100', 'Cash/Bank', '2110700');
INSERT INTO `temp_aktiva` VALUES ('1-1201', 'Merchandise Inventory', '1-1200', 'Inventory', '24631309');
INSERT INTO `temp_aktiva` VALUES ('1-1299', 'Miscellanous Inventory', '1-1200', 'Inventory', '0');
INSERT INTO `temp_aktiva` VALUES ('1-1301', 'Account Receivables', '1-1300', 'Trade Bill', '4894675');
INSERT INTO `temp_aktiva` VALUES ('1-1401', 'Consultant Payment', '1-1400', 'Prepaid Expenses', '5920000');
INSERT INTO `temp_aktiva` VALUES ('1-1499', 'Others Prepaid', '1-1400', 'Prepaid Expenses', '4500000');
INSERT INTO `temp_aktiva` VALUES ('1-1501', 'VAT IN', '1-1500', 'Prepaid VAT', '2874600');
INSERT INTO `temp_aktiva` VALUES ('1-1599', 'Prepaid Other Tax', '1-1500', 'Prepaid VAT', '0');
INSERT INTO `temp_aktiva` VALUES ('1-2101', 'Land', '1-2100', 'Land & Building', '2000000000');
INSERT INTO `temp_aktiva` VALUES ('1-2102', 'Building', '1-2100', 'Land & Building', '500000000');
INSERT INTO `temp_aktiva` VALUES ('1-2103', 'Building Accumulated Depreciation', '1-2100', 'Land & Building', '0');
INSERT INTO `temp_aktiva` VALUES ('1-2104', 'Office Equipment', '1-2100', 'Land & Building', '150000000');
INSERT INTO `temp_aktiva` VALUES ('1-2105', 'Office Equip Accumulated Depr', '1-2100', 'Land & Building', '14262417');
INSERT INTO `temp_aktiva` VALUES ('1-2106', 'Vehicles', '1-2100', 'Land & Building', '750000000');
INSERT INTO `temp_aktiva` VALUES ('1-2107', 'Vehicles Accumulated Depreciation', '1-2100', 'Land & Building', '34774200');
INSERT INTO `temp_aktiva` VALUES ('1-2198', 'Other Fixed Assets', '1-2100', 'Land & Building', '0');
INSERT INTO `temp_aktiva` VALUES ('1-2199', 'Other FA Accumulated Depreciation', '1-2100', 'Land & Building', '0');

-- ----------------------------
-- Table structure for temp_aktiva_consol
-- ----------------------------
DROP TABLE IF EXISTS `temp_aktiva_consol`;
CREATE TABLE `temp_aktiva_consol` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `saldo` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of temp_aktiva_consol
-- ----------------------------

-- ----------------------------
-- Table structure for temp_income
-- ----------------------------
DROP TABLE IF EXISTS `temp_income`;
CREATE TABLE `temp_income` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `saldo` double DEFAULT NULL,
  `header_group` varchar(255) DEFAULT NULL,
  `company_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of temp_income
-- ----------------------------
INSERT INTO `temp_income` VALUES ('4-1101', 'Product Sales', '4-1100', 'Sales', '801268', '1', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('4-1104', 'Account Payable Payment Disc', '4-1100', 'Sales', '131890', '1', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('4-1105', 'Account Receivable Payment Disc', '4-1100', 'Sales', '550', '1', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('4-1201', 'Service Revenues', '4-1200', 'Operational Revenues', '103200', '1', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('4-1202', 'Service Revenues Discount', '4-1200', 'Operational Revenues', '-32927', '1', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('4-2101', 'Bank Interest Revenues', '4-2100', 'Non Operational Revenues', '56000', '1', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('5-1101', 'Merchandise Inventory COGS', '5-1100', 'Inventory COGS', '584691', '2', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('6-1106', 'Equipment Depreciation Expense', '6-1100', 'Adm & GA Expenses', '256000', '3', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('6-1107', 'Freight', '6-1100', 'Adm & GA Expenses', '10000', '3', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('6-1199', 'Other Adm & GA Expense', '6-1100', 'Adm & GA Expenses', '31000', '3', 'PT. Aneka Dagang');
INSERT INTO `temp_income` VALUES ('6-1201', 'Advertising & Promotion Expense', '6-1200', 'Sales & Marketing Expense', '-900000', '3', 'PT. Aneka Dagang');

-- ----------------------------
-- Table structure for temp_income_consol
-- ----------------------------
DROP TABLE IF EXISTS `temp_income_consol`;
CREATE TABLE `temp_income_consol` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `saldo` double DEFAULT NULL,
  `header_group` varchar(255) DEFAULT NULL,
  `company_name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of temp_income_consol
-- ----------------------------

-- ----------------------------
-- Table structure for temp_income_period
-- ----------------------------
DROP TABLE IF EXISTS `temp_income_period`;
CREATE TABLE `temp_income_period` (
  `period` int(11) NOT NULL,
  `years` int(11) NOT NULL,
  `nominal` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of temp_income_period
-- ----------------------------

-- ----------------------------
-- Table structure for temp_income_stats
-- ----------------------------
DROP TABLE IF EXISTS `temp_income_stats`;
CREATE TABLE `temp_income_stats` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `saldo` double DEFAULT NULL,
  `header_group` varchar(255) DEFAULT NULL,
  `company_name` varchar(255) DEFAULT NULL,
  `flag_revenue` int(11) DEFAULT NULL,
  `flag_expense` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of temp_income_stats
-- ----------------------------
INSERT INTO `temp_income_stats` VALUES ('4-1101', 'Product Sales', '4-1100', 'Sales', '801268', '1', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('4-1104', 'Account Payable Payment Disc', '4-1100', 'Sales', '131890', '1', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('4-1105', 'Account Receivable Payment Disc', '4-1100', 'Sales', '550', '1', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('4-1201', 'Service Revenues', '4-1200', 'Operational Revenues', '103200', '1', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('4-1202', 'Service Revenues Discount', '4-1200', 'Operational Revenues', '-32927', '1', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('4-2101', 'Bank Interest Revenues', '4-2100', 'Non Operational Revenues', '56000', '1', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('5-1101', 'Merchandise Inventory COGS', '5-1100', 'Inventory COGS', '584691', '2', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('6-1106', 'Equipment Depreciation Expense', '6-1100', 'Adm & GA Expenses', '256000', '3', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('6-1107', 'Freight', '6-1100', 'Adm & GA Expenses', '10000', '3', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('6-1199', 'Other Adm & GA Expense', '6-1100', 'Adm & GA Expenses', '31000', '3', 'PT. Aneka Dagang', null, null);
INSERT INTO `temp_income_stats` VALUES ('6-1201', 'Advertising & Promotion Expense', '6-1200', 'Sales & Marketing Expense', '-900000', '3', 'PT. Aneka Dagang', null, null);

-- ----------------------------
-- Table structure for temp_mutasi_stock
-- ----------------------------
DROP TABLE IF EXISTS `temp_mutasi_stock`;
CREATE TABLE `temp_mutasi_stock` (
  `nobukti` varchar(120) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `id_item` varchar(60) DEFAULT NULL,
  `item_name` varchar(250) DEFAULT NULL,
  `qty_in` int(11) DEFAULT NULL,
  `qty_out` int(11) DEFAULT NULL,
  `notes` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of temp_mutasi_stock
-- ----------------------------

-- ----------------------------
-- Table structure for temp_neraca
-- ----------------------------
DROP TABLE IF EXISTS `temp_neraca`;
CREATE TABLE `temp_neraca` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `bdebet` double DEFAULT NULL,
  `bkredit` double DEFAULT NULL,
  `debet` double DEFAULT NULL,
  `kredit` double DEFAULT NULL,
  `edebet` double DEFAULT NULL,
  `ekredit` double DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of temp_neraca
-- ----------------------------

-- ----------------------------
-- Table structure for temp_neraca_consol
-- ----------------------------
DROP TABLE IF EXISTS `temp_neraca_consol`;
CREATE TABLE `temp_neraca_consol` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `bdebet` double DEFAULT NULL,
  `bkredit` double DEFAULT NULL,
  `debet` double DEFAULT NULL,
  `kredit` double DEFAULT NULL,
  `edebet` double DEFAULT NULL,
  `ekredit` double DEFAULT NULL,
  PRIMARY KEY (`id_account`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of temp_neraca_consol
-- ----------------------------

-- ----------------------------
-- Table structure for temp_pasiva
-- ----------------------------
DROP TABLE IF EXISTS `temp_pasiva`;
CREATE TABLE `temp_pasiva` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `saldo` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of temp_pasiva
-- ----------------------------
INSERT INTO `temp_pasiva` VALUES ('2-1101', 'Account Payable', '2-1100', 'Trade Payable', '19021000');
INSERT INTO `temp_pasiva` VALUES ('2-1102', 'VAT OUT', '2-1100', 'Trade Payable', '78834');
INSERT INTO `temp_pasiva` VALUES ('2-1201', 'BCA Payable', '2-1200', 'Bank Payable', '0');
INSERT INTO `temp_pasiva` VALUES ('2-2101', 'BCA Payable', '2-2100', 'Bank Payable', '0');
INSERT INTO `temp_pasiva` VALUES ('3-1101', 'Paid-Up Capital', '3-1100', 'Owners Capital', '3871693000');
INSERT INTO `temp_pasiva` VALUES ('3-1102', 'Prive', '3-1100', 'Owners Capital', '0');
INSERT INTO `temp_pasiva` VALUES ('3-1199', 'Profit-Loss Summary', '3-1100', 'Owners Capital', '0');
INSERT INTO `temp_pasiva` VALUES ('3-5000', 'Laba Periode Berjalan', '3-5000', '', '1597907');

-- ----------------------------
-- Table structure for temp_pasiva_consol
-- ----------------------------
DROP TABLE IF EXISTS `temp_pasiva_consol`;
CREATE TABLE `temp_pasiva_consol` (
  `id_account` varchar(255) NOT NULL,
  `account_name` varchar(255) DEFAULT NULL,
  `parent` varchar(255) DEFAULT NULL,
  `account_parent` varchar(255) DEFAULT NULL,
  `saldo` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of temp_pasiva_consol
-- ----------------------------

-- ----------------------------
-- Table structure for trn_adjustjournal_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_adjustjournal_det`;
CREATE TABLE `trn_adjustjournal_det` (
  `journal_no` varchar(30) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `notes` text,
  `amount` double DEFAULT NULL,
  KEY `journal_det_fkey2` (`id_account`),
  KEY `journal_det_fkey3` (`journal_no`),
  CONSTRAINT `trn_adjustjournal_det_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_adjustjournal_det_ibfk_2` FOREIGN KEY (`journal_no`) REFERENCES `trn_adjustjournal_head` (`journal_no`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_adjustjournal_det
-- ----------------------------
INSERT INTO `trn_adjustjournal_det` VALUES ('ADJ/10-2015-00001', '6-1201', 'Koreksi Penerimaan ', '950000');
INSERT INTO `trn_adjustjournal_det` VALUES ('ADJ/10-2015-00001', '1-1105', 'Koreksi Penerimaan', '-950000');

-- ----------------------------
-- Table structure for trn_adjustjournal_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_adjustjournal_head`;
CREATE TABLE `trn_adjustjournal_head` (
  `journal_no` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `description` text,
  `total` double DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `id_currency` varchar(30) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`journal_no`),
  KEY `id_currency` (`id_currency`),
  CONSTRAINT `trn_adjustjournal_head_ibfk_1` FOREIGN KEY (`id_currency`) REFERENCES `mst_currency` (`id_currency`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_adjustjournal_head
-- ----------------------------
INSERT INTO `trn_adjustjournal_head` VALUES ('ADJ/10-2015-00001', '2015-10-14 00:00:00', 'Koreksi Penerimaan', '950000', 'demo', '2015-10-20 00:00:00', 'demo', '2015-10-20 00:00:00', 'IDR', '1');

-- ----------------------------
-- Table structure for trn_adjust_stock_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_adjust_stock_det`;
CREATE TABLE `trn_adjust_stock_det` (
  `no_adjust_stock` varchar(25) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` text,
  `positive` double(10,0) DEFAULT NULL,
  `negative` double(10,0) DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  KEY `trn_adjust_det_fkey1` (`no_adjust_stock`),
  KEY `trn_adjust_det_fkey2` (`id_item`),
  KEY `trn_adjust_stock_det_ibfk_3` (`id_unit`),
  CONSTRAINT `trn_adjust_stock_det_ibfk_1` FOREIGN KEY (`no_adjust_stock`) REFERENCES `trn_adjust_stock_head` (`no_adjust_stock`) ON UPDATE CASCADE,
  CONSTRAINT `trn_adjust_stock_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_adjust_stock_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_adjust_stock_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_adjust_stock_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_adjust_stock_head`;
CREATE TABLE `trn_adjust_stock_head` (
  `no_adjust_stock` varchar(25) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_warehouse` varchar(25) DEFAULT NULL,
  `total_adjust` double(10,0) DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_adjust_stock`),
  KEY `fk_id_warehouse_fkey` (`id_warehouse`),
  CONSTRAINT `fk_id_warehouse_fkey` FOREIGN KEY (`id_warehouse`) REFERENCES `mst_warehouse` (`id_warehouse`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_adjust_stock_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_asetbeli_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_asetbeli_det`;
CREATE TABLE `trn_asetbeli_det` (
  `id_asetbeli` varchar(15) DEFAULT NULL,
  `id_aset` varchar(25) DEFAULT NULL,
  `qty` double DEFAULT NULL,
  `nilai` double DEFAULT NULL,
  `id_coa` varchar(30) DEFAULT NULL,
  `id_golongan` varchar(30) DEFAULT NULL,
  `id_satuan` varchar(30) DEFAULT NULL,
  KEY `id_asetbeli` (`id_asetbeli`),
  KEY `id_aset` (`id_aset`),
  KEY `id_coa` (`id_coa`),
  KEY `id_golongan` (`id_golongan`),
  KEY `id_satuan` (`id_satuan`),
  CONSTRAINT `trn_asetbeli_det_ibfk_1` FOREIGN KEY (`id_asetbeli`) REFERENCES `trn_asetbeli_head` (`id_asetbeli`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetbeli_det_ibfk_2` FOREIGN KEY (`id_aset`) REFERENCES `mst_aset` (`id_aset`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetbeli_det_ibfk_3` FOREIGN KEY (`id_coa`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetbeli_det_ibfk_4` FOREIGN KEY (`id_golongan`) REFERENCES `mst_golaset` (`id_golongan`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetbeli_det_ibfk_5` FOREIGN KEY (`id_satuan`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_asetbeli_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_asetbeli_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_asetbeli_head`;
CREATE TABLE `trn_asetbeli_head` (
  `id_asetbeli` varchar(25) NOT NULL DEFAULT '',
  `date_trn` date DEFAULT NULL,
  `id_supplier` varchar(30) DEFAULT NULL,
  `notes` varchar(120) DEFAULT NULL,
  `nominal` double DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_asetbeli`),
  KEY `id_supplier` (`id_supplier`),
  KEY `id_asetbeli` (`id_asetbeli`),
  CONSTRAINT `trn_asetbeli_head_ibfk_1` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_asetbeli_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_asetkeluar_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_asetkeluar_det`;
CREATE TABLE `trn_asetkeluar_det` (
  `id_asetkeluar` varchar(60) NOT NULL DEFAULT '',
  `id_aset` varchar(30) DEFAULT NULL,
  `qty` varchar(30) DEFAULT NULL,
  `id_satuan` varchar(255) DEFAULT NULL,
  `ket` text,
  PRIMARY KEY (`id_asetkeluar`),
  KEY `id_asetkeluar` (`id_asetkeluar`) USING BTREE,
  KEY `id_aset` (`id_aset`) USING BTREE,
  KEY `id_satuan` (`id_satuan`) USING BTREE,
  CONSTRAINT `trn_asetkeluar_det_ibfk_1` FOREIGN KEY (`id_asetkeluar`) REFERENCES `trn_asetkeluar_head` (`id_asetkeluar`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetkeluar_det_ibfk_2` FOREIGN KEY (`id_aset`) REFERENCES `mst_aset` (`id_aset`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetkeluar_det_ibfk_3` FOREIGN KEY (`id_satuan`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_asetkeluar_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_asetkeluar_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_asetkeluar_head`;
CREATE TABLE `trn_asetkeluar_head` (
  `id_asetkeluar` varchar(60) NOT NULL DEFAULT '',
  `date_trn` date DEFAULT NULL,
  `notes` text,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_asetkeluar`),
  KEY `id_asetkeluar` (`id_asetkeluar`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_asetkeluar_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_asetmasuk_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_asetmasuk_det`;
CREATE TABLE `trn_asetmasuk_det` (
  `id_asetmasuk` varchar(30) NOT NULL DEFAULT '',
  `id_aset` varchar(30) DEFAULT NULL,
  `qty` varchar(30) DEFAULT NULL,
  `id_satuan` varchar(255) DEFAULT NULL,
  `ket` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_asetmasuk`),
  KEY `id_asetkeluar` (`id_asetmasuk`) USING BTREE,
  KEY `id_aset` (`id_aset`) USING BTREE,
  KEY `id_satuan` (`id_satuan`) USING BTREE,
  CONSTRAINT `trn_asetmasuk_det_ibfk_2` FOREIGN KEY (`id_aset`) REFERENCES `mst_aset` (`id_aset`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetmasuk_det_ibfk_3` FOREIGN KEY (`id_satuan`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE,
  CONSTRAINT `trn_asetmasuk_det_ibfk_4` FOREIGN KEY (`id_asetmasuk`) REFERENCES `trn_asetmasuk_head` (`id_asetmasuk`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_asetmasuk_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_asetmasuk_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_asetmasuk_head`;
CREATE TABLE `trn_asetmasuk_head` (
  `id_asetmasuk` varchar(25) NOT NULL DEFAULT '',
  `date_trn` date DEFAULT NULL,
  `notes` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`id_asetmasuk`),
  KEY `id_asetkeluar` (`id_asetmasuk`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_asetmasuk_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashbank_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashbank_det`;
CREATE TABLE `trn_cashbank_det` (
  `cashbank_no` varchar(30) NOT NULL,
  `id_account` varchar(30) DEFAULT NULL,
  `notes` text,
  `amount` double DEFAULT NULL,
  KEY `fk_cash_bank_no` (`cashbank_no`),
  CONSTRAINT `trn_cashbank_det_ibfk_1` FOREIGN KEY (`cashbank_no`) REFERENCES `trn_cashbank_head` (`cashbank_no`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashbank_det
-- ----------------------------
INSERT INTO `trn_cashbank_det` VALUES ('FRM/SPM/4-2015-00001', '1-1401', 'Consultant Fee Expenses', '6000000');
INSERT INTO `trn_cashbank_det` VALUES ('FRM/SPM/4-2015-00001', '1-1501', 'PPN 10%', '600000');
INSERT INTO `trn_cashbank_det` VALUES ('FRM/RCM/09-2015-00001', '6-1201', 'Refund Marketing Expenses', '900000');
INSERT INTO `trn_cashbank_det` VALUES ('FRM/RCM/09-2015-00001', '1-1401', 'Refund Prepaid Consulting Fee', '80000');
INSERT INTO `trn_cashbank_det` VALUES ('FRM/SPM/09-2015-00001', '1-1105', 'Pemindahbukuan Rekening BCA - BNI', '19000000');
INSERT INTO `trn_cashbank_det` VALUES ('FRM/SPM/09-2015-00001', '1-1499', 'Pembayaran Sewa Gedung', '4500000');

-- ----------------------------
-- Table structure for trn_cashbank_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashbank_head`;
CREATE TABLE `trn_cashbank_head` (
  `cashbank_no` varchar(30) NOT NULL,
  `id_account` varchar(30) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `total` double DEFAULT NULL,
  `notes` text,
  `flag_trans` varchar(2) DEFAULT NULL,
  `evidence_no` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `id_currency` varchar(30) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`cashbank_no`),
  KEY `fk_account_id` (`id_account`),
  KEY `id_currency` (`id_currency`),
  CONSTRAINT `trn_cashbank_head_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashbank_head_ibfk_2` FOREIGN KEY (`id_currency`) REFERENCES `mst_currency` (`id_currency`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashbank_head
-- ----------------------------
INSERT INTO `trn_cashbank_head` VALUES ('FRM/RCM/09-2015-00001', '1-1101', '2015-09-27', '980000', 'Demo Penerimaan Kas / Bank', 'KM', 'AD45343', 'admin', '2015-09-27 00:00:00', 'admin', '2015-09-27 00:00:00', 'IDR', '1');
INSERT INTO `trn_cashbank_head` VALUES ('FRM/SPM/09-2015-00001', '1-1104', '2015-09-27', '23500000', 'Demo Pengeluaran Kas / Bank', 'BK', '90123JJ', 'admin', '2015-09-27 00:00:00', 'admin', '2015-09-27 00:00:00', 'IDR', '1');
INSERT INTO `trn_cashbank_head` VALUES ('FRM/SPM/4-2015-00001', '1-1104', '2015-04-10', '6600000', 'Cash / Bank Disbursement Example', 'BK', 'Cheque GH-0568', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'IDR', '1');

-- ----------------------------
-- Table structure for trn_cashier_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_det`;
CREATE TABLE `trn_cashier_det` (
  `no_sales` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `disc_nom` double(19,0) DEFAULT NULL,
  `nominal_net` double(19,0) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `trn_sales_det_ibfk_1` (`no_sales`),
  KEY `trn_sales_det_ibfk_2` (`id_item`),
  KEY `trn_sales_det_ibfk_5` (`id_unit`),
  CONSTRAINT `trn_cashier_det_ibfk_1` FOREIGN KEY (`no_sales`) REFERENCES `trn_cashier_head` (`no_sales`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashier_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashier_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashier_discbrand_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_discbrand_det`;
CREATE TABLE `trn_cashier_discbrand_det` (
  `no_cashier` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `nom_disc` double NOT NULL,
  KEY `no_sales_order` (`no_cashier`),
  KEY `id_item` (`id_item`),
  CONSTRAINT `trn_cashier_discbrand_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_discbrand_det_ibfk_3` FOREIGN KEY (`no_cashier`) REFERENCES `trn_cashier_head` (`no_sales`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_discbrand_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashier_disccat_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_disccat_det`;
CREATE TABLE `trn_cashier_disccat_det` (
  `no_cashier` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `nom_disc` double NOT NULL,
  KEY `no_sales_order` (`no_cashier`),
  KEY `id_item` (`id_item`),
  CONSTRAINT `trn_cashier_disccat_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_disccat_det_ibfk_3` FOREIGN KEY (`no_cashier`) REFERENCES `trn_cashier_head` (`no_sales`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_disccat_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashier_discitem_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_discitem_det`;
CREATE TABLE `trn_cashier_discitem_det` (
  `no_cashier` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `qty` double NOT NULL,
  `id_unit` varchar(60) NOT NULL,
  KEY `no_sales_order` (`no_cashier`),
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `trn_cashier_discitem_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_discitem_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_discitem_det_ibfk_4` FOREIGN KEY (`no_cashier`) REFERENCES `trn_cashier_head` (`no_sales`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_discitem_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashier_disctype_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_disctype_det`;
CREATE TABLE `trn_cashier_disctype_det` (
  `no_cashier` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `nom_disc` double NOT NULL,
  KEY `no_sales_order` (`no_cashier`),
  KEY `id_item` (`id_item`),
  CONSTRAINT `trn_cashier_disctype_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_disctype_det_ibfk_3` FOREIGN KEY (`no_cashier`) REFERENCES `trn_cashier_head` (`no_sales`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_disctype_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashier_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_head`;
CREATE TABLE `trn_cashier_head` (
  `no_sales` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `customer` varchar(255) DEFAULT NULL,
  `cust_address` text,
  `cust_phone` varchar(255) DEFAULT NULL,
  `payment_method` int(11) DEFAULT NULL,
  `subtotal` double(19,4) DEFAULT NULL,
  `discount` double(19,4) DEFAULT NULL,
  `tax` double(19,4) DEFAULT NULL,
  `total` double(19,4) DEFAULT NULL,
  `term` int(11) DEFAULT NULL,
  `termpaydisc` int(11) DEFAULT NULL,
  `discpay` int(11) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `flag_member` int(1) DEFAULT NULL,
  `id_customer` varchar(120) DEFAULT NULL,
  `paid` double DEFAULT NULL,
  PRIMARY KEY (`no_sales`),
  KEY `trn_sales_head_ibfk_1` (`customer`),
  KEY `trn_sales_head_ibfk_3` (`payment_method`),
  CONSTRAINT `trn_cashier_head_ibfk_1` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_head
-- ----------------------------
INSERT INTO `trn_cashier_head` VALUES ('FRM/CSH/09-2015-00001', '2015-09-17 00:00:00', 'pak adi', '', '', '1', '28200.0000', '0.0000', '0.0000', '28200.0000', '0', '0', '0', 'demo kasir service', 'admin', '2015-09-17 00:00:00', 'admin', '2015-09-17 00:00:00', '0', '', '30000');
INSERT INTO `trn_cashier_head` VALUES ('FRM/CSH/4-2015-00001', '2015-04-30 00:00:00', 'Andika Ahmadi', 'Jln. Panjaitan No 90', ', , ', '1', '75000.0000', '0.0000', '10.0000', '82500.0000', '0', '0', '0', 'demo kasir penjualan jasa', 'admin', '2015-04-30 00:00:00', 'admin', '2015-04-30 00:00:00', '1', 'CUST.000001', '100000');

-- ----------------------------
-- Table structure for trn_cashier_return_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_return_det`;
CREATE TABLE `trn_cashier_return_det` (
  `no_sales_return` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  `no_sales` varchar(30) DEFAULT NULL,
  `disc_nom` double DEFAULT NULL,
  `nominal_net` double DEFAULT NULL,
  KEY `trn_sales_return_nosalesreturn` (`no_sales_return`),
  KEY `trn_sales_return_nosales` (`no_sales`),
  KEY `trn_sales_return_nosalesreturn_fkey3` (`id_item`),
  KEY `trn_sales_return_nosalesreturn_fkey4` (`id_unit`),
  CONSTRAINT `trn_cashier_return_det_ibfk_1` FOREIGN KEY (`no_sales`) REFERENCES `trn_cashier_head` (`no_sales`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_return_det_ibfk_2` FOREIGN KEY (`no_sales_return`) REFERENCES `trn_cashier_return_head` (`no_sales_return`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_return_det_ibfk_3` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_cashier_return_det_ibfk_4` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_return_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashier_return_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_return_head`;
CREATE TABLE `trn_cashier_return_head` (
  `no_sales_return` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `customer` varchar(250) DEFAULT NULL,
  `payment_method` int(25) DEFAULT NULL,
  `subtotal` double(19,4) DEFAULT NULL,
  `disc` double(19,4) DEFAULT NULL,
  `tax` double(19,4) DEFAULT NULL,
  `total` double(19,4) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  `id_warehouse` varchar(60) DEFAULT NULL,
  `customer_addr` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`no_sales_return`),
  KEY `trn_sales_return_id_customer_fkey` (`customer`),
  KEY `trn_sales_return_id_paymethod_fkey` (`payment_method`),
  CONSTRAINT `trn_cashier_return_head_ibfk_2` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_return_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashier_service_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashier_service_det`;
CREATE TABLE `trn_cashier_service_det` (
  `no_sales` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_service` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `disc_nom` double(19,0) DEFAULT NULL,
  `nominal_net` double(19,0) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `trn_sales_det_ibfk_1` (`no_sales`),
  KEY `trn_sales_det_ibfk_2` (`id_service`),
  KEY `trn_sales_det_ibfk_5` (`id_unit`),
  CONSTRAINT `trn_cashier_service_det_ibfk_1` FOREIGN KEY (`no_sales`) REFERENCES `trn_cashier_head` (`no_sales`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashier_service_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashier_service_det_ibfk_4` FOREIGN KEY (`id_service`) REFERENCES `mst_service` (`id_service`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashier_service_det
-- ----------------------------
INSERT INTO `trn_cashier_service_det` VALUES ('FRM/CSH/4-2015-00001', '1', 'JRJTQ5914', '', '3', 'Unit', '25000.0000', '75000.0000', '0', '75000', 'IDR');
INSERT INTO `trn_cashier_service_det` VALUES ('FRM/CSH/09-2015-00001', '1', 'BFERX0530', '', '1', 'Unit', '30000.0000', '30000.0000', '6', '28200', 'IDR');

-- ----------------------------
-- Table structure for trn_cashpurchase_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashpurchase_det`;
CREATE TABLE `trn_cashpurchase_det` (
  `no_purchase` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `trn_purchase_det_item_ibfk_1` (`id_item`),
  KEY `trn_purchase_det_ibfk_1` (`no_purchase`),
  KEY `trn_purchase_det_item_ibfk_4` (`id_unit`),
  CONSTRAINT `trn_cashpurchase_det_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashpurchase_det_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashpurchase_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashpurchase_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashpurchase_head`;
CREATE TABLE `trn_cashpurchase_head` (
  `no_purchase` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `no_purchase_order` varchar(30) DEFAULT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `payment_method` int(25) DEFAULT NULL,
  `payment_term_days` int(11) DEFAULT NULL,
  `disc_term_days` int(11) DEFAULT NULL,
  `disc_term_nominal` decimal(19,4) DEFAULT NULL,
  `subtotal` decimal(19,4) DEFAULT NULL,
  `freight` decimal(19,4) DEFAULT NULL,
  `tax` decimal(19,4) DEFAULT NULL,
  `disc` decimal(10,0) DEFAULT NULL,
  `total` decimal(19,4) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  PRIMARY KEY (`no_purchase`),
  KEY `trn_purchase_head_ibfk_1` (`no_purchase_order`),
  KEY `trn_purchase_head_ibfk_2` (`id_supplier`),
  KEY `trn_purchase_head_ibfk_3` (`payment_method`),
  CONSTRAINT `trn_cashpurchase_head_ibfk_1` FOREIGN KEY (`no_purchase_order`) REFERENCES `trn_purchase_order_head` (`no_purchase_order`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashpurchase_head_ibfk_2` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashpurchase_head_ibfk_3` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashpurchase_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashro_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashro_det`;
CREATE TABLE `trn_cashro_det` (
  `no_request_order` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `flag_status` int(11) DEFAULT NULL,
  `approve_date` datetime DEFAULT NULL,
  `approve_qty` int(11) DEFAULT NULL,
  `flag_po` int(11) DEFAULT NULL,
  KEY `trn_purchase_order_det_item_ibfk_1` (`id_item`),
  KEY `trn_purchase_order_det_ibfk_1` (`no_request_order`),
  KEY `trn_purchase_order_det_item_ibfk_6` (`id_unit`),
  CONSTRAINT `trn_cashro_det_ibfk_1` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_cashro_det_ibfk_2` FOREIGN KEY (`no_request_order`) REFERENCES `trn_request_order_head` (`no_request_order`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashro_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_cashro_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_cashro_head`;
CREATE TABLE `trn_cashro_head` (
  `no_request_order` varchar(30) NOT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `notes` longtext,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_request_order`),
  KEY `id_supplier` (`id_supplier`),
  CONSTRAINT `trn_cashro_head_ibfk_1` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_cashro_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_delivery_order_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_delivery_order_det`;
CREATE TABLE `trn_delivery_order_det` (
  `no_delivery_order` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `sent_qty` int(11) DEFAULT NULL,
  KEY `trn_sales_order_det_ibfk_1` (`no_delivery_order`),
  KEY `trn_sales_order_det_ibfk_2` (`id_item`),
  CONSTRAINT `trn_delivery_order_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_delivery_order_det_ibfk_3` FOREIGN KEY (`no_delivery_order`) REFERENCES `trn_delivery_order_head` (`no_delivery_order`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_delivery_order_det
-- ----------------------------
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/4-2015-00001', '0', 'PFCB-SSRV115509', 'DO Example', '1', 'btl', '1');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/4-2015-00002', '0', 'PFCB-SSRV115509', 'DO Example', '1', 'btl', '1');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/8-2015-00001', '0', 'PFCB-RVRV110640', 'Delivered Item Demo 8-2015-000001', '5', 'btl', '5');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/8-2015-00001', '1', 'PFCB-RVRV091750', 'Delivered Item Demo 8-2015-000001', '12', 'pcs', '12');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00001', '0', 'PFCB-RVRV114632', 'DO Item from SO/8/2015-00005 Demo', '10', 'btl', '10');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00001', '1', 'PFCB-RVRV114728', 'DO Item from SO/8/2015-00005 Demo', '10', 'pcs', '10');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00001', '2', 'PFCB-RVRV115839', 'DO Item from SO/8/2015-00005 Demo', '5', 'pcs', '5');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00002', '0', 'PFCB-RVRV113644', 'Delivered Item Demo', '5', 'btl', '5');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00002', '1', 'PFCB-RVRV113804', 'Delivered Item Demo', '5', 'btl', '5');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00002', '2', 'PFCB-RVRV110640', 'Delivered Item Demo', '5', 'btl', '5');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00002', '3', 'PFCB-SSRV115509', 'Delivered Item Demo', '2', 'btl', '2');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00004', '0', '0915000002', 'Demo DO', '11', 'pcs', '11');
INSERT INTO `trn_delivery_order_det` VALUES ('FRM/DO/09-2015-00004', '1', '0915000001', 'Demo DO', '3', 'pcs', '3');

-- ----------------------------
-- Table structure for trn_delivery_order_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_delivery_order_head`;
CREATE TABLE `trn_delivery_order_head` (
  `no_delivery_order` varchar(30) NOT NULL,
  `no_sales_order` varchar(30) DEFAULT NULL,
  `id_customer` varchar(25) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `id_warehouse` varchar(60) DEFAULT NULL,
  PRIMARY KEY (`no_delivery_order`),
  KEY `id_customer` (`id_customer`),
  KEY `no_sales_order` (`no_sales_order`),
  CONSTRAINT `trn_delivery_order_head_ibfk_1` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`),
  CONSTRAINT `trn_delivery_order_head_ibfk_2` FOREIGN KEY (`no_sales_order`) REFERENCES `trn_sales_order_head` (`no_sales_order`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_delivery_order_head
-- ----------------------------
INSERT INTO `trn_delivery_order_head` VALUES ('FRM/DO/09-2015-00001', 'FRM/SO/8-2015-00005', 'CUST.000001', '2015-09-12', 'DO Item from SO/8/2015-00005 Demo', 'admin', '2015-09-12 00:00:00', '2015-09-12 00:00:00', 'admin', 'WH001');
INSERT INTO `trn_delivery_order_head` VALUES ('FRM/DO/09-2015-00002', 'FRM/SO/09-2015-00001', 'CUST.000003', '2015-09-14', 'Delivered Item Demo', 'admin', '2015-09-14 00:00:00', '2015-09-14 00:00:00', 'admin', 'WH001');
INSERT INTO `trn_delivery_order_head` VALUES ('FRM/DO/09-2015-00004', 'FRM/SO/09-2015-00004', 'CUST.000001', '2015-09-30', 'Demo DO', 'admin', '2015-09-30 00:00:00', '2015-09-30 00:00:00', 'admin', 'WH001');
INSERT INTO `trn_delivery_order_head` VALUES ('FRM/DO/4-2015-00001', 'FRM/SO/4-2015-00001', 'CUST.000001', '2015-04-10', 'DO Example', 'admin', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin', 'WH001');
INSERT INTO `trn_delivery_order_head` VALUES ('FRM/DO/4-2015-00002', 'FRM/SO/4-2015-00002', 'CUST.000001', '2015-04-10', 'DO Example', 'admin', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin', 'WH001');
INSERT INTO `trn_delivery_order_head` VALUES ('FRM/DO/8-2015-00001', 'FRM/SO/8-2015-00001', 'CUST.000002', '2015-08-06', 'Delivered Item Demo 8-2015-000001', 'admin', '2015-07-25 00:00:00', '2015-07-25 00:00:00', 'admin', 'WH001');

-- ----------------------------
-- Table structure for trn_directpurchase_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_directpurchase_det`;
CREATE TABLE `trn_directpurchase_det` (
  `no_purchase` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `item_name` varchar(200) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `trn_purchase_det_item_ibfk_1` (`id_item`),
  KEY `trn_purchase_det_ibfk_1` (`no_purchase`),
  KEY `trn_purchase_det_item_ibfk_4` (`id_unit`),
  KEY `id_curr` (`id_curr`),
  CONSTRAINT `trn_directpurchase_det_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_directpurchase_det_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_directpurchase_det_ibfk_3` FOREIGN KEY (`id_curr`) REFERENCES `mst_currency` (`id_currency`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_directpurchase_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_directpurchase_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_directpurchase_head`;
CREATE TABLE `trn_directpurchase_head` (
  `no_purchase` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `no_purchase_order` varchar(30) DEFAULT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `id_account` varchar(60) DEFAULT NULL,
  `payment_method` int(25) DEFAULT NULL,
  `payment_term_days` int(11) DEFAULT NULL,
  `disc_term_days` int(11) DEFAULT NULL,
  `disc_term_nominal` decimal(19,4) DEFAULT NULL,
  `subtotal` decimal(19,4) DEFAULT NULL,
  `freight` decimal(19,4) DEFAULT NULL,
  `tax` decimal(19,4) DEFAULT NULL,
  `disc` decimal(10,0) DEFAULT NULL,
  `total` decimal(19,4) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`no_purchase`),
  KEY `trn_purchase_head_ibfk_1` (`no_purchase_order`),
  KEY `trn_purchase_head_ibfk_2` (`id_supplier`),
  KEY `trn_purchase_head_ibfk_3` (`payment_method`),
  KEY `id_account` (`id_account`),
  CONSTRAINT `trn_directpurchase_head_ibfk_1` FOREIGN KEY (`no_purchase_order`) REFERENCES `trn_purchase_order_head` (`no_purchase_order`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_directpurchase_head_ibfk_2` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_directpurchase_head_ibfk_3` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_directpurchase_head_ibfk_4` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_directpurchase_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_do_discitem_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_do_discitem_det`;
CREATE TABLE `trn_do_discitem_det` (
  `no_do` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `qty` double NOT NULL,
  `id_unit` varchar(60) NOT NULL,
  KEY `no_sales_order` (`no_do`),
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `trn_do_discitem_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_do_discitem_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE,
  CONSTRAINT `trn_do_discitem_det_ibfk_4` FOREIGN KEY (`no_do`) REFERENCES `trn_delivery_order_head` (`no_delivery_order`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_do_discitem_det
-- ----------------------------
INSERT INTO `trn_do_discitem_det` VALUES ('FRM/DO/09-2015-00004', 'PFCB-RVRV113959', 'Dream Donna Buku Gambar', '1', 'pcs');
INSERT INTO `trn_do_discitem_det` VALUES ('FRM/DO/09-2015-00004', 'PFCB-RVRV091158', 'Ballpoint Standard', '2', 'pcs');

-- ----------------------------
-- Table structure for trn_journal_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_journal_det`;
CREATE TABLE `trn_journal_det` (
  `journal_no` varchar(30) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `notes` text,
  `amount` double DEFAULT NULL,
  KEY `journal_det_fkey2` (`id_account`),
  KEY `journal_det_fkey3` (`journal_no`),
  CONSTRAINT `trn_journal_det_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_journal_det_ibfk_2` FOREIGN KEY (`journal_no`) REFERENCES `trn_journal_head` (`journal_no`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_journal_det
-- ----------------------------
INSERT INTO `trn_journal_det` VALUES ('FRM/JU/4-2015-00001', '6-1106', '', '256000');
INSERT INTO `trn_journal_det` VALUES ('FRM/JU/4-2015-00001', '1-2105', '', '-256000');

-- ----------------------------
-- Table structure for trn_journal_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_journal_head`;
CREATE TABLE `trn_journal_head` (
  `journal_no` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `description` text,
  `total` double DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `id_currency` varchar(30) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`journal_no`),
  KEY `id_currency` (`id_currency`),
  CONSTRAINT `trn_journal_head_ibfk_1` FOREIGN KEY (`id_currency`) REFERENCES `mst_currency` (`id_currency`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_journal_head
-- ----------------------------
INSERT INTO `trn_journal_head` VALUES ('FRM/JU/4-2015-00001', '2015-04-10 00:00:00', 'Equipment Depreciation Expenses', '256000', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'IDR', '1');

-- ----------------------------
-- Table structure for trn_ledger_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_ledger_det`;
CREATE TABLE `trn_ledger_det` (
  `no_ledger` varchar(25) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `notes` text,
  `nominal` double(255,0) DEFAULT NULL,
  KEY `ledger_det_fkey1` (`no_ledger`),
  KEY `ledger_det_fkey2` (`id_account`),
  CONSTRAINT `trn_ledger_det_ibfk_1` FOREIGN KEY (`no_ledger`) REFERENCES `trn_ledger_head` (`no_ledger`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_ledger_det_ibfk_2` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_ledger_det
-- ----------------------------
INSERT INTO `trn_ledger_det` VALUES ('FRM/JU/4-2015-00001', '6-1106', '', '256000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/JU/4-2015-00001', '1-2105', '', '-256000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SPM/4-2015-00001', '1-1104', 'Cash / Bank Disbursement Example', '-6600000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SPM/4-2015-00001', '1-1401', 'Consultant Fee Expenses', '6000000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SPM/4-2015-00001', '1-1501', 'PPN 10%', '600000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/4-2015-00001', '2-1101', 'Pembelian - FRM/PU/4-2015-00001', '-250000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/4-2015-00001', '1-1201', 'Pembelian - PFCB-SSRV115509', '250000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00001', '1-1301', 'Penjualan - FRM/SA/4-2015-00001', '27500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00001', '4-1101', 'Penjualan - FRM/SA/4-2015-00001', '-27500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00001', '5-1101', 'HPP - PFCB-SSRV115509', '0');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00001', '1-1201', 'Penjualan - PFCB-SSRV115509', '0');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAR/4-2015-00001', '1-1104', 'A/R Example', '-26950');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAR/4-2015-00001', '1-1301', 'A/R Example', '27500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAR/4-2015-00001', '4-1105', 'A/R Example', '-550');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00002', '1-1301', 'Penjualan - FRM/SA/4-2015-00002', '27500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00002', '4-1101', 'Penjualan - FRM/SA/4-2015-00002', '-27500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00002', '5-1101', 'HPP - PFCB-SSRV115509', '25227');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/4-2015-00002', '1-1201', 'Penjualan - PFCB-SSRV115509', '-25227');
INSERT INTO `trn_ledger_det` VALUES ('FRM/CSH/4-2015-00001', '2-1102', 'Pajak Penjualan - FRM/CSH/4-2015-00001', '-7500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/CSH/4-2015-00001', '1-1199', 'Penjualan - FRM/CSH/4-2015-00001', '82500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/CSH/4-2015-00001', '4-1201', 'Penjualan Jasa - JRJTQ5914', '-75000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00001', '6-1107', 'Biaya Angkut Pembelian - FRM/PU/8-2015-00001', '5000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00001', '1-1501', 'Pajak Pembelian - FRM/PU/8-2015-00001', '375000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00001', '2-1101', 'Pembelian - FRM/PU/8-2015-00001', '-4130000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00001', '1-1201', 'Pembelian - PFCB-RVRV113644', '3000000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00001', '1-1201', 'Pembelian - PFCB-RVRV110640', '275000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00001', '1-1201', 'Pembelian - PFCB-RVRV112337', '475000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/8-2015-00001', '2-1102', 'Pajak Penjualan - FRM/SA/8-2015-00001', '-8200');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/8-2015-00001', '1-1301', 'Penjualan - FRM/SA/8-2015-00001', '90200');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/8-2015-00001', '4-1101', 'Penjualan - FRM/SA/8-2015-00001', '-82000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/8-2015-00001', '5-1101', 'HPP - PFCB-RVRV110640', '60000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/8-2015-00001', '1-1201', 'Penjualan - PFCB-RVRV110640', '-60000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/8-2015-00001', '5-1101', 'HPP - PFCB-RVRV091750', '9600');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/8-2015-00001', '1-1201', 'Penjualan - PFCB-RVRV091750', '-9600');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00002', '6-1107', 'Biaya Angkut Pembelian - FRM/PU/8-2015-00002', '5000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00002', '1-1501', 'Pajak Pembelian - FRM/PU/8-2015-00002', '100900');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00002', '2-1101', 'Pembelian - FRM/PU/8-2015-00002', '-1114900');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00002', '1-1201', 'Pembelian - PFCB-RVRV091158', '192000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00002', '1-1201', 'Pembelian - PFCB-RVRV091750', '192000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00002', '1-1201', 'Pembelian - PFCB-RVRV110640', '625000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00003', '1-1501', 'Pajak Pembelian - FRM/PU/8-2015-00003', '21600');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00003', '2-1101', 'Pembelian - FRM/PU/8-2015-00003', '-237600');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00003', '1-1201', 'Pembelian - PFCB-RVRV111453', '96000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00003', '1-1201', 'Pembelian - PFCB-RVRV112142', '120000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00004', '1-1501', 'Pajak Pembelian - FRM/PU/8-2015-00004', '102500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00004', '2-1101', 'Pembelian - FRM/PU/8-2015-00004', '-1127500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00004', '1-1201', 'Pembelian - PFCB-RVRV112621', '290000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00004', '1-1201', 'Pembelian - PFCB-RVRV113247', '375000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00004', '1-1201', 'Pembelian - PFCB-RVRV113959', '360000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00005', '1-1501', 'Pajak Pembelian - FRM/PU/8-2015-00005', '62000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00005', '2-1101', 'Pembelian - FRM/PU/8-2015-00005', '-682000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00005', '1-1201', 'Pembelian - PFCB-RVRV114632', '350000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/8-2015-00005', '1-1201', 'Pembelian - PFCB-RVRV114728', '270000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00001', '1-1501', 'Pajak Pembelian - FRM/PU/9-2015-00001', '371000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00001', '2-1101', 'Pembelian - FRM/PU/9-2015-00001', '-4081000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00001', '1-1201', 'Pembelian - PFCB-RVRV115705', '200000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00001', '1-1201', 'Pembelian - PFCB-RVRV115839', '350000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00001', '1-1201', 'Pembelian - PFCB-RWRV084000', '280000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00001', '1-1201', 'Pembelian - PFCB-RWRV084324', '2880000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00002', '1-1501', 'Pajak Pembelian - FRM/PU/9-2015-00002', '648000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00002', '2-1101', 'Pembelian - FRM/PU/9-2015-00002', '-7128000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00002', '1-1201', 'Pembelian - PFCB-RWRV084324', '1440000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/9-2015-00002', '1-1201', 'Pembelian - PFCB-RWRV084538', '5040000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00003', '1-1501', 'Pajak Pembelian - FRM/PU/09-2015-00003', '244500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00003', '2-1101', 'Pembelian - FRM/PU/09-2015-00003', '-2689500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00003', '1-1201', 'Pembelian - PFCB-RVRV110640', '550000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00003', '1-1201', 'Pembelian - PFCB-RVRV113349', '170000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00003', '1-1201', 'Pembelian - PFCB-RVRV113644', '175000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00003', '1-1201', 'Pembelian - PFCB-RVRV113804', '350000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00003', '1-1201', 'Pembelian - PFCB-SSRV115509', '1200000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PRU/09-2015-00001', '1-1501', 'Pajak Pembelian - FRM/PRU/09-2015-00001', '-5900');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PRU/09-2015-00001', '2-1101', 'Retur Pembelian - FRM/PRU/09-2015-00001', '64900');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PRU/09-2015-00001', '1-1201', 'Retur Pembelian - PFCB-RVRV110640', '-11000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PRU/09-2015-00001', '1-1201', 'Retur Pembelian - PFCB-SSRV115509', '-48000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAP/09-2015-00001', '1-1104', 'Account Payable Payment Deno', '-6700810');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAP/09-2015-00001', '2-1101', 'Account Payable Payment Deno', '6754600');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAP/09-2015-00001', '4-1104', 'Account Payable Payment Deno', '-53790');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '2-1102', 'Pajak Penjualan - FRM/SA/09-2015-00001', '-33500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '1-1301', 'Penjualan - FRM/SA/09-2015-00001', '368500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '4-1101', 'Penjualan - FRM/SA/09-2015-00001', '-335000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '5-1101', 'HPP - PFCB-RVRV113644', '33075');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '1-1201', 'Penjualan - PFCB-RVRV113644', '-33075');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '5-1101', 'HPP - PFCB-RVRV113804', '3646');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '1-1201', 'Penjualan - PFCB-RVRV113804', '-3646');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '5-1101', 'HPP - PFCB-RVRV110640', '58255');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '1-1201', 'Penjualan - PFCB-RVRV110640', '-58255');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '5-1101', 'HPP - PFCB-SSRV115509', '48388');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/09-2015-00001', '1-1201', 'Penjualan - PFCB-SSRV115509', '-48388');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAR/09-2015-00001', '1-1105', '', '-27500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAR/09-2015-00001', '1-1301', '', '27500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00004', '1-1501', 'Pajak Pembelian - FRM/PU/09-2015-00004', '355000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00004', '2-1101', 'Pembelian - FRM/PU/09-2015-00004', '-3905000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00004', '1-1201', 'Pembelian - PFCB-RVRV110640', '1200000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00004', '1-1201', 'Pembelian - PFCB-RVRV113349', '1000000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00004', '1-1201', 'Pembelian - PFCB-RVRV113644', '1100000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PU/09-2015-00004', '1-1201', 'Pembelian - PFCB-RVRV113804', '250000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAP/09-2015-00002', '1-1104', '', '-3826900');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAP/09-2015-00002', '2-1101', '', '3905000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/PAP/09-2015-00002', '4-1104', '', '-78100');
INSERT INTO `trn_ledger_det` VALUES ('FRM/CSH/09-2015-00001', '1-1199', 'Penjualan - FRM/CSH/09-2015-00001', '28200');
INSERT INTO `trn_ledger_det` VALUES ('FRM/CSH/09-2015-00001', '4-1201', 'Penjualan Jasa - BFERX0530', '-28200');
INSERT INTO `trn_ledger_det` VALUES ('FRM/RCM/09-2015-00001', '1-1101', 'Demo Penerimaan Kas / Bank', '980000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/RCM/09-2015-00001', '6-1201', 'Refund Marketing Expenses', '-900000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/RCM/09-2015-00001', '1-1401', 'Refund Prepaid Consulting Fee', '-80000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SPM/09-2015-00001', '1-1104', 'Demo Pengeluaran Kas / Bank', '-23500000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SPM/09-2015-00001', '1-1105', 'Pemindahbukuan Rekening BCA - BNI', '19000000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SPM/09-2015-00001', '1-1499', 'Pembayaran Sewa Gedung', '4500000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/REC/09-2015-00001', '1-1104', 'Reconcile 1-1104', '25000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/REC/09-2015-00001', '4-2101', 'Pendapatan Bunga Giro belum tercatat', '-56000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/REC/09-2015-00001', '6-1199', 'Biaya adm bank BCA', '31000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '4-1202', 'Diskon Penjualan - FRM/SA/10-2015-00002', '32927');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '2-1102', 'Pajak Penjualan - FRM/SA/10-2015-00002', '-29634');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '1-1301', 'Penjualan - FRM/SA/10-2015-00002', '325975');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '4-1101', 'Penjualan - FRM/SA/10-2015-00002', '-329268');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '5-1101', 'HPP - 0915000002', '16500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '1-1201', 'Penjualan - 0915000002', '-16500');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '5-1101', 'HPP - 0915000001', '324000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '1-1201', 'Penjualan - 0915000001', '-324000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '5-1101', 'HPP Bonus Item - PFCB-RVRV113959', '3000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '1-1201', 'Penjualan Bonus Item - PFCB-RVRV113959', '-3000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '5-1101', 'HPP Bonus Item - PFCB-RVRV091158', '3000');
INSERT INTO `trn_ledger_det` VALUES ('FRM/SA/10-2015-00002', '1-1201', 'Penjualan Bonus Item - PFCB-RVRV091158', '-3000');
INSERT INTO `trn_ledger_det` VALUES ('DEP/10-2015-00001', '6-1106', 'Biaya Penyusutan Aset AST1015000001', '72917');
INSERT INTO `trn_ledger_det` VALUES ('DEP/10-2015-00001', '1-2105', 'Akumulasi Penyusutan Aset AST1015000001', '-72917');
INSERT INTO `trn_ledger_det` VALUES ('DEP/10-2015-00001', '6-1106', 'Biaya Penyusutan Aset AST1015000002', '83333');
INSERT INTO `trn_ledger_det` VALUES ('DEP/10-2015-00001', '1-2105', 'Akumulasi Penyusutan Aset AST1015000002', '-83333');
INSERT INTO `trn_ledger_det` VALUES ('DEP/10-2015-00001', '6-1106', 'Biaya Penyusutan Aset AST1015000003', '83333');
INSERT INTO `trn_ledger_det` VALUES ('DEP/10-2015-00001', '1-2105', 'Akumulasi Penyusutan Aset AST1015000003', '-83333');
INSERT INTO `trn_ledger_det` VALUES ('ADJ/10-2015-00001', '6-1201', 'Koreksi Penerimaan ', '950000');
INSERT INTO `trn_ledger_det` VALUES ('ADJ/10-2015-00001', '1-1105', 'Koreksi Penerimaan', '-950000');

-- ----------------------------
-- Table structure for trn_ledger_det_consol
-- ----------------------------
DROP TABLE IF EXISTS `trn_ledger_det_consol`;
CREATE TABLE `trn_ledger_det_consol` (
  `no_ledger` varchar(25) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `notes` text,
  `nominal` double(255,0) DEFAULT NULL,
  KEY `ledger_det_fkey1` (`no_ledger`),
  KEY `ledger_det_fkey2` (`id_account`),
  CONSTRAINT `trn_ledger_det_consol_ibfk_1` FOREIGN KEY (`no_ledger`) REFERENCES `trn_ledger_head_consol` (`no_ledger`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_ledger_det_consol_ibfk_2` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_ledger_det_consol
-- ----------------------------

-- ----------------------------
-- Table structure for trn_ledger_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_ledger_head`;
CREATE TABLE `trn_ledger_head` (
  `no_ledger` varchar(25) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `description` text,
  `total` double DEFAULT NULL,
  `created_user` varchar(25) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(25) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `post_from` varchar(255) DEFAULT NULL,
  KEY `no_ledger` (`no_ledger`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_ledger_head
-- ----------------------------
INSERT INTO `trn_ledger_head` VALUES ('FRM/JU/4-2015-00001', '2015-04-10 00:00:00', 'Equipment Depreciation Expenses', '256000', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'General Journal');
INSERT INTO `trn_ledger_head` VALUES ('FRM/SPM/4-2015-00001', '2015-04-10 00:00:00', 'Cash / Bank Disbursement Example', '6600000', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'Spend Cash/Bank');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/4-2015-00001', '2015-04-10 00:00:00', 'Invoice Example', '250000', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/SA/4-2015-00001', '2015-04-10 00:00:00', 'SO Example', '27500', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'Sales Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PAR/4-2015-00001', '2015-04-10 00:00:00', 'A/R Example', '26950', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'AR Payment Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/SA/4-2015-00002', '2015-04-10 00:00:00', 'SO Example', '27500', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'Sales Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/CSH/4-2015-00001', '2015-04-30 00:00:00', 'demo kasir penjualan jasa', '82500', 'admin', '2015-04-30 00:00:00', 'admin', '2015-04-30 00:00:00', 'Sales Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/8-2015-00001', '2015-08-01 00:00:00', 'Purchase Invoice Demo 8-2015-000001/PO 7-2015-000001', '4130000', 'admin', '2015-07-25 00:00:00', 'admin', '2015-07-25 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/SA/8-2015-00001', '2015-08-07 00:00:00', 'SO Demo 8-2015-000001', '90200', 'admin', '2015-07-25 00:00:00', 'admin', '2015-07-25 00:00:00', 'Sales Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/8-2015-00002', '2015-08-03 00:00:00', 'Purchase Invoice Demo 8-2015-000002', '1114900', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/8-2015-00003', '2015-08-07 00:00:00', 'Purchase Invoice Demo 8-2015-000003', '237600', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/8-2015-00004', '2015-08-10 00:00:00', 'Purchase Invoice Demo 8-2015-000004', '1127500', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/8-2015-00005', '2015-08-17 00:00:00', 'Purchase Invoice Demo 8-2015-000005', '682000', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/9-2015-00001', '2015-09-01 00:00:00', 'Purchase Invoice Demo 9-2015-00001', '4081000', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/9-2015-00002', '2015-09-03 00:00:00', 'Purchase Invoice Demo 9-2015-00002', '7128000', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/09-2015-00003', '2015-09-14 00:00:00', 'Purchase Invoice Demo', '2689500', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PRU/09-2015-00001', '2015-09-14 00:00:00', 'Purchase Return Demo', '64900', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', 'Purchase Return Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PAP/09-2015-00001', '2015-09-14 00:00:00', 'Account Payable Payment Deno', '6700810', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', 'AP Payment Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/SA/09-2015-00001', '2015-09-14 00:00:00', 'Sales Invoice Demo', '368500', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', 'Sales Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PAR/09-2015-00001', '2015-09-15 00:00:00', '', '27500', 'admin', '2015-09-15 00:00:00', 'admin', '2015-09-15 00:00:00', 'AR Payment Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PU/09-2015-00004', '2015-09-16 00:00:00', 'Invoice', '3905000', 'admin', '2015-09-16 00:00:00', 'admin', '2015-09-16 00:00:00', 'Purchase Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/PAP/09-2015-00002', '2015-09-16 00:00:00', '', '3826900', 'admin', '2015-09-16 00:00:00', 'admin', '2015-09-16 00:00:00', 'AP Payment Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/CSH/09-2015-00001', '2015-09-17 00:00:00', 'demo kasir service', '28200', 'admin', '2015-09-17 00:00:00', 'admin', '2015-09-17 00:00:00', 'Sales Form');
INSERT INTO `trn_ledger_head` VALUES ('FRM/RCM/09-2015-00001', '2015-09-27 00:00:00', 'Demo Penerimaan Kas / Bank', '980000', 'admin', '2015-09-27 00:00:00', 'admin', '2015-09-27 00:00:00', 'Received Cash/Bank');
INSERT INTO `trn_ledger_head` VALUES ('FRM/SPM/09-2015-00001', '2015-09-27 00:00:00', 'Demo Pengeluaran Kas / Bank', '23500000', 'admin', '2015-09-27 00:00:00', 'admin', '2015-09-27 00:00:00', 'Spend Cash/Bank');
INSERT INTO `trn_ledger_head` VALUES ('FRM/REC/09-2015-00001', '2015-09-27 00:00:00', 'Reconcile 1-1104', '25000', 'admin', '2015-09-27 00:00:00', 'admin', '2015-09-27 00:00:00', 'Reconcile Cash/Bank');
INSERT INTO `trn_ledger_head` VALUES ('FRM/SA/10-2015-00002', '2015-10-01 00:00:00', 'Demo SO', '325975', 'admin', '2015-10-01 00:00:00', 'admin', '2015-10-01 00:00:00', 'Sales Form');
INSERT INTO `trn_ledger_head` VALUES ('DEP/10-2015-00001', '2015-10-18 00:00:00', 'Jurnal Penyusutan Aset', '72917', 'admin', '2015-10-18 00:00:00', 'admin', '2015-10-18 00:00:00', 'Aset Depreciation');
INSERT INTO `trn_ledger_head` VALUES ('ADJ/10-2015-00001', '2015-10-14 00:00:00', 'Koreksi Penerimaan', '950000', 'demo', '2015-10-20 00:00:00', 'demo', '2015-10-20 00:00:00', 'General Journal');

-- ----------------------------
-- Table structure for trn_ledger_head_consol
-- ----------------------------
DROP TABLE IF EXISTS `trn_ledger_head_consol`;
CREATE TABLE `trn_ledger_head_consol` (
  `no_ledger` varchar(25) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `description` text,
  `total` double DEFAULT NULL,
  `created_user` varchar(25) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(25) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `post_from` varchar(255) DEFAULT NULL,
  `branch_from` varchar(120) DEFAULT NULL,
  KEY `no_ledger` (`no_ledger`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_ledger_head_consol
-- ----------------------------

-- ----------------------------
-- Table structure for trn_material_usage_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_material_usage_det`;
CREATE TABLE `trn_material_usage_det` (
  `no_material_usage` varchar(60) DEFAULT NULL,
  `id_item` varchar(120) DEFAULT NULL,
  `qty_spk` double DEFAULT NULL,
  `qty` double DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `notes_det` text
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_material_usage_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_material_usage_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_material_usage_head`;
CREATE TABLE `trn_material_usage_head` (
  `no_material_usage` varchar(60) NOT NULL,
  `no_spk` varchar(60) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_material_usage`),
  KEY `no_spk` (`no_spk`),
  CONSTRAINT `trn_material_usage_head_ibfk_1` FOREIGN KEY (`no_spk`) REFERENCES `trn_spk_head` (`no_spk`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_material_usage_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_payment_ap_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_payment_ap_det`;
CREATE TABLE `trn_payment_ap_det` (
  `no_payment_ap` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `no_purchase` varchar(30) DEFAULT NULL,
  `invoice_date` date DEFAULT NULL,
  `ap_amount` double(19,4) DEFAULT NULL,
  `ap_return` double(19,4) DEFAULT NULL,
  `discount` double(19,4) DEFAULT NULL,
  `ap_amount_net` double(19,4) DEFAULT NULL,
  `paid_amount` double(19,4) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  KEY `no_payment_ap` (`no_payment_ap`),
  KEY `no_purchase` (`no_purchase`),
  CONSTRAINT `trn_payment_ap_det_ibfk_1` FOREIGN KEY (`no_payment_ap`) REFERENCES `trn_payment_ap_head` (`no_payment_ap`),
  CONSTRAINT `trn_payment_ap_det_ibfk_2` FOREIGN KEY (`no_purchase`) REFERENCES `trn_purchase_head` (`no_purchase`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_payment_ap_det
-- ----------------------------
INSERT INTO `trn_payment_ap_det` VALUES ('FRM/PAP/09-2015-00001', '0', 'FRM/PU/09-2015-00003', '2015-09-14', '2689500.0000', '64900.0000', '53790.0000', '2570810.0000', '2570810.0000', '1');
INSERT INTO `trn_payment_ap_det` VALUES ('FRM/PAP/09-2015-00001', '1', 'FRM/PU/8-2015-00001', '2015-08-01', '4130000.0000', '0.0000', '0.0000', '4130000.0000', '4130000.0000', '1');
INSERT INTO `trn_payment_ap_det` VALUES ('FRM/PAP/09-2015-00002', '0', 'FRM/PU/09-2015-00004', '2015-09-16', '3905000.0000', '0.0000', '78100.0000', '3826900.0000', '3826900.0000', '1');

-- ----------------------------
-- Table structure for trn_payment_ap_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_payment_ap_head`;
CREATE TABLE `trn_payment_ap_head` (
  `no_payment_ap` varchar(30) NOT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `notes` longtext,
  `total` decimal(19,4) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `created_user` varchar(25) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(25) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `id_currency` varchar(30) DEFAULT NULL,
  `flag_kurs_pu` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`no_payment_ap`),
  KEY `trn_payment_ap_head_ibfk_2` (`id_account`),
  KEY `trn_payment_ap_head_ibfk_1` (`id_supplier`),
  KEY `id_currency` (`id_currency`),
  CONSTRAINT `trn_payment_ap_head_ibfk_1` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_payment_ap_head_ibfk_2` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_payment_ap_head_ibfk_3` FOREIGN KEY (`id_currency`) REFERENCES `mst_currency` (`id_currency`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_payment_ap_head
-- ----------------------------
INSERT INTO `trn_payment_ap_head` VALUES ('FRM/PAP/09-2015-00001', 'SUPP.000002', '2015-09-14 00:00:00', 'Account Payable Payment Deno', '6700810.0000', '1-1104', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', 'IDR', '1');
INSERT INTO `trn_payment_ap_head` VALUES ('FRM/PAP/09-2015-00002', 'SUPP.000003', '2015-09-16 00:00:00', '', '3826900.0000', '1-1104', 'admin', '2015-09-16 00:00:00', 'admin', '2015-09-16 00:00:00', 'IDR', '1');

-- ----------------------------
-- Table structure for trn_payment_ar_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_payment_ar_det`;
CREATE TABLE `trn_payment_ar_det` (
  `no_payment_ar` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `no_invoice` varchar(30) DEFAULT NULL,
  `invoice_date` date DEFAULT NULL,
  `ap_amount` double(19,4) DEFAULT NULL,
  `ap_return` double(19,4) DEFAULT NULL,
  `discount` double(19,4) DEFAULT NULL,
  `ap_amount_net` double(19,4) DEFAULT NULL,
  `paid_amount` double(19,4) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  KEY `trn_payment_ar_no_payment_fkey` (`no_payment_ar`),
  KEY `trn_payment_ar_no_payment_fkey2` (`no_invoice`),
  CONSTRAINT `trn_payment_ar_det_ibfk_1` FOREIGN KEY (`no_payment_ar`) REFERENCES `trn_payment_ar_head` (`no_payment_ar`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_payment_ar_det_ibfk_2` FOREIGN KEY (`no_invoice`) REFERENCES `trn_sales_head` (`no_sales`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_payment_ar_det
-- ----------------------------
INSERT INTO `trn_payment_ar_det` VALUES ('FRM/PAR/4-2015-00001', '0', 'FRM/SA/4-2015-00001', '2015-04-10', '27500.0000', '0.0000', '550.0000', '26950.0000', '26950.0000', '1');
INSERT INTO `trn_payment_ar_det` VALUES ('FRM/PAR/09-2015-00001', '1', 'FRM/SA/4-2015-00002', '2015-04-10', '27500.0000', '0.0000', '0.0000', '27500.0000', '27500.0000', '1');

-- ----------------------------
-- Table structure for trn_payment_ar_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_payment_ar_head`;
CREATE TABLE `trn_payment_ar_head` (
  `no_payment_ar` varchar(30) NOT NULL,
  `id_customer` varchar(25) DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `notes` longtext,
  `total` double(19,4) DEFAULT NULL,
  `id_account` varchar(25) DEFAULT NULL,
  `created_user` varchar(25) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(25) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `id_currency` varchar(30) DEFAULT NULL,
  `flag_kurs_pu` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`no_payment_ar`),
  KEY `trn_payment_ar_customer_fkey` (`id_customer`),
  KEY `trn_payment_ar_customer_fkey2` (`id_account`),
  KEY `id_currency` (`id_currency`),
  CONSTRAINT `trn_payment_ar_head_ibfk_1` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_payment_ar_head_ibfk_2` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_payment_ar_head_ibfk_3` FOREIGN KEY (`id_currency`) REFERENCES `mst_currency` (`id_currency`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_payment_ar_head
-- ----------------------------
INSERT INTO `trn_payment_ar_head` VALUES ('FRM/PAR/09-2015-00001', 'CUST.000001', '2015-09-15 00:00:00', '', '27500.0000', '1-1105', 'admin', '2015-09-15 00:00:00', 'admin', '2015-09-15 00:00:00', 'IDR', '1');
INSERT INTO `trn_payment_ar_head` VALUES ('FRM/PAR/4-2015-00001', 'CUST.000001', '2015-04-10 00:00:00', 'A/R Example', '26950.0000', '1-1104', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', 'IDR', '1');

-- ----------------------------
-- Table structure for trn_purchase_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_purchase_det`;
CREATE TABLE `trn_purchase_det` (
  `no_purchase` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `item_name` varchar(200) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `trn_purchase_det_item_ibfk_1` (`id_item`),
  KEY `trn_purchase_det_ibfk_1` (`no_purchase`),
  KEY `trn_purchase_det_item_ibfk_4` (`id_unit`),
  KEY `id_curr` (`id_curr`),
  CONSTRAINT `trn_purchase_det_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_det_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_det_ibfk_3` FOREIGN KEY (`id_curr`) REFERENCES `mst_currency` (`id_currency`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_purchase_det
-- ----------------------------
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/4-2015-00001', '1', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', '', '10', 'btl', '25000.0000', '250000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00001', '1', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', 'PO Detail Demo 7-2015-1', '10', 'pack', '300000.0000', '3000000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00001', '2', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', 'PO Detail Demo 7-2015-1', '25', 'btl', '11000.0000', '275000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00001', '3', 'PFCB-RVRV112337', 'Bindex Ordner Kecil', 'PO Detail Demo 7-2015-1', '50', 'pcs', '9500.0000', '475000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00002', '1', 'PFCB-RVRV091158', 'Ballpoint Standard', 'PO Detail Demo 7-2015-00002', '10', 'pack', '19200.0000', '192000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00002', '2', 'PFCB-RVRV091750', 'Bazic Penghapus Pensil', 'PO Detail Demo 7-2015-00002', '20', 'pack', '9600.0000', '192000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00002', '3', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', 'PO Detail Demo 7-2015-00002', '50', 'btl', '12500.0000', '625000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00003', '1', 'PFCB-RVRV111453', 'Binder No 200 Penjepit Kertas', 'PO Detail Demo 7-2015-000003', '20', 'pack', '4800.0000', '96000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00003', '2', 'PFCB-RVRV112142', 'Binder No 260 Penjepit Kertas', 'PO Detail Demo 7-2015-000003', '20', 'pack', '6000.0000', '120000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00004', '1', 'PFCB-RVRV112621', 'Buku Kwitansi 40lbr', 'PO Detail Demo 7-2015-000004', '50', 'pcs', '5800.0000', '290000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00004', '2', 'PFCB-RVRV113247', 'Buku Kwitansi 50lbr', 'PO Detail Demo 7-2015-000004', '50', 'pcs', '7500.0000', '375000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00004', '3', 'PFCB-RVRV113959', 'Dream Donna Buku Gambar', 'PO Detail Demo 7-2015-000004', '10', 'pack', '36000.0000', '360000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00005', '1', 'PFCB-RVRV114632', 'ABC Kecap Asin 140 ml - per botol', 'PO Detail Demo 7-2015-000005', '50', 'pack', '7000.0000', '350000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/8-2015-00005', '2', 'PFCB-RVRV114728', 'ABC Kecap Inggris 195 ml - per botol', 'PO Detail Demo 7-2015-000005', '30', 'pack', '9000.0000', '270000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/9-2015-00001', '1', 'PFCB-RVRV115705', 'ABC Kopi Mocca - per sachet', 'PO Detail Demo 8-2015-000001', '20', 'pack', '10000.0000', '200000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/9-2015-00001', '2', 'PFCB-RVRV115839', 'ABC Kopi Susu 32gr - kopi instan - per sachet', 'PO Detail Demo 8-2015-000001', '25', 'pack', '14000.0000', '350000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/9-2015-00001', '3', 'PFCB-RWRV084000', 'ABC Kopi Susu 32gr - kopi instan - per sachet', 'PO Detail Demo 8-2015-000001', '20', 'pack', '14000.0000', '280000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/9-2015-00001', '4', 'PFCB-RWRV084324', 'ABC Mie Soto Cup (Gelas) 60gr', 'PO Detail Demo 8-2015-000001', '40', 'pack', '72000.0000', '2880000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/9-2015-00002', '1', 'PFCB-RWRV084324', 'ABC Mie Soto Cup (Gelas) 60gr', 'PO Detail Demo 8-2015-000002', '20', 'pack', '72000.0000', '1440000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/9-2015-00002', '2', 'PFCB-RWRV084538', 'ABC Minuman Asam Jawa 250ml - kemasan kotak', 'PO Detail Demo 8-2015-000002', '50', 'pack', '100800.0000', '5040000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00003', '1', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', 'PO Demo Detail', '50', 'btl', '11000.0000', '550000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00003', '2', 'PFCB-RVRV113349', 'Casablanca Body Spray 65ml - Perfume', 'PO Demo Detail', '10', 'pack', '17000.0000', '170000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00003', '3', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', 'PO Demo Detail', '10', 'pack', '17500.0000', '175000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00003', '4', 'PFCB-RVRV113804', 'Casablanca Perfume Biru 65ml', 'PO Demo Detail', '20', 'pack', '17500.0000', '350000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00003', '5', 'PFCB-SSRV115509', 'Axe Deodorant Nelu 150ml Pewangi Tubuh', 'PO Demo Detail', '50', 'btl', '24000.0000', '1200000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00004', '1', 'PFCB-RVRV110640', 'Bigen Semir Rambut 6gr', 'PO Demo Detail', '50', 'btl', '24000.0000', '1200000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00004', '2', 'PFCB-RVRV113349', 'Casablanca Body Spray 65ml - Perfume', 'PO Demo Detail', '100', 'pack', '10000.0000', '1000000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00004', '3', 'PFCB-RVRV113644', 'Casablanca Body Spray 65ml - Perfume Red', 'PO Demo Detail', '100', 'pack', '11000.0000', '1100000.0000', 'IDR');
INSERT INTO `trn_purchase_det` VALUES ('FRM/PU/09-2015-00004', '4', 'PFCB-RVRV113804', 'Casablanca Perfume Biru 65ml', 'PO Demo Detail', '25', 'pack', '10000.0000', '250000.0000', 'IDR');

-- ----------------------------
-- Table structure for trn_purchase_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_purchase_head`;
CREATE TABLE `trn_purchase_head` (
  `no_purchase` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `no_purchase_order` varchar(30) DEFAULT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `id_account` varchar(60) DEFAULT NULL,
  `payment_method` int(25) DEFAULT NULL,
  `payment_term_days` int(11) DEFAULT NULL,
  `disc_term_days` int(11) DEFAULT NULL,
  `disc_term_nominal` decimal(19,4) DEFAULT NULL,
  `subtotal` decimal(19,4) DEFAULT NULL,
  `freight` decimal(19,4) DEFAULT NULL,
  `tax` decimal(19,4) DEFAULT NULL,
  `disc` decimal(10,0) DEFAULT NULL,
  `total` decimal(19,4) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`no_purchase`),
  KEY `trn_purchase_head_ibfk_1` (`no_purchase_order`),
  KEY `trn_purchase_head_ibfk_2` (`id_supplier`),
  KEY `trn_purchase_head_ibfk_3` (`payment_method`),
  KEY `id_account` (`id_account`),
  CONSTRAINT `trn_purchase_head_ibfk_1` FOREIGN KEY (`no_purchase_order`) REFERENCES `trn_purchase_order_head` (`no_purchase_order`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_head_ibfk_2` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_head_ibfk_3` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_head_ibfk_4` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_purchase_head
-- ----------------------------
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/09-2015-00003', '2015-09-14 00:00:00', 'FRM/PO/09-2015-00001', 'SUPP.000002', '2-1101', '2', '30', '10', '2.0000', '2445000.0000', '0.0000', '10.0000', '0', '2689500.0000', 'Purchase Invoice Demo', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/09-2015-00004', '2015-09-16 00:00:00', 'FRM/PO/09-2015-00002', 'SUPP.000003', '2-1101', '2', '30', '10', '2.0000', '3550000.0000', '0.0000', '10.0000', '0', '3905000.0000', 'Invoice', 'admin', '2015-09-16 00:00:00', 'admin', '2015-09-16 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/4-2015-00001', '2015-04-10 00:00:00', 'FRM/PO/4-2015-00001', 'SUPP.000001', '2-1101', '2', '30', '10', '2.0000', '250000.0000', '0.0000', '0.0000', '0', '250000.0000', 'Invoice Example', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/8-2015-00001', '2015-08-01 00:00:00', 'FRM/PO/7-2015-00001', 'SUPP.000002', '2-1101', '2', '30', '10', '2.0000', '3750000.0000', '5000.0000', '10.0000', '0', '4130000.0000', 'Purchase Invoice Demo 8-2015-000001/PO 7-2015-000001', 'admin', '2015-07-25 00:00:00', 'admin', '2015-07-25 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/8-2015-00002', '2015-08-03 00:00:00', 'FRM/PO/7-2015-00002', 'SUPP.000002', '2-1101', '2', '30', '10', '2.0000', '1009000.0000', '5000.0000', '10.0000', '0', '1114900.0000', 'Purchase Invoice Demo 8-2015-000002', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/8-2015-00003', '2015-08-07 00:00:00', 'FRM/PO/7-2015-00003', 'SUPP.000001', '2-1101', '2', '30', '10', '2.0000', '216000.0000', '0.0000', '10.0000', '0', '237600.0000', 'Purchase Invoice Demo 8-2015-000003', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/8-2015-00004', '2015-08-10 00:00:00', 'FRM/PO/7-2015-00004', 'SUPP.000001', '2-1101', '2', '30', '10', '2.0000', '1025000.0000', '0.0000', '10.0000', '0', '1127500.0000', 'Purchase Invoice Demo 8-2015-000004', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/8-2015-00005', '2015-08-17 00:00:00', 'FRM/PO/7-2015-00005', 'SUPP.000001', '2-1101', '2', '30', '10', '2.0000', '620000.0000', '0.0000', '10.0000', '0', '682000.0000', 'Purchase Invoice Demo 8-2015-000005', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/9-2015-00001', '2015-09-01 00:00:00', 'FRM/PO/8-2015-00001', 'SUPP.000001', '2-1101', '2', '30', '10', '2.0000', '3710000.0000', '0.0000', '10.0000', '0', '4081000.0000', 'Purchase Invoice Demo 9-2015-00001', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', '1');
INSERT INTO `trn_purchase_head` VALUES ('FRM/PU/9-2015-00002', '2015-09-03 00:00:00', 'FRM/PO/8-2015-00002', 'SUPP.000001', '2-1101', '2', '30', '10', '2.0000', '6480000.0000', '0.0000', '10.0000', '0', '7128000.0000', 'Purchase Invoice Demo 9-2015-00002', 'admin', '2015-07-26 00:00:00', 'admin', '2015-07-26 00:00:00', '1');

-- ----------------------------
-- Table structure for trn_purchase_order_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_purchase_order_det`;
CREATE TABLE `trn_purchase_order_det` (
  `no_purchase_order` varchar(30) DEFAULT NULL,
  `no_request_order` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` decimal(19,4) DEFAULT NULL,
  `nominal` decimal(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  `qty_received` int(11) DEFAULT NULL,
  KEY `trn_purchase_order_det_item_ibfk_1` (`id_item`),
  KEY `trn_purchase_order_det_ibfk_1` (`no_purchase_order`),
  KEY `trn_purchase_order_det_item_ibfk_6` (`id_unit`),
  KEY `trn_request_order_key` (`no_request_order`),
  CONSTRAINT `trn_purchase_order_det_ibfk_1` FOREIGN KEY (`no_purchase_order`) REFERENCES `trn_purchase_order_head` (`no_purchase_order`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_order_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_order_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_request_order_key` FOREIGN KEY (`no_request_order`) REFERENCES `trn_request_order_head` (`no_request_order`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_purchase_order_det
-- ----------------------------
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/4-2015-00001', 'FRM/RO/4-2015-00001', '1', 'PFCB-SSRV115509', '', '10', 'btl', '25000.0000', '250000.0000', 'IDR', '10');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00002', 'FRM/RO/7-2015-00002', '1', 'PFCB-RVRV091158', 'PO Detail Demo 7-2015-00002', '10', 'pack', '19200.0000', '192000.0000', 'IDR', '10');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00002', 'FRM/RO/7-2015-00002', '2', 'PFCB-RVRV091750', 'PO Detail Demo 7-2015-00002', '20', 'pack', '9600.0000', '192000.0000', 'IDR', '20');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00002', 'FRM/RO/7-2015-00002', '3', 'PFCB-RVRV110640', 'PO Detail Demo 7-2015-00002', '50', 'btl', '12500.0000', '625000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00001', 'FRM/RO/7-2015-00001', '1', 'PFCB-RVRV113644', 'PO Detail Demo 7-2015-1', '10', 'pack', '300000.0000', '3000000.0000', 'IDR', '10');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00001', 'FRM/RO/7-2015-00001', '2', 'PFCB-RVRV110640', 'PO Detail Demo 7-2015-1', '25', 'btl', '11000.0000', '275000.0000', 'IDR', '25');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00001', 'FRM/RO/7-2015-00001', '3', 'PFCB-RVRV112337', 'PO Detail Demo 7-2015-1', '50', 'pcs', '9500.0000', '475000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00003', 'FRM/RO/7-2015-00003', '1', 'PFCB-RVRV111453', 'PO Detail Demo 7-2015-000003', '20', 'pack', '4800.0000', '96000.0000', 'IDR', '20');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00003', 'FRM/RO/7-2015-00003', '2', 'PFCB-RVRV112142', 'PO Detail Demo 7-2015-000003', '20', 'pack', '6000.0000', '120000.0000', 'IDR', '20');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00004', 'FRM/RO/7-2015-00004', '1', 'PFCB-RVRV112621', 'PO Detail Demo 7-2015-000004', '50', 'pcs', '5800.0000', '290000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00004', 'FRM/RO/7-2015-00004', '2', 'PFCB-RVRV113247', 'PO Detail Demo 7-2015-000004', '50', 'pcs', '7500.0000', '375000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00004', 'FRM/RO/7-2015-00004', '3', 'PFCB-RVRV113959', 'PO Detail Demo 7-2015-000004', '10', 'pack', '36000.0000', '360000.0000', 'IDR', '10');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00005', 'FRM/RO/7-2015-00005', '1', 'PFCB-RVRV114632', 'PO Detail Demo 7-2015-000005', '50', 'pack', '7000.0000', '350000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/7-2015-00005', 'FRM/RO/7-2015-00005', '2', 'PFCB-RVRV114728', 'PO Detail Demo 7-2015-000005', '30', 'pack', '9000.0000', '270000.0000', 'IDR', '30');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/8-2015-00001', 'FRM/RO/7-2015-00006', '1', 'PFCB-RVRV115705', 'PO Detail Demo 8-2015-000001', '20', 'pack', '10000.0000', '200000.0000', 'IDR', '20');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/8-2015-00001', 'FRM/RO/7-2015-00006', '2', 'PFCB-RVRV115839', 'PO Detail Demo 8-2015-000001', '25', 'pack', '14000.0000', '350000.0000', 'IDR', '25');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/8-2015-00001', 'FRM/RO/7-2015-00006', '3', 'PFCB-RWRV084000', 'PO Detail Demo 8-2015-000001', '20', 'pack', '14000.0000', '280000.0000', 'IDR', '20');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/8-2015-00001', 'FRM/RO/7-2015-00006', '4', 'PFCB-RWRV084324', 'PO Detail Demo 8-2015-000001', '40', 'pack', '72000.0000', '2880000.0000', 'IDR', '40');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/8-2015-00002', 'FRM/RO/7-2015-00007', '1', 'PFCB-RWRV084324', 'PO Detail Demo 8-2015-000002', '20', 'pack', '72000.0000', '1440000.0000', 'IDR', '20');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/8-2015-00002', 'FRM/RO/7-2015-00007', '2', 'PFCB-RWRV084538', 'PO Detail Demo 8-2015-000002', '50', 'pack', '100800.0000', '5040000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00001', 'FRM/RO/09-2015-00001', '1', 'PFCB-RVRV110640', 'PO Demo Detail', '50', 'btl', '11000.0000', '550000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00001', 'FRM/RO/09-2015-00001', '2', 'PFCB-RVRV113349', 'PO Demo Detail', '10', 'pack', '17000.0000', '170000.0000', 'IDR', '10');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00001', 'FRM/RO/09-2015-00001', '3', 'PFCB-RVRV113644', 'PO Demo Detail', '10', 'pack', '17500.0000', '175000.0000', 'IDR', '10');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00001', 'FRM/RO/09-2015-00001', '4', 'PFCB-RVRV113804', 'PO Demo Detail', '20', 'pack', '17500.0000', '350000.0000', 'IDR', '20');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00001', 'FRM/RO/09-2015-00001', '5', 'PFCB-SSRV115509', 'PO Demo Detail', '50', 'btl', '24000.0000', '1200000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00002', 'FRM/RO/09-2015-00002', '1', 'PFCB-RVRV110640', 'PO Demo Detail', '50', 'btl', '24000.0000', '1200000.0000', 'IDR', '50');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00002', 'FRM/RO/09-2015-00002', '2', 'PFCB-RVRV113349', 'PO Demo Detail', '100', 'pack', '10000.0000', '1000000.0000', 'IDR', '100');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00002', 'FRM/RO/09-2015-00002', '3', 'PFCB-RVRV113644', 'PO Demo Detail', '100', 'pack', '11000.0000', '1100000.0000', 'IDR', '100');
INSERT INTO `trn_purchase_order_det` VALUES ('FRM/PO/09-2015-00002', 'FRM/RO/09-2015-00002', '4', 'PFCB-RVRV113804', 'PO Demo Detail', '25', 'pack', '10000.0000', '250000.0000', 'IDR', '25');

-- ----------------------------
-- Table structure for trn_purchase_order_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_purchase_order_head`;
CREATE TABLE `trn_purchase_order_head` (
  `no_purchase_order` varchar(30) NOT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `notes` longtext,
  `subtotal` double(19,4) DEFAULT NULL,
  `freight` double(19,4) DEFAULT NULL,
  `tax` double(19,4) DEFAULT NULL,
  `total` double(19,4) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `flag_status_invoice` int(11) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`no_purchase_order`),
  KEY `id_supplier` (`id_supplier`),
  CONSTRAINT `trn_purchase_order_head_ibfk_1` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_purchase_order_head
-- ----------------------------
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/09-2015-00001', 'SUPP.000002', '2015-09-14', 'PO Demo', '2445000.0000', '0.0000', '10.0000', '2689500.0000', '', '2015-09-14 00:00:00', '2015-09-14 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/09-2015-00002', 'SUPP.000003', '2015-09-16', 'PO Demo', '3550000.0000', '0.0000', '10.0000', '3905000.0000', '', '2015-09-16 00:00:00', '2015-09-16 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/4-2015-00001', 'SUPP.000001', '2015-04-10', 'PO Example', '250000.0000', '0.0000', '0.0000', '250000.0000', '', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/7-2015-00001', 'SUPP.000002', '2015-07-21', 'PO Detail Demo 7-2015-1', '3750000.0000', '5000.0000', '10.0000', '4130000.0000', '', '2015-07-25 00:00:00', '2015-07-25 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/7-2015-00002', 'SUPP.000002', '2015-07-28', 'PO Demo 7-2015-00002', '1009000.0000', '5000.0000', '10.0000', '1114900.0000', '', '2015-07-25 00:00:00', '2015-07-25 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/7-2015-00003', 'SUPP.000001', '2015-07-29', 'PO Demo 7-2015-000003', '216000.0000', '0.0000', '10.0000', '237600.0000', '', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/7-2015-00004', 'SUPP.000001', '2015-07-26', 'PO Demo 7-2015-000004', '1025000.0000', '0.0000', '10.0000', '1127500.0000', '', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/7-2015-00005', 'SUPP.000001', '2015-07-31', 'PO Demo 7-2015-000005', '620000.0000', '0.0000', '10.0000', '682000.0000', '', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/8-2015-00001', 'SUPP.000001', '2015-08-01', 'PO Detail Demo 8-2015-000001', '3710000.0000', '0.0000', '10.0000', '4081000.0000', '', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '1', '1');
INSERT INTO `trn_purchase_order_head` VALUES ('FRM/PO/8-2015-00002', 'SUPP.000001', '2015-08-02', 'PO Demo 8-2015-000002', '6480000.0000', '0.0000', '10.0000', '7128000.0000', '', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', '1', '1');

-- ----------------------------
-- Table structure for trn_purchase_return_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_purchase_return_det`;
CREATE TABLE `trn_purchase_return_det` (
  `no_purchase_return` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `qty_purch` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  `no_purchase` varchar(30) DEFAULT NULL,
  KEY `trn_purchase_return_det_ibfk_1` (`no_purchase`),
  KEY `trn_purchase_return_det_ibfk_2` (`no_purchase_return`),
  KEY `trn_purchase_return_det_item_ibfk_2` (`id_item`),
  KEY `trn_purchase_return_det_item_ibfk_7` (`id_unit`),
  CONSTRAINT `trn_purchase_return_det_ibfk_1` FOREIGN KEY (`no_purchase`) REFERENCES `trn_purchase_head` (`no_purchase`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_return_det_ibfk_2` FOREIGN KEY (`no_purchase_return`) REFERENCES `trn_purchase_return_head` (`no_purchase_return`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_return_det_ibfk_3` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_return_det_ibfk_4` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_purchase_return_det
-- ----------------------------
INSERT INTO `trn_purchase_return_det` VALUES ('FRM/PRU/09-2015-00001', '1', 'PFCB-RVRV110640', '', '1', '50', 'btl', '11000.0000', '11000.0000', 'IDR', 'FRM/PU/09-2015-00003');
INSERT INTO `trn_purchase_return_det` VALUES ('FRM/PRU/09-2015-00001', '5', 'PFCB-SSRV115509', '', '2', '50', 'btl', '24000.0000', '48000.0000', 'IDR', 'FRM/PU/09-2015-00003');

-- ----------------------------
-- Table structure for trn_purchase_return_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_purchase_return_head`;
CREATE TABLE `trn_purchase_return_head` (
  `no_purchase_return` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `payment_method` int(25) DEFAULT NULL,
  `subtotal` double(19,4) DEFAULT NULL,
  `freight` double(19,4) DEFAULT NULL,
  `disc` double(19,4) DEFAULT NULL,
  `tax` double(19,4) DEFAULT NULL,
  `total` double(19,4) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  `id_warehouse` varchar(60) DEFAULT NULL,
  PRIMARY KEY (`no_purchase_return`),
  KEY `trn_purchase_return_head_ibfk_1` (`id_supplier`),
  KEY `trn_purchase_return_head_ibfk_2` (`payment_method`),
  CONSTRAINT `trn_purchase_return_head_ibfk_1` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_purchase_return_head_ibfk_2` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_purchase_return_head
-- ----------------------------
INSERT INTO `trn_purchase_return_head` VALUES ('FRM/PRU/09-2015-00001', '2015-09-14 00:00:00', 'SUPP.000002', '2', '59000.0000', '0.0000', '0.0000', '10.0000', '64900.0000', 'Purchase Return Demo', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', '1', 'WH001');

-- ----------------------------
-- Table structure for trn_received_order_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_received_order_det`;
CREATE TABLE `trn_received_order_det` (
  `no_received_order` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `received_qty` int(11) DEFAULT NULL,
  `id_warehouse` varchar(30) DEFAULT NULL,
  `warehouse_name` varchar(250) DEFAULT NULL,
  KEY `trn_purchase_order_det_item_ibfk_1` (`id_item`),
  KEY `trn_purchase_order_det_ibfk_1` (`no_received_order`),
  KEY `trn_purchase_order_det_item_ibfk_6` (`id_unit`),
  KEY `id_warehouse` (`id_warehouse`),
  CONSTRAINT `trn_received_order_det_ibfk_1` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_received_order_det_ibfk_2` FOREIGN KEY (`no_received_order`) REFERENCES `trn_received_order_head` (`no_received_order`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_received_order_det_ibfk_3` FOREIGN KEY (`id_warehouse`) REFERENCES `mst_warehouse` (`id_warehouse`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_received_order_det
-- ----------------------------
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/4-2015-00001', '0', 'PFCB-SSRV115509', '', '10', 'btl', '10', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00001', '0', 'PFCB-RVRV113644', 'Penerimaan Barang Detail Demo 7-2015-000001', '10', 'pack', '10', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00001', '1', 'PFCB-RVRV110640', 'Penerimaan Barang Detail Demo 7-2015-000001', '25', 'btl', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00001', '2', 'PFCB-RVRV112337', 'Penerimaan Barang Detail Demo 7-2015-000001', '50', 'pcs', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00002', '0', 'PFCB-RVRV110640', 'Received Item Detail Demo 7-2015-000002', '25', 'btl', '5', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00003', '0', 'PFCB-RVRV091158', 'Received Item Detail Demo 7-2015-000003', '10', 'pack', '10', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00003', '1', 'PFCB-RVRV091750', 'Received Item Detail Demo 7-2015-000003', '20', 'pack', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00003', '2', 'PFCB-RVRV110640', 'Received Item Detail Demo 7-2015-000003', '50', 'btl', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00004', '0', 'PFCB-RVRV111453', 'Received Order Detail Demo 7-2015-000004', '20', 'pack', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/7-2015-00004', '1', 'PFCB-RVRV112142', 'Received Order Detail Demo 7-2015-000004', '20', 'pack', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00001', '0', 'PFCB-RVRV112621', 'Received Item Detail Demo 8-2015-000001', '50', 'pcs', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00001', '1', 'PFCB-RVRV113247', 'Received Item Detail Demo 8-2015-000001', '50', 'pcs', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00001', '2', 'PFCB-RVRV113959', 'Received Item Detail Demo 8-2015-000001', '10', 'pack', '10', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00002', '0', 'PFCB-RVRV114632', 'Received Item Detail Demo 8-2015-000002', '50', 'pack', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00002', '1', 'PFCB-RVRV114728', 'Received Item Detail Demo 8-2015-000002', '30', 'pack', '30', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00003', '0', 'PFCB-RVRV115705', 'Received Item Detail Demo 8-2015-000003', '20', 'pack', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00003', '1', 'PFCB-RVRV115839', 'Received Item Detail Demo 8-2015-000003', '25', 'pack', '25', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00003', '2', 'PFCB-RWRV084000', 'Received Item Detail Demo 8-2015-000003', '20', 'pack', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00003', '3', 'PFCB-RWRV084324', 'Received Item Detail Demo 8-2015-000003', '40', 'pack', '40', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00004', '0', 'PFCB-RWRV084324', '', '20', 'pack', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/8-2015-00004', '1', 'PFCB-RWRV084538', '', '50', 'pack', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00001', '0', 'PFCB-RVRV110640', 'Received Item Demo Detail', '50', 'btl', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00001', '1', 'PFCB-RVRV113349', 'Received Item Demo Detail', '10', 'pack', '10', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00001', '2', 'PFCB-RVRV113644', 'Received Item Demo Detail', '10', 'pack', '10', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00001', '3', 'PFCB-RVRV113804', 'Received Item Demo Detail', '20', 'pack', '20', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00001', '4', 'PFCB-SSRV115509', 'Received Item Demo Detail', '50', 'btl', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00002', '0', 'PFCB-RVRV110640', 'Received Item Detail', '50', 'btl', '50', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00002', '1', 'PFCB-RVRV113349', 'Received Item Detail', '100', 'pack', '100', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00002', '2', 'PFCB-RVRV113644', 'Received Item Detail', '100', 'pack', '100', 'WH001', 'Default Warehouse');
INSERT INTO `trn_received_order_det` VALUES ('FRM/REV/09-2015-00002', '3', 'PFCB-RVRV113804', 'Received Item Detail', '25', 'pack', '25', 'WH001', 'Default Warehouse');

-- ----------------------------
-- Table structure for trn_received_order_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_received_order_head`;
CREATE TABLE `trn_received_order_head` (
  `no_received_order` varchar(30) NOT NULL,
  `no_purchase_order` varchar(30) DEFAULT NULL,
  `id_supplier` varchar(25) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `notes` longtext,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_received_order`),
  KEY `id_supplier` (`id_supplier`),
  KEY `no_purchase_order` (`no_purchase_order`),
  CONSTRAINT `trn_received_order_head_ibfk_1` FOREIGN KEY (`id_supplier`) REFERENCES `mst_supplier` (`id_supplier`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_received_order_head_ibfk_2` FOREIGN KEY (`no_purchase_order`) REFERENCES `trn_purchase_order_head` (`no_purchase_order`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_received_order_head
-- ----------------------------
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/09-2015-00001', 'FRM/PO/09-2015-00001', 'SUPP.000002', '2015-09-14', 'Received Item Demo', 'admin', '2015-09-14 00:00:00', '2015-09-14 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/09-2015-00002', 'FRM/PO/09-2015-00002', 'SUPP.000003', '2015-09-16', 'Received Item', 'admin', '2015-09-16 00:00:00', '2015-09-16 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/4-2015-00001', 'FRM/PO/4-2015-00001', 'SUPP.000001', '2015-04-10', 'Received Item Example', 'admin', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/7-2015-00001', 'FRM/PO/7-2015-00001', 'SUPP.000002', '2015-07-25', 'Penerimaan Barang Demo 7-2015-000001', 'admin', '2015-07-25 00:00:00', '2015-07-25 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/7-2015-00002', 'FRM/PO/7-2015-00001', 'SUPP.000002', '2015-07-25', 'Received Item Demo 7-2015-000002', 'admin', '2015-07-25 00:00:00', '2015-07-25 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/7-2015-00003', 'FRM/PO/7-2015-00002', 'SUPP.000002', '2015-07-30', 'Received Item Demo 7-2015-000003', 'admin', '2015-07-25 00:00:00', '2015-07-25 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/7-2015-00004', 'FRM/PO/7-2015-00003', 'SUPP.000001', '2015-07-30', 'Received Order Demo 7-2015-000004', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/8-2015-00001', 'FRM/PO/7-2015-00004', 'SUPP.000001', '2015-08-03', 'Received Item Demo 8-2015-000001', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/8-2015-00002', 'FRM/PO/7-2015-00005', 'SUPP.000001', '2015-08-04', 'Received Item Demo 8-2015-000002', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/8-2015-00003', 'FRM/PO/8-2015-00001', 'SUPP.000001', '2015-08-10', 'Received Item Demo 8-2015-000001', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin');
INSERT INTO `trn_received_order_head` VALUES ('FRM/REV/8-2015-00004', 'FRM/PO/8-2015-00002', 'SUPP.000001', '2015-08-12', 'Received Item Demo 8-2015-000004', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin');

-- ----------------------------
-- Table structure for trn_reconcile_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_reconcile_det`;
CREATE TABLE `trn_reconcile_det` (
  `no_reconcile` varchar(30) NOT NULL,
  `id_account` varchar(25) NOT NULL,
  `notes` text,
  `amount_in` double DEFAULT NULL,
  `amount_out` double DEFAULT NULL,
  KEY `fk_acc_recon_det` (`id_account`),
  KEY `fk_no_reconcile` (`no_reconcile`),
  CONSTRAINT `trn_reconcile_det_ibfk_1` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_reconcile_det_ibfk_2` FOREIGN KEY (`no_reconcile`) REFERENCES `trn_reconcile_head` (`no_reconcile`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_reconcile_det
-- ----------------------------
INSERT INTO `trn_reconcile_det` VALUES ('FRM/REC/09-2015-00001', '4-2101', 'Pendapatan Bunga Giro belum tercatat', '56000', '0');
INSERT INTO `trn_reconcile_det` VALUES ('FRM/REC/09-2015-00001', '6-1199', 'Biaya adm bank BCA', '0', '31000');

-- ----------------------------
-- Table structure for trn_reconcile_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_reconcile_head`;
CREATE TABLE `trn_reconcile_head` (
  `no_reconcile` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_account_bank` varchar(25) DEFAULT NULL,
  `balance_before` double DEFAULT NULL,
  `reconcile` double DEFAULT NULL,
  `balance_after` double DEFAULT NULL,
  `notes` text,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `id_currency` varchar(30) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`no_reconcile`),
  KEY `id_account_bank` (`id_account_bank`),
  KEY `id_currency` (`id_currency`),
  CONSTRAINT `trn_reconcile_head_ibfk_1` FOREIGN KEY (`id_account_bank`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE,
  CONSTRAINT `trn_reconcile_head_ibfk_2` FOREIGN KEY (`id_currency`) REFERENCES `mst_currency` (`id_currency`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Records of trn_reconcile_head
-- ----------------------------
INSERT INTO `trn_reconcile_head` VALUES ('FRM/REC/09-2015-00001', '2015-09-27 00:00:00', '1-1104', '159345340', '25000', '159370340', 'Demo Rekonsiliasi Bank', 'admin', '2015-09-27 00:00:00', 'admin', '2015-09-27 00:00:00', 'IDR', '1');

-- ----------------------------
-- Table structure for trn_request_order_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_request_order_det`;
CREATE TABLE `trn_request_order_det` (
  `no_request_order` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `flag_status` int(11) DEFAULT NULL,
  `approve_date` datetime DEFAULT NULL,
  `approve_qty` int(11) DEFAULT NULL,
  `flag_po` int(11) DEFAULT NULL,
  KEY `trn_purchase_order_det_item_ibfk_1` (`id_item`),
  KEY `trn_purchase_order_det_ibfk_1` (`no_request_order`),
  KEY `trn_purchase_order_det_item_ibfk_6` (`id_unit`),
  CONSTRAINT `trn_request_order_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_request_order_det_ibfk_4` FOREIGN KEY (`no_request_order`) REFERENCES `trn_request_order_head` (`no_request_order`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_request_order_det
-- ----------------------------
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/4-2015-00001', '1', 'PFCB-SSRV115509', 'Requisition Examples 1', '10', 'btl', '1', '2015-04-10 00:00:00', '10', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00001', '1', 'PFCB-RVRV113644', 'Permintaan Pembelian Juli Minggu 2 Kosmetik', '10', 'pack', '1', '2015-07-21 00:00:00', '10', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00001', '2', 'PFCB-RVRV110640', 'Permintaan Pembelian Juli Minggu 2 Kosmetik', '25', 'btl', '1', '2015-07-21 00:00:00', '25', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00001', '3', 'PFCB-RVRV112337', 'Permintaan Pembelian Juli Minggu 2 ATK', '50', 'pcs', '1', '2015-07-21 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00002', '1', 'PFCB-RVRV091158', 'Purchase Requisition Detail Demo 7-2015-2', '10', 'pack', '1', '2015-07-21 00:00:00', '10', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00002', '2', 'PFCB-RVRV091750', 'Purchase Requisition Detail Demo 7-2015-2', '20', 'pack', '1', '2015-07-21 00:00:00', '20', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00002', '3', 'PFCB-RVRV110640', 'Purchase Requisition Detail Demo 7-2015-2', '50', 'btl', '1', '2015-07-21 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00003', '1', 'PFCB-RVRV111453', 'Purchase Requisition Detail Demo 7-2015-3', '20', 'pack', '1', '2015-07-25 00:00:00', '20', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00003', '2', 'PFCB-RVRV112142', 'Purchase Requisition Detail Demo 7-2015-3', '20', 'pack', '1', '2015-07-25 00:00:00', '20', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00004', '1', 'PFCB-RVRV112621', 'Purchase Requisition Detail Demo 7-2015-4', '50', 'pcs', '1', '2015-07-25 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00004', '2', 'PFCB-RVRV113247', 'Purchase Requisition Detail Demo 7-2015-4', '50', 'pcs', '1', '2015-07-25 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00004', '3', 'PFCB-RVRV113959', 'Purchase Requisition Detail Demo 7-2015-4', '10', 'pack', '1', '2015-07-25 00:00:00', '10', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00005', '1', 'PFCB-RVRV114632', 'Purchase Requisition Detail Demo 7-2015-5', '50', 'pack', '1', '2015-07-25 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00005', '2', 'PFCB-RVRV114728', 'Purchase Requisition Detail Demo 7-2015-5', '30', 'pack', '1', '2015-07-25 00:00:00', '30', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00006', '1', 'PFCB-RVRV115705', 'Purchase Request Detail Demo 7/2015-00006', '20', 'pack', '1', '2015-07-25 00:00:00', '20', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00006', '2', 'PFCB-RVRV115839', 'Purchase Request Detail Demo 7/2015-00006', '25', 'pack', '1', '2015-07-25 00:00:00', '25', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00006', '3', 'PFCB-RWRV084000', 'Purchase Request Detail Demo 7/2015-00006', '20', 'pack', '1', '2015-07-25 00:00:00', '20', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00006', '4', 'PFCB-RWRV084324', 'Purchase Request Detail Demo 7/2015-00006', '40', 'pack', '1', '2015-07-25 00:00:00', '40', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00007', '1', 'PFCB-RWRV084324', 'PR Detail Demo 7-2015-00007', '20', 'pack', '1', '2015-07-25 00:00:00', '20', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/7-2015-00007', '2', 'PFCB-RWRV084538', 'PR Detail Demo 7-2015-00007', '50', 'pack', '1', '2015-07-25 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00001', '1', 'PFCB-RVRV110640', 'PR Demo Detail', '50', 'btl', '1', '2015-09-14 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00001', '2', 'PFCB-RVRV113349', 'PR Demo Detail', '10', 'pack', '1', '2015-09-14 00:00:00', '10', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00001', '3', 'PFCB-RVRV113644', 'PR Demo Detail', '10', 'pack', '1', '2015-09-14 00:00:00', '10', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00001', '4', 'PFCB-RVRV113804', 'PR Demo Detail', '20', 'pack', '1', '2015-09-14 00:00:00', '20', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00001', '5', 'PFCB-SSRV115509', 'PR Demo Detail', '50', 'btl', '1', '2015-09-14 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00002', '1', 'PFCB-RVRV110640', 'Requisition Demo Detail', '50', 'btl', '1', '2015-09-16 00:00:00', '50', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00002', '2', 'PFCB-RVRV113349', 'Requisition Demo Detail', '100', 'pack', '1', '2015-09-16 00:00:00', '100', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00002', '3', 'PFCB-RVRV113644', 'Requisition Demo Detail', '100', 'pack', '1', '2015-09-16 00:00:00', '100', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/09-2015-00002', '4', 'PFCB-RVRV113804', 'Requisition Demo Detail', '25', 'pack', '1', '2015-09-16 00:00:00', '25', '1');
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/10-2015-00001', '1', '0915000001', 'Demo Detail RO', '100', 'pcs', '0', null, null, null);
INSERT INTO `trn_request_order_det` VALUES ('FRM/RO/10-2015-00001', '2', '0915000002', 'Demo Detail RO', '50', 'pcs', '0', null, null, null);

-- ----------------------------
-- Table structure for trn_request_order_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_request_order_head`;
CREATE TABLE `trn_request_order_head` (
  `no_request_order` varchar(30) NOT NULL,
  `id_warehouse` varchar(30) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `date_required` date DEFAULT NULL,
  `notes` longtext,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_request_order`),
  KEY `trn_request_order_head_ibfk_2` (`id_warehouse`),
  CONSTRAINT `trn_request_order_head_ibfk_2` FOREIGN KEY (`id_warehouse`) REFERENCES `mst_warehouse` (`id_warehouse`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_request_order_head
-- ----------------------------
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/09-2015-00001', 'WH001', '2015-09-14', '2015-09-14', 'PR Demo', 'admin', '2015-09-14 00:00:00', '2015-09-14 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/09-2015-00002', 'WH001', '2015-09-16', '2015-09-16', 'Requisition Demo', 'admin', '2015-09-16 00:00:00', '2015-09-16 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/10-2015-00001', 'WH001', '2015-10-01', '2015-10-01', 'Demo RO', 'admin', '2015-10-01 00:00:00', '2015-10-01 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/4-2015-00001', 'WH001', '2015-04-10', '2015-04-10', 'Requisition Example', 'admin', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/7-2015-00001', 'WH001', '2015-07-21', '2015-07-24', 'Permintaan Pembelian Juli Minggu 2 tahun 2015', 'admin', '2015-07-21 00:00:00', '2015-07-21 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/7-2015-00002', 'WH001', '2015-07-22', '2015-07-27', 'Purchase Requisition Demo 7-2015-2', 'admin', '2015-07-21 00:00:00', '2015-07-21 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/7-2015-00003', 'WH001', '2015-07-23', '2015-07-27', 'Purchase Requisition Demo 7-2015-3', 'admin', '2015-07-21 00:00:00', '2015-07-21 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/7-2015-00004', 'WH001', '2015-07-24', '2015-07-28', 'Purchase Requisition Demo 7-2015-4', 'admin', '2015-07-21 00:00:00', '2015-07-21 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/7-2015-00005', 'WH001', '2015-07-24', '2015-07-28', 'Purchase Requisition Demo 7-2015-5', 'admin', '2015-07-21 00:00:00', '2015-07-21 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/7-2015-00006', 'WH001', '2015-07-27', '2015-07-31', 'Purchase Request Demo 7/2015-00006', 'admin', '2015-07-24 00:00:00', '2015-07-24 00:00:00', 'admin');
INSERT INTO `trn_request_order_head` VALUES ('FRM/RO/7-2015-00007', 'WH001', '2015-07-27', '2015-07-31', 'PR Detail 7-2015-00007', 'admin', '2015-07-24 00:00:00', '2015-07-24 00:00:00', 'admin');

-- ----------------------------
-- Table structure for trn_sales_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_sales_det`;
CREATE TABLE `trn_sales_det` (
  `no_sales` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `trn_sales_det_ibfk_1` (`no_sales`),
  KEY `trn_sales_det_ibfk_2` (`id_item`),
  KEY `trn_sales_det_ibfk_5` (`id_unit`),
  CONSTRAINT `trn_sales_det_ibfk_1` FOREIGN KEY (`no_sales`) REFERENCES `trn_sales_head` (`no_sales`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_sales_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_sales_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_sales_det
-- ----------------------------
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/4-2015-00001', '1', 'PFCB-SSRV115509', 'Example SO Detail', '0', 'btl', '27500.0000', '27500.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/4-2015-00002', '1', 'PFCB-SSRV115509', 'SO Example', '1', 'btl', '27500.0000', '27500.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/8-2015-00001', '1', 'PFCB-RVRV110640', 'SO Detail Demo 8-2015-000001', '5', 'btl', '14000.0000', '70000.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/8-2015-00001', '2', 'PFCB-RVRV091750', 'SO Detail Demo 8-2015-000001', '12', 'pcs', '1000.0000', '12000.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/09-2015-00001', '1', 'PFCB-RVRV113644', 'Sales Order Demo Detail', '5', 'btl', '21000.0000', '105000.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/09-2015-00001', '2', 'PFCB-RVRV113804', 'Sales Order Demo Detail', '5', 'btl', '21000.0000', '105000.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/09-2015-00001', '3', 'PFCB-RVRV110640', 'Sales Order Demo Detail', '5', 'btl', '14000.0000', '70000.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/09-2015-00001', '4', 'PFCB-SSRV115509', 'Sales Order Demo Detail', '2', 'btl', '27500.0000', '55000.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/10-2015-00002', '1', '0915000002', 'Demo SO', '11', 'pcs', '1638.0000', '18018.0000', 'IDR');
INSERT INTO `trn_sales_det` VALUES ('FRM/SA/10-2015-00002', '2', '0915000001', 'Demo SO', '3', 'pcs', '103750.0000', '311250.0000', 'IDR');

-- ----------------------------
-- Table structure for trn_sales_discitem_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_sales_discitem_det`;
CREATE TABLE `trn_sales_discitem_det` (
  `no_sales` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `qty` double NOT NULL,
  `id_unit` varchar(60) NOT NULL,
  KEY `no_sales_order` (`no_sales`),
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `trn_sales_discitem_det_ibfk_1` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_discitem_det_ibfk_2` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_discitem_det_ibfk_3` FOREIGN KEY (`no_sales`) REFERENCES `trn_sales_head` (`no_sales`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_sales_discitem_det
-- ----------------------------
INSERT INTO `trn_sales_discitem_det` VALUES ('FRM/SA/10-2015-00002', 'PFCB-RVRV113959', 'Dream Donna Buku Gambar', '1', 'pcs');
INSERT INTO `trn_sales_discitem_det` VALUES ('FRM/SA/10-2015-00002', 'PFCB-RVRV091158', 'Ballpoint Standard', '2', 'pcs');

-- ----------------------------
-- Table structure for trn_sales_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_sales_head`;
CREATE TABLE `trn_sales_head` (
  `no_sales` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `no_sales_order` varchar(30) DEFAULT NULL,
  `id_customer` varchar(25) DEFAULT NULL,
  `payment_method` int(11) DEFAULT NULL,
  `subtotal` double(19,4) DEFAULT NULL,
  `discount` double(19,4) DEFAULT NULL,
  `tax` double(19,4) DEFAULT NULL,
  `total` double(19,4) DEFAULT NULL,
  `term` int(11) DEFAULT NULL,
  `termpaydisc` int(11) DEFAULT NULL,
  `discpay` int(11) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `id_account` varchar(60) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  PRIMARY KEY (`no_sales`),
  KEY `trn_sales_head_ibfk_1` (`id_customer`),
  KEY `trn_sales_head_ibfk_2` (`no_sales_order`),
  KEY `trn_sales_head_ibfk_3` (`payment_method`),
  KEY `id_account` (`id_account`),
  CONSTRAINT `trn_sales_head_ibfk_1` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_head_ibfk_2` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_head_ibfk_3` FOREIGN KEY (`id_account`) REFERENCES `mst_account` (`id_account`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_head_ibfk_4` FOREIGN KEY (`no_sales_order`) REFERENCES `trn_sales_order_head` (`no_sales_order`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_sales_head
-- ----------------------------
INSERT INTO `trn_sales_head` VALUES ('FRM/SA/09-2015-00001', '2015-09-14 00:00:00', 'FRM/SO/09-2015-00001', 'CUST.000003', '2', '335000.0000', '0.0000', '10.0000', '368500.0000', '30', '10', '2', 'Sales Invoice Demo', '1-1301', 'admin', '2015-09-14 00:00:00', 'admin', '2015-09-14 00:00:00', '1');
INSERT INTO `trn_sales_head` VALUES ('FRM/SA/10-2015-00002', '2015-10-01 00:00:00', 'FRM/SO/09-2015-00004', 'CUST.000001', '2', '329268.0000', '10.0000', '10.0000', '325975.0000', '30', '10', '2', 'Demo SO', '1-1301', 'admin', '2015-10-01 00:00:00', 'admin', '2015-10-01 00:00:00', '1');
INSERT INTO `trn_sales_head` VALUES ('FRM/SA/4-2015-00001', '2015-04-10 00:00:00', 'FRM/SO/4-2015-00001', 'CUST.000001', '2', '27500.0000', '0.0000', '0.0000', '27500.0000', '30', '10', '2', 'SO Example', '1-1301', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', '1');
INSERT INTO `trn_sales_head` VALUES ('FRM/SA/4-2015-00002', '2015-04-10 00:00:00', 'FRM/SO/4-2015-00002', 'CUST.000001', '2', '27500.0000', '0.0000', '0.0000', '27500.0000', '30', '10', '2', 'SO Example', '1-1301', 'admin', '2015-04-10 00:00:00', 'admin', '2015-04-10 00:00:00', '1');
INSERT INTO `trn_sales_head` VALUES ('FRM/SA/8-2015-00001', '2015-08-07 00:00:00', 'FRM/SO/8-2015-00001', 'CUST.000002', '2', '82000.0000', '0.0000', '10.0000', '90200.0000', '30', '10', '2', 'SO Demo 8-2015-000001', '1-1301', 'admin', '2015-07-25 00:00:00', 'admin', '2015-07-25 00:00:00', '1');

-- ----------------------------
-- Table structure for trn_sales_order_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_sales_order_det`;
CREATE TABLE `trn_sales_order_det` (
  `no_sales_order` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  `sent_qty` int(11) DEFAULT NULL,
  `id_type` varchar(30) DEFAULT NULL,
  `id_category` varchar(30) DEFAULT NULL,
  `id_brand` varchar(30) DEFAULT NULL,
  KEY `trn_sales_order_det_ibfk_1` (`no_sales_order`),
  KEY `trn_sales_order_det_ibfk_2` (`id_item`),
  KEY `id_type` (`id_type`),
  KEY `id_category` (`id_category`),
  KEY `id_brand` (`id_brand`),
  CONSTRAINT `trn_sales_order_det_ibfk_1` FOREIGN KEY (`no_sales_order`) REFERENCES `trn_sales_order_head` (`no_sales_order`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_order_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_order_det_ibfk_3` FOREIGN KEY (`id_type`) REFERENCES `mst_itemjenis` (`mst_itemjenis_id`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_order_det_ibfk_4` FOREIGN KEY (`id_category`) REFERENCES `mst_itemcat` (`mst_itemcat_id`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_order_det_ibfk_5` FOREIGN KEY (`id_brand`) REFERENCES `mst_itembrand` (`mst_itembrand_id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_sales_order_det
-- ----------------------------
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/4-2015-00001', '1', 'PFCB-SSRV115509', 'Example SO Detail', '1', 'btl', '27500.0000', '27500.0000', 'IDR', '1', 'KFJSS5414', 'PRISS0345', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/4-2015-00002', '1', 'PFCB-SSRV115509', 'SO Example', '1', 'btl', '27500.0000', '27500.0000', 'IDR', '1', 'KFJSS5414', 'PRISS0345', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00001', '1', 'PFCB-RVRV110640', 'SO Detail Demo 8-2015-000001', '5', 'btl', '14000.0000', '70000.0000', 'IDR', '5', 'KFJSS5414', 'SVDRV0723', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00001', '2', 'PFCB-RVRV091750', 'SO Detail Demo 8-2015-000001', '12', 'pcs', '1000.0000', '12000.0000', 'IDR', '12', 'ACRRV1021', 'PVERV0725', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00002', '1', 'PFCB-RVRV110640', 'SO detail demo 8-2015-00002', '12', 'btl', '14000.0000', '168000.0000', 'IDR', null, 'KFJSS5414', 'SVDRV0723', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00002', '2', 'PFCB-RVRV111453', 'SO detail demo 8-2015-00002', '10', 'pcs', '250.0000', '2500.0000', 'IDR', null, 'ACRRV1021', 'BZERV0719', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00003', '1', 'PFCB-RVRV112337', 'SO detail demo 8-2015-00003', '12', 'pcs', '11000.0000', '132000.0000', 'IDR', null, 'ACRRV1021', 'BZERV0707', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00003', '2', 'PFCB-RVRV112621', 'SO detail demo 8-2015-00003', '12', 'pcs', '7500.0000', '90000.0000', 'IDR', null, 'ACRRV1021', 'SLIRV0700', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00003', '3', 'PFCB-RVRV113247', 'SO detail demo 8-2015-00003', '12', 'pcs', '9000.0000', '108000.0000', 'IDR', null, 'ACRRV1021', 'SLIRV0700', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00004', '1', 'PFCB-RVRV113644', 'SO detail demo 8-2015-00004', '5', 'btl', '21000.0000', '105000.0000', 'IDR', null, 'KFJSS5414', 'PRISS0345', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00004', '2', 'PFCB-RVRV113959', 'SO detail demo 8-2015-00004', '10', 'pcs', '4000.0000', '40000.0000', 'IDR', null, 'ACRRV1021', 'BLBRV0709', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00005', '1', 'PFCB-RVRV114632', 'SO detail demo 8-2015-00005', '10', 'btl', '8500.0000', '85000.0000', 'IDR', '10', 'BLDRV4548', 'KVTRV0707', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00005', '2', 'PFCB-RVRV114728', 'SO detail demo 8-2015-00005', '10', 'pcs', '10800.0000', '108000.0000', 'IDR', '10', 'BLDRV4548', 'KVTRV0707', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/8-2015-00005', '3', 'PFCB-RVRV115839', 'SO detail demo 8-2015-00005', '5', 'pcs', '1700.0000', '8500.0000', 'IDR', '5', 'MZERV5433', 'MZERV0748', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/7-2015-00001', '1', 'PFCB-RVRV113247', '', '5', 'pcs', '9000.0000', '45000.0000', 'IDR', null, 'ACRRV1021', 'SLIRV0700', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/7-2015-00001', '2', 'PFCB-RWRV084538', '', '12', 'pcs', '5000.0000', '60000.0000', 'IDR', null, 'MZERV5433', 'MZERW0725', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/7-2015-00001', '3', 'PFCB-RWRV084324', '', '12', 'pcs', '3500.0000', '42000.0000', 'IDR', null, 'MRBRV5506', 'MZVRV0746', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/09-2015-00001', '1', 'PFCB-RVRV113644', 'Sales Order Demo Detail', '5', 'btl', '21000.0000', '105000.0000', 'IDR', '5', 'KFJSS5414', 'PRISS0345', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/09-2015-00001', '2', 'PFCB-RVRV113804', 'Sales Order Demo Detail', '5', 'btl', '21000.0000', '105000.0000', 'IDR', '5', 'KFJSS5414', 'PRISS0345', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/09-2015-00001', '3', 'PFCB-RVRV110640', 'Sales Order Demo Detail', '5', 'btl', '14000.0000', '70000.0000', 'IDR', '5', 'KFJSS5414', 'SVDRV0723', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/09-2015-00001', '4', 'PFCB-SSRV115509', 'Sales Order Demo Detail', '2', 'btl', '27500.0000', '55000.0000', 'IDR', '2', 'KFJSS5414', 'PRISS0345', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/09-2015-00004', '1', '0915000002', 'Demo SO', '11', 'pcs', '1800.0000', '19800.0000', 'IDR', '11', 'ACRRV1021', 'BFCRV0739', 'NN');
INSERT INTO `trn_sales_order_det` VALUES ('FRM/SO/09-2015-00004', '2', '0915000001', 'Demo SO', '3', 'pcs', '125000.0000', '375000.0000', 'IDR', '3', 'PVIRZ1741', 'SYFRZ0951', 'BYYRY4659');

-- ----------------------------
-- Table structure for trn_sales_order_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_sales_order_head`;
CREATE TABLE `trn_sales_order_head` (
  `no_sales_order` varchar(30) NOT NULL,
  `id_customer` varchar(25) DEFAULT NULL,
  `date_trn` date DEFAULT NULL,
  `notes` text,
  `subtotal` double(19,2) DEFAULT NULL,
  `tax` double(19,2) DEFAULT NULL,
  `total` double(19,2) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  `flag_status_invoice` int(11) DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  `id_employee` varchar(60) DEFAULT NULL,
  `discount` double DEFAULT NULL,
  `nett_total` double DEFAULT NULL,
  `is_discbrand` int(1) DEFAULT NULL,
  `is_disctype` int(1) DEFAULT NULL,
  `is_disccat` int(1) DEFAULT NULL,
  `is_discitem` int(1) DEFAULT NULL,
  PRIMARY KEY (`no_sales_order`),
  KEY `id_customer` (`id_customer`),
  KEY `id_employee` (`id_employee`),
  CONSTRAINT `trn_sales_order_head_ibfk_1` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_sales_order_head
-- ----------------------------
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/09-2015-00001', 'CUST.000003', '2015-09-14', 'Sales Order Demo', '335000.00', '10.00', '368500.00', 'admin', '2015-09-14 00:00:00', '2015-09-14 00:00:00', 'admin', '1', '1', 'OFC', '0', '335000', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/09-2015-00004', 'CUST.000001', '2015-09-30', 'Demo SO', '329268.00', '10.00', '325975.00', 'admin', '2015-09-30 00:00:00', '2015-09-30 00:00:00', 'admin', '1', '1', 'EMPY.000001', '10', '296341', '1', '1', '1', '1');
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/4-2015-00001', 'CUST.000001', '2015-04-10', 'SO Example', '27500.00', '0.00', '27500.00', 'admin', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin', '1', '1', 'EMPY.000001', '0', '27500', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/4-2015-00002', 'CUST.000001', '2015-04-10', 'SO Example', '27500.00', '0.00', '27500.00', 'admin', '2015-04-10 00:00:00', '2015-04-10 00:00:00', 'admin', '1', '1', 'OFC', '0', '27500', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/7-2015-00001', 'CUST.000004', '2015-07-26', '', '147000.00', '10.00', '161700.00', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', null, '1', 'OFC', '0', '147000', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/8-2015-00001', 'CUST.000002', '2015-08-04', 'SO Demo 8-2015-000001', '82000.00', '10.00', '90200.00', 'admin', '2015-07-25 00:00:00', '2015-07-25 00:00:00', 'admin', '1', '1', 'EMPY.000001', '0', '82000', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/8-2015-00002', 'CUST.000004', '2015-08-11', 'SO demo 8-2015-00002', '170500.00', '10.00', '187550.00', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', null, '1', 'OFC', '0', '170500', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/8-2015-00003', 'CUST.000003', '2015-08-10', 'SO demo 8-2015-00003', '330000.00', '10.00', '363000.00', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', null, '1', 'OFC', '0', '330000', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/8-2015-00004', 'CUST.000004', '2015-08-20', 'SO demo 8-2015-00004', '145000.00', '10.00', '159500.00', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', null, '1', 'EMPY.000001', '0', '145000', null, null, null, null);
INSERT INTO `trn_sales_order_head` VALUES ('FRM/SO/8-2015-00005', 'CUST.000001', '2015-08-25', 'SO demo 8-2015-00005', '201500.00', '10.00', '221650.00', 'admin', '2015-07-26 00:00:00', '2015-07-26 00:00:00', 'admin', null, '1', 'OFC', '0', '201500', null, null, null, null);

-- ----------------------------
-- Table structure for trn_sales_return_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_sales_return_det`;
CREATE TABLE `trn_sales_return_det` (
  `no_sales_return` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  `no_sales` varchar(30) DEFAULT NULL,
  KEY `trn_sales_return_nosalesreturn` (`no_sales_return`),
  KEY `trn_sales_return_nosales` (`no_sales`),
  KEY `trn_sales_return_nosalesreturn_fkey3` (`id_item`),
  KEY `trn_sales_return_nosalesreturn_fkey4` (`id_unit`),
  CONSTRAINT `trn_sales_return_det_ibfk_1` FOREIGN KEY (`no_sales`) REFERENCES `trn_sales_head` (`no_sales`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_sales_return_det_ibfk_2` FOREIGN KEY (`no_sales_return`) REFERENCES `trn_sales_return_head` (`no_sales_return`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_sales_return_det_ibfk_3` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_sales_return_det_ibfk_4` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_sales_return_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_sales_return_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_sales_return_head`;
CREATE TABLE `trn_sales_return_head` (
  `no_sales_return` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_customer` varchar(30) DEFAULT NULL,
  `payment_method` int(25) DEFAULT NULL,
  `subtotal` double(19,4) DEFAULT NULL,
  `disc` double(19,4) DEFAULT NULL,
  `tax` double(19,4) DEFAULT NULL,
  `total` double(19,4) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `kurs` double DEFAULT NULL,
  `id_warehouse` varchar(60) DEFAULT NULL,
  PRIMARY KEY (`no_sales_return`),
  KEY `trn_sales_return_id_customer_fkey` (`id_customer`),
  KEY `trn_sales_return_id_paymethod_fkey` (`payment_method`),
  CONSTRAINT `trn_sales_return_head_ibfk_2` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON UPDATE CASCADE,
  CONSTRAINT `trn_sales_return_head_ibfk_3` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_sales_return_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_service_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_service_det`;
CREATE TABLE `trn_service_det` (
  `no_service` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_service` varchar(25) DEFAULT NULL,
  `id_employee` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `no_sales` (`no_service`),
  KEY `trn_service_det_id_employee_fkey` (`id_employee`),
  KEY `trn_service_det_no_service_fkey3` (`id_service`),
  CONSTRAINT `trn_service_det_ibfk_1` FOREIGN KEY (`no_service`) REFERENCES `trn_service_head` (`no_service`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_service_det_ibfk_2` FOREIGN KEY (`id_service`) REFERENCES `mst_service` (`id_service`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_service_det_ibfk_3` FOREIGN KEY (`id_employee`) REFERENCES `mst_employee` (`id_employee`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_service_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_service_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_service_head`;
CREATE TABLE `trn_service_head` (
  `no_service` varchar(30) NOT NULL,
  `id_customer` varchar(25) DEFAULT NULL,
  `payment_method` int(25) DEFAULT NULL,
  `subtotal` double(19,4) DEFAULT NULL,
  `discount` double(19,4) DEFAULT NULL,
  `tax` double(19,4) DEFAULT NULL,
  `total` double(19,4) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `created_user` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_user` varchar(30) DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `date_trn` datetime DEFAULT NULL,
  `cust_name` varchar(250) DEFAULT NULL,
  `flag_member` tinyint(1) DEFAULT NULL,
  `cust_address` text,
  `cust_phone` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`no_service`),
  KEY `id_customer` (`id_customer`),
  KEY `trn_service_payment_method` (`payment_method`),
  CONSTRAINT `trn_service_head_ibfk_1` FOREIGN KEY (`id_customer`) REFERENCES `mst_customer` (`id_customer`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `trn_service_head_ibfk_2` FOREIGN KEY (`payment_method`) REFERENCES `ref_pay_method` (`ref_status_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_service_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_service_item_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_service_item_det`;
CREATE TABLE `trn_service_item_det` (
  `no_service` varchar(30) DEFAULT NULL,
  `number_asc` int(11) DEFAULT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `id_unit` varchar(15) DEFAULT NULL,
  `price` double(19,4) DEFAULT NULL,
  `nominal` double(19,4) DEFAULT NULL,
  `id_curr` varchar(25) DEFAULT NULL,
  KEY `no_sales` (`no_service`),
  KEY `trn_service_noservice_det_ibfk_3` (`id_unit`),
  CONSTRAINT `trn_service_item_det_ibfk_1` FOREIGN KEY (`no_service`) REFERENCES `trn_service_head` (`no_service`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_service_item_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_so_discbrand_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_so_discbrand_det`;
CREATE TABLE `trn_so_discbrand_det` (
  `no_sales_order` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `nom_disc` double NOT NULL,
  KEY `no_sales_order` (`no_sales_order`),
  KEY `id_item` (`id_item`),
  CONSTRAINT `trn_so_discbrand_det_ibfk_1` FOREIGN KEY (`no_sales_order`) REFERENCES `trn_sales_order_head` (`no_sales_order`) ON UPDATE CASCADE,
  CONSTRAINT `trn_so_discbrand_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_so_discbrand_det
-- ----------------------------
INSERT INTO `trn_so_discbrand_det` VALUES ('FRM/SO/09-2015-00004', '0915000002', 'Item Coba', '396');
INSERT INTO `trn_so_discbrand_det` VALUES ('FRM/SO/09-2015-00004', '0915000001', 'Spare Part 12045', '18750');

-- ----------------------------
-- Table structure for trn_so_disccat_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_so_disccat_det`;
CREATE TABLE `trn_so_disccat_det` (
  `no_sales_order` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `nom_disc` double NOT NULL,
  KEY `no_sales_order` (`no_sales_order`),
  KEY `id_item` (`id_item`),
  CONSTRAINT `trn_so_disccat_det_ibfk_1` FOREIGN KEY (`no_sales_order`) REFERENCES `trn_sales_order_head` (`no_sales_order`) ON UPDATE CASCADE,
  CONSTRAINT `trn_so_disccat_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_so_disccat_det
-- ----------------------------
INSERT INTO `trn_so_disccat_det` VALUES ('FRM/SO/09-2015-00004', '0915000002', 'Item Coba', '792');
INSERT INTO `trn_so_disccat_det` VALUES ('FRM/SO/09-2015-00004', '0915000001', 'Spare Part 12045', '26250');

-- ----------------------------
-- Table structure for trn_so_discitem_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_so_discitem_det`;
CREATE TABLE `trn_so_discitem_det` (
  `no_sales_order` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `qty` double NOT NULL,
  `id_unit` varchar(60) NOT NULL,
  KEY `no_sales_order` (`no_sales_order`),
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `trn_so_discitem_det_ibfk_1` FOREIGN KEY (`no_sales_order`) REFERENCES `trn_sales_order_head` (`no_sales_order`) ON UPDATE CASCADE,
  CONSTRAINT `trn_so_discitem_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_so_discitem_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_so_discitem_det
-- ----------------------------
INSERT INTO `trn_so_discitem_det` VALUES ('FRM/SO/09-2015-00004', 'PFCB-RVRV113959', 'Dream Donna Buku Gambar', '1', 'pcs');
INSERT INTO `trn_so_discitem_det` VALUES ('FRM/SO/09-2015-00004', 'PFCB-RVRV091158', 'Ballpoint Standard', '2', 'pcs');

-- ----------------------------
-- Table structure for trn_so_disctype_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_so_disctype_det`;
CREATE TABLE `trn_so_disctype_det` (
  `no_sales_order` varchar(255) NOT NULL,
  `id_item` varchar(255) NOT NULL,
  `item_name` varchar(255) NOT NULL,
  `nom_disc` double NOT NULL,
  KEY `no_sales_order` (`no_sales_order`),
  KEY `id_item` (`id_item`),
  CONSTRAINT `trn_so_disctype_det_ibfk_1` FOREIGN KEY (`no_sales_order`) REFERENCES `trn_sales_order_head` (`no_sales_order`) ON UPDATE CASCADE,
  CONSTRAINT `trn_so_disctype_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_so_disctype_det
-- ----------------------------
INSERT INTO `trn_so_disctype_det` VALUES ('FRM/SO/09-2015-00004', '0915000002', 'Item Coba', '594');
INSERT INTO `trn_so_disctype_det` VALUES ('FRM/SO/09-2015-00004', '0915000001', 'Spare Part 12045', '18750');

-- ----------------------------
-- Table structure for trn_spk_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_spk_head`;
CREATE TABLE `trn_spk_head` (
  `no_spk` varchar(30) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `start_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `notes` varchar(255) DEFAULT NULL,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_spk`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_spk_head
-- ----------------------------

-- ----------------------------
-- Table structure for trn_spk_item_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_spk_item_det`;
CREATE TABLE `trn_spk_item_det` (
  `no_spk` varchar(60) DEFAULT NULL,
  `id_item` varchar(30) DEFAULT NULL,
  `no_bom` varchar(60) DEFAULT NULL,
  `qty` double DEFAULT NULL,
  `notes` text,
  KEY `no_spk` (`no_spk`),
  KEY `id_item` (`id_item`),
  KEY `no_bom` (`no_bom`),
  CONSTRAINT `trn_spk_item_det_ibfk_1` FOREIGN KEY (`no_spk`) REFERENCES `trn_spk_head` (`no_spk`) ON UPDATE CASCADE,
  CONSTRAINT `trn_spk_item_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_spk_item_det_ibfk_3` FOREIGN KEY (`no_bom`) REFERENCES `mst_bom_head` (`no_bom`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_spk_item_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_spk_konversi_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_spk_konversi_det`;
CREATE TABLE `trn_spk_konversi_det` (
  `no_spk` varchar(60) DEFAULT NULL,
  `id_cost` varchar(30) DEFAULT NULL,
  `qty_hour` double DEFAULT NULL,
  `cost` double DEFAULT NULL,
  `notes` text,
  `total_cost` decimal(10,0) DEFAULT NULL,
  KEY `no_spk` (`no_spk`),
  KEY `id_cost` (`id_cost`),
  CONSTRAINT `trn_spk_konversi_det_ibfk_2` FOREIGN KEY (`no_spk`) REFERENCES `trn_spk_head` (`no_spk`) ON UPDATE CASCADE,
  CONSTRAINT `trn_spk_konversi_det_ibfk_3` FOREIGN KEY (`id_cost`) REFERENCES `mst_standard_cost` (`id_cost`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_spk_konversi_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_spk_material_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_spk_material_det`;
CREATE TABLE `trn_spk_material_det` (
  `no_spk` varchar(60) DEFAULT NULL,
  `id_item` varchar(120) DEFAULT NULL,
  `qty_material` double DEFAULT NULL,
  `qty_sisa_spk` double DEFAULT NULL,
  `id_unit` varchar(30) DEFAULT NULL,
  `cost` double DEFAULT NULL,
  `notes` text,
  `total_cost` double DEFAULT NULL,
  KEY `no_spk` (`no_spk`),
  KEY `id_item` (`id_item`),
  KEY `id_unit` (`id_unit`),
  CONSTRAINT `trn_spk_material_det_ibfk_1` FOREIGN KEY (`no_spk`) REFERENCES `trn_spk_head` (`no_spk`) ON UPDATE CASCADE,
  CONSTRAINT `trn_spk_material_det_ibfk_2` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON UPDATE CASCADE,
  CONSTRAINT `trn_spk_material_det_ibfk_3` FOREIGN KEY (`id_unit`) REFERENCES `mst_unit` (`id_unit`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_spk_material_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_transfer_stock_det
-- ----------------------------
DROP TABLE IF EXISTS `trn_transfer_stock_det`;
CREATE TABLE `trn_transfer_stock_det` (
  `no_tranfer_stock` varchar(25) NOT NULL,
  `id_item` varchar(25) DEFAULT NULL,
  `qty` int(11) DEFAULT NULL,
  `unit` varchar(25) DEFAULT NULL,
  `notes` text,
  PRIMARY KEY (`no_tranfer_stock`),
  KEY `fk_id_item_trf` (`id_item`),
  CONSTRAINT `fk_id_item_trf` FOREIGN KEY (`id_item`) REFERENCES `mst_item` (`id_item`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_no_bukti` FOREIGN KEY (`no_tranfer_stock`) REFERENCES `trn_transfer_stock_head` (`no_tranfer_stock`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_transfer_stock_det
-- ----------------------------

-- ----------------------------
-- Table structure for trn_transfer_stock_head
-- ----------------------------
DROP TABLE IF EXISTS `trn_transfer_stock_head`;
CREATE TABLE `trn_transfer_stock_head` (
  `no_tranfer_stock` varchar(25) NOT NULL,
  `date_trn` datetime DEFAULT NULL,
  `id_warehouse_from` varchar(25) DEFAULT NULL,
  `id_warehouse_to` varchar(25) DEFAULT NULL,
  `notes` text,
  `modified_user` varchar(120) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `modified_date` datetime DEFAULT NULL,
  `created_user` varchar(120) DEFAULT NULL,
  PRIMARY KEY (`no_tranfer_stock`),
  KEY `fk_wh_from` (`id_warehouse_from`),
  KEY `fk_wh_to` (`id_warehouse_to`),
  CONSTRAINT `fk_wh_from` FOREIGN KEY (`id_warehouse_from`) REFERENCES `mst_warehouse` (`id_warehouse`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `fk_wh_to` FOREIGN KEY (`id_warehouse_to`) REFERENCES `mst_warehouse` (`id_warehouse`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of trn_transfer_stock_head
-- ----------------------------

-- ----------------------------
-- View structure for coa_detail_view
-- ----------------------------
DROP VIEW IF EXISTS `coa_detail_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `coa_detail_view` AS select a.*,b.account_name as header, (
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name` from mst_account a

inner join coa_header_view b on b.id_account = a.parent
 where a.flag_header = 0 ;

-- ----------------------------
-- View structure for coa_header_view
-- ----------------------------
DROP VIEW IF EXISTS `coa_header_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `coa_header_view` AS select id_account, account_name from mst_account where flag_header = 1 ;

-- ----------------------------
-- View structure for combo_supplier_po
-- ----------------------------
DROP VIEW IF EXISTS `combo_supplier_po`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `combo_supplier_po` AS select distinct `b`.`id_supplier` AS `id_supplier`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `name`,`b`.`address` AS `address` from `mst_supplier` `b` ;

-- ----------------------------
-- View structure for commission_report_view
-- ----------------------------
DROP VIEW IF EXISTS `commission_report_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `commission_report_view` AS SELECT
	`d`.`date_trn` AS `date_trn`,
	`a`.`no_service` AS `no_service`,
	concat(
		`b`.`first_name`,
		' ',
		`b`.`last_name`
	) AS `nama`,
	`c`.`service_name` AS `service_name`,
	`a`.`qty` AS `qty`,
	`a`.`price` AS `price`,
	`a`.`nominal` AS `nominal`,
	`d`.`notes` AS `notes`,
	(
		CASE
		WHEN (`b`.`grade` = 'Senior') THEN
			`c`.`senior_commission`
		WHEN (`b`.`grade` = 'Junior') THEN
			`c`.`junior_commission`
		END
	) AS `rate_commission`,
	(
		CASE
		WHEN (`b`.`grade` = 'Senior') THEN
			(
				`a`.`qty` * `c`.`senior_commission`
			)
		WHEN (`b`.`grade` = 'Junior') THEN
			(
				`a`.`qty` * `c`.`junior_commission`
			)
		END
	) AS `commission`
FROM
	(
		(
			(
				`trn_service_det` `a`
				JOIN `trn_service_head` `d` ON (
					(
						`d`.`no_service` = `a`.`no_service`
					)
				)
			)
			JOIN `mst_employee` `b` ON (
				(
					`b`.`id_employee` = `a`.`id_employee`
				)
			)
		)
		JOIN `mst_service` `c` ON (
			(
				`c`.`id_service` = `a`.`id_service`
			)
		)
	)
ORDER BY
	`d`.`date_trn`,
	`a`.`no_service` ;

-- ----------------------------
-- View structure for hitung_rekap_jual_category
-- ----------------------------
DROP VIEW IF EXISTS `hitung_rekap_jual_category`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `hitung_rekap_jual_category` AS SELECT
	`d`.`id_category` AS `id_category`,
	sum(`b`.`total`) AS `total`
FROM
	(
		(
			(
				`trn_sales_det` `a`
				JOIN `trn_sales_head` `b` ON (
					(
						`b`.`no_sales` = `a`.`no_sales`
					)
				)
			)
			JOIN `mst_item` `d` ON (
				(
					`d`.`id_item` = `a`.`id_item`
				)
			)
		)
		JOIN `mst_itemcat` `e` ON (
			(
				`e`.`mst_itemcat_id` = `d`.`id_category`
			)
		)
	)

GROUP BY
	`d`.`id_category`

union ALL

SELECT
	`d`.`id_category` AS `id_category`,
	sum(`b`.`total`) AS `total`
FROM
	(
		(
			(
				`trn_cashier_det` `a`
				JOIN `trn_cashier_head` `b` ON (
					(
						`b`.`no_sales` = `a`.`no_sales`
					)
				)
			)
			JOIN `mst_item` `d` ON (
				(
					`d`.`id_item` = `a`.`id_item`
				)
			)
		)
		JOIN `mst_itemcat` `e` ON (
			(
				`e`.`mst_itemcat_id` = `d`.`id_category`
			)
		)
	)

GROUP BY
	`d`.`id_category` ;

-- ----------------------------
-- View structure for hitung_rekap_jual_view
-- ----------------------------
DROP VIEW IF EXISTS `hitung_rekap_jual_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `hitung_rekap_jual_view` AS select month(date_trn) as tanggal,sum(total) as total from trn_sales_head
where year(date_trn) = (select get_year())
group by month(date_trn) 
union ALL
select month(date_trn) as tanggal,sum(total) as total from trn_cashier_head
where year(date_trn) = (select get_year())
group by month(date_trn) ;

-- ----------------------------
-- View structure for rekap_pembelian_view
-- ----------------------------
DROP VIEW IF EXISTS `rekap_pembelian_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `rekap_pembelian_view` AS select month(date_trn) as tanggal,sum(total*kurs) as total from trn_purchase_head
where year(date_trn) = (select get_year())
group by month(date_trn) ;

-- ----------------------------
-- View structure for rekap_penjualan_view
-- ----------------------------
DROP VIEW IF EXISTS `rekap_penjualan_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `rekap_penjualan_view` AS select tanggal,sum(total) as total from hitung_rekap_jual_view
group by tanggal ;

-- ----------------------------
-- View structure for request_quantitative_view
-- ----------------------------
DROP VIEW IF EXISTS `request_quantitative_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `request_quantitative_view` AS select (case when (month(`trn_request_order_head`.`date_trn`) = 1) then 'Januari' when (month(`trn_request_order_head`.`date_trn`) = 2) then 'Februari' when (month(`trn_request_order_head`.`date_trn`) = 3) then 'Maret' when (month(`trn_request_order_head`.`date_trn`) = 4) then 'April' when (month(`trn_request_order_head`.`date_trn`) = 5) then 'Mei' when (month(`trn_request_order_head`.`date_trn`) = 6) then 'Juni' when (month(`trn_request_order_head`.`date_trn`) = 7) then 'Juli' when (month(`trn_request_order_head`.`date_trn`) = 8) then 'Agustus' when (month(`trn_request_order_head`.`date_trn`) = 9) then 'September' when (month(`trn_request_order_head`.`date_trn`) = 10) then 'Oktober' when (month(`trn_request_order_head`.`date_trn`) = 11) then 'November' when (month(`trn_request_order_head`.`date_trn`) = 12) then 'Desember' else '' end) AS `period`,count(`trn_request_order_head`.`no_request_order`) AS `jumlah` from `trn_request_order_head` where (year(`trn_request_order_head`.`date_trn`) = (select `i_accounting_period`.`year` from `i_accounting_period`)) group by (case when (month(`trn_request_order_head`.`date_trn`) = 1) then 'Januari' when (month(`trn_request_order_head`.`date_trn`) = 2) then 'Februari' when (month(`trn_request_order_head`.`date_trn`) = 3) then 'Maret' when (month(`trn_request_order_head`.`date_trn`) = 4) then 'April' when (month(`trn_request_order_head`.`date_trn`) = 5) then 'Mei' when (month(`trn_request_order_head`.`date_trn`) = 6) then 'Juni' when (month(`trn_request_order_head`.`date_trn`) = 7) then 'Juli' when (month(`trn_request_order_head`.`date_trn`) = 8) then 'Agustus' when (month(`trn_request_order_head`.`date_trn`) = 9) then 'September' when (month(`trn_request_order_head`.`date_trn`) = 10) then 'Oktober' when (month(`trn_request_order_head`.`date_trn`) = 11) then 'November' when (month(`trn_request_order_head`.`date_trn`) = 12) then 'Desember' else '' end) ;

-- ----------------------------
-- View structure for rpt_serviceperdateperno
-- ----------------------------
DROP VIEW IF EXISTS `rpt_serviceperdateperno`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `rpt_serviceperdateperno` AS select `mst_service`.`service_name` AS `service_name`,`trn_service_det`.`no_service` AS `no_service`,`trn_service_det`.`number_asc` AS `number_asc`,`trn_service_det`.`notes` AS `notes_det`,`trn_service_det`.`qty` AS `qty`,`trn_service_det`.`price` AS `price`,`trn_service_det`.`nominal` AS `nominal`,`trn_service_head`.`date_trn` AS `date_trn`,`mst_employee`.`first_name` AS `first_name`,`mst_employee`.`last_name` AS `last_name`,`mst_customer`.`first_name` AS `first_name2`,`mst_customer`.`last_name` AS `last_name2`,`trn_service_head`.`notes` AS `notes` from ((((`trn_service_det` join `mst_service` on((`trn_service_det`.`id_service` = `mst_service`.`id_service`))) join `trn_service_head` on((`trn_service_det`.`no_service` = `trn_service_head`.`no_service`))) join `mst_employee` on((`trn_service_det`.`id_employee` = `mst_employee`.`id_employee`))) join `mst_customer` on((`trn_service_head`.`id_customer` = `mst_customer`.`id_customer`))) ;

-- ----------------------------
-- View structure for set_path_logo_view
-- ----------------------------
DROP VIEW IF EXISTS `set_path_logo_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `set_path_logo_view` AS select case when path is null then '' else path end as path from i_upload_path where form = 'Logo' ;

-- ----------------------------
-- View structure for so_thismonth_view
-- ----------------------------
DROP VIEW IF EXISTS `so_thismonth_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `so_thismonth_view` AS select DATE_FORMAT(a.date_trn,'%M,%D') as date_trn,a.no_sales_order,concat(b.first_name,' ',b.last_name) as customer,a.total,
'in progress for invoice' as status_notes
from trn_sales_order_head a
inner join mst_customer b on b.id_customer = a.id_customer
where case when a.flag_status_invoice is null then 0 else a.flag_status_invoice end = 0 ;

-- ----------------------------
-- View structure for view_adjuststock
-- ----------------------------
DROP VIEW IF EXISTS `view_adjuststock`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_adjuststock` AS select `a`.`no_adjust_stock` AS `no_adjust_stock`,`b`.`warehouse_name` AS `warehouse_name`,`a`.`date_trn` AS `date_trn`,`a`.`total_adjust` AS `total_adjust`,`a`.`notes` AS `notes` from (`trn_adjust_stock_head` `a` join `mst_warehouse` `b` on((`b`.`id_warehouse` = `a`.`id_warehouse`))) ;

-- ----------------------------
-- View structure for view_aktiva_stafel
-- ----------------------------
DROP VIEW IF EXISTS `view_aktiva_stafel`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_aktiva_stafel` AS select a.id_account, a.account_name, a.parent, a.account_parent, a.saldo, 
case when b.golongan = 1 then 'AKTIVA' when b.golongan = 2 then 'PASIVA' when b.golongan = 3 then 'MODAL' 
when b.golongan is null then 'MODAL' end as golongan, 
case when b.golongan is null then 3 else b.golongan end as id_golongan, 
case when c.parent is null then '999999' else c.parent end as id_parent2,
case when d.account_name is null then 'LABA / RUGI' else d.account_name end as parent2 from temp_aktiva a
left join mst_account b on b.id_account = a.id_account
left join mst_account c on c.id_account = a.parent
LEFT JOIN mst_account d on d.id_account = c.parent
union all 
select a.id_account, a.account_name, a.parent, a.account_parent, a.saldo,
case when b.golongan = 1 then 'AKTIVA' when b.golongan = 2 then 'PASIVA' when b.golongan = 3 then 'MODAL' 
when b.golongan is null then 'MODAL' end as golongan,
case when b.golongan is null then 3 else b.golongan end as id_golongan, 
case when c.parent is null then '999999' else c.parent end as id_parent2,
case when d.account_name is null then 'LABA / RUGI' else d.account_name end as parent2 from temp_pasiva a 
left join mst_account b on b.id_account = a.id_account
left join mst_account c on c.id_account = a.parent
LEFT JOIN mst_account d on d.id_account = c.parent
order by id_account ;

-- ----------------------------
-- View structure for view_appayment
-- ----------------------------
DROP VIEW IF EXISTS `view_appayment`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_appayment` AS select `aph`.`no_payment_ap` AS `no_payment_ap`,concat(`ms`.`first_name`,`ms`.`last_name`) AS `supplier_name`,`aph`.`date_trn` AS `date_trn`,`aph`.`notes` AS `notes`,0 AS `total`,`ma`.`account_name` AS `account_name`,`aph`.`id_supplier` AS `id_supplier`,`aph`.`id_account` AS `id_account`,`apd`.`number_asc` AS `number_asc`,`apd`.`no_purchase` AS `no_purchase`,`apd`.`invoice_date` AS `invoice_date`,`apd`.`ap_amount` AS `ap_amount`,`apd`.`discount` AS `discount`,sum(`apd`.`ap_amount_net`) AS `ap_amount_net`,(`cd`.`paid_amount` - `apd`.`paid_amount`) AS `paid_amount`,concat(`ms`.`address`,' ',`ms`.`city`) AS `supplier_addr`,`apd`.`ap_return` AS `ap_return`,`ms`.`city` AS `city`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`apd`.`paid_amount` AS `pembayaran` from ((((`trn_payment_ap_head` `aph` join `trn_payment_ap_det` `apd` on((`aph`.`no_payment_ap` = `apd`.`no_payment_ap`))) join `ap_status` `cd` on((`cd`.`no_purchase` = `apd`.`no_purchase`))) join `mst_supplier` `ms` on((`ms`.`id_supplier` = `aph`.`id_supplier`))) join `mst_account` `ma` on((`ma`.`id_account` = `aph`.`id_account`))) group by `apd`.`no_purchase` ;

-- ----------------------------
-- View structure for view_ap_status
-- ----------------------------
DROP VIEW IF EXISTS `view_ap_status`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ap_status` AS select `a`.`no_purchase` AS `no_purchase`,cast(`a`.`date_trn` as date) AS `date_trn`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `nama`,(case when isnull(`a`.`purchase_amount`) then 0 else `a`.`purchase_amount` end) AS `purchase_amount`,(case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end) AS `return_amount`,(case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end) AS `disc_amount`,(case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end) AS `paid_amount`,(case when (((((case when isnull(`a`.`purchase_amount`) then 0 else `a`.`purchase_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end)) <> 0) then ((((case when isnull(`a`.`purchase_amount`) then 0 else `a`.`purchase_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end)) else 0 end) AS `balance`,`a`.`notes` AS `notes`,(case when (((((case when isnull(`a`.`purchase_amount`) then 0 else `a`.`purchase_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end)) < 0) then -(((((case when isnull(`a`.`purchase_amount`) then 0 else `a`.`purchase_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end))) else 0 end) AS `lebih_bayar` from (`ap_status` `a` join `mst_supplier` `b` on((`b`.`id_supplier` = `a`.`id_supplier`))) order by `a`.`id_supplier` ;

-- ----------------------------
-- View structure for view_arpayment
-- ----------------------------
DROP VIEW IF EXISTS `view_arpayment`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_arpayment` AS select `aph`.`no_payment_ar` AS `no_payment_ar`,concat(`ms`.`first_name`,' ',`ms`.`last_name`) AS `supplier_name`,`aph`.`date_trn` AS `date_trn`,`aph`.`notes` AS `notes`,0 AS `total`,`ma`.`account_name` AS `account_name`,`aph`.`id_customer` AS `id_customer`,`aph`.`id_account` AS `id_account`,`apd`.`number_asc` AS `number_asc`,`apd`.`no_invoice` AS `no_invoice`,`apd`.`invoice_date` AS `invoice_date`,`apd`.`ap_amount` AS `ap_amount`,`apd`.`discount` AS `discount`,sum(`apd`.`ap_amount_net`) AS `ap_amount_net`,(`cd`.`paid_amount` - `apd`.`paid_amount`) AS `paid_amount`,concat(`ms`.`address`,' ',`ms`.`city`) AS `supplier_addr`,`apd`.`ap_return` AS `ap_return`,`ms`.`city` AS `city`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`apd`.`paid_amount` AS `pembayaran` from ((((`trn_payment_ar_head` `aph` join `trn_payment_ar_det` `apd` on((`aph`.`no_payment_ar` = `apd`.`no_payment_ar`))) join `ar_status` `cd` on((`cd`.`no_sales` = `apd`.`no_invoice`))) join `mst_customer` `ms` on((`ms`.`id_customer` = `aph`.`id_customer`))) join `mst_account` `ma` on((`ma`.`id_account` = `aph`.`id_account`))) group by `apd`.`no_invoice` ;

-- ----------------------------
-- View structure for view_ar_status
-- ----------------------------
DROP VIEW IF EXISTS `view_ar_status`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ar_status` AS select `a`.`no_sales` AS `no_sales`,`a`.`date_trn` AS `date_trn`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `nama`,(case when isnull(`a`.`sales_amount`) then 0 else `a`.`sales_amount` end) AS `sales_amount`,(case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end) AS `return_amount`,(case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end) AS `disc_amount`,(case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end) AS `paid_amount`,(case when (((((case when isnull(`a`.`sales_amount`) then 0 else `a`.`sales_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end)) > 0) then ((((case when isnull(`a`.`sales_amount`) then 0 else `a`.`sales_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end)) else 0 end) AS `balance`,`a`.`notes` AS `notes`,(case when (((((case when isnull(`a`.`sales_amount`) then 0 else `a`.`sales_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end)) < 0) then -(((((case when isnull(`a`.`sales_amount`) then 0 else `a`.`sales_amount` end) - (case when isnull(`a`.`return_amount`) then 0 else `a`.`return_amount` end)) - (case when isnull(`a`.`disc_amount`) then 0 else `a`.`disc_amount` end)) - (case when isnull(`a`.`paid_amount`) then 0 else `a`.`paid_amount` end))) else 0 end) AS `lebih_bayar` from (`ar_status` `a` join `mst_customer` `b` on((`b`.`id_customer` = `a`.`id_customer`))) order by `a`.`id_customer` ;

-- ----------------------------
-- View structure for view_aset_coa
-- ----------------------------
DROP VIEW IF EXISTS `view_aset_coa`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `view_aset_coa` AS select a.id_aset, a.nama, b.type, 
case when a.id_coa_penyusutan is null then '' else a.id_coa_penyusutan end as id_coa_penyusutan, 
case when a.id_coa_aset is null then '' else a.id_coa_aset end as id_coa_aset, 
case when a.id_coa_akumulasi is null then '' else a.id_coa_akumulasi end as id_coa_akumulasi
 from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan ;

-- ----------------------------
-- View structure for view_aset_in_period
-- ----------------------------
DROP VIEW IF EXISTS `view_aset_in_period`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_aset_in_period` AS select nama,nilai_perolehan,concat(month(tanggal_perolehan),'-', year(tanggal_perolehan)) as period from mst_aset where year(tanggal_perolehan) = get_year() 
order by concat(month(tanggal_perolehan),'-', year(tanggal_perolehan)) asc ;

-- ----------------------------
-- View structure for view_begin_penyusutan
-- ----------------------------
DROP VIEW IF EXISTS `view_begin_penyusutan`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_begin_penyusutan` AS select a.id_aset, a.nama,c.department_name , b.type,b.rate_penyusutan,
case when get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan) 
>= (a.nilai_perolehan * b.rate_penyusutan/100/12)
then round((a.nilai_perolehan * b.rate_penyusutan/100/12),0) 
when get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan) 
< (a.nilai_perolehan * b.rate_penyusutan/100/12) and get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan) > 0 
then get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan)
else 0 end as penyusutan, 
case when a.id_coa_aset is null then '' else a.id_coa_aset end as id_coa_aset,
case when a.id_coa_penyusutan is null then '' else a.id_coa_penyusutan end as id_coa_penyusutan,
case when a.id_coa_akumulasi is null then '' else a.id_coa_akumulasi end as id_coa_akumulasi
 from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan 
inner join mst_department c on c.department_id = a.id_department 
where a.id_aset not in (select id_aset from i_aset_depreciation where period = get_month() and years = get_year()) ;

-- ----------------------------
-- View structure for view_cashbank_report
-- ----------------------------
DROP VIEW IF EXISTS `view_cashbank_report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_cashbank_report` AS SELECT
	`a`.`cashbank_no` AS `cashbank_no`,
	`b`.`account_name` AS `nama`,
	`a`.`date_trn` AS `date_trn`,
	`a`.`notes` AS `notes`,
	`a`.`id_account` AS `id_account`,
	`c`.`id_account` AS `id_account_det`,
	`d`.`account_name` AS `account_name`,
	`c`.`amount` AS `amount`,
	`c`.`notes` AS `notes_det`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
a.id_currency
FROM
	(
		(
			(
				`trn_cashbank_head` `a`
				JOIN `trn_cashbank_det` `c` ON (
					(
						`c`.`cashbank_no` = `a`.`cashbank_no`
					)
				)
			)
			JOIN `mst_account` `b` ON (
				(
					`b`.`id_account` = `a`.`id_account`
				)
			)
		)
		JOIN `mst_account` `d` ON (
			(
				`d`.`id_account` = `c`.`id_account`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_cash_bank
-- ----------------------------
DROP VIEW IF EXISTS `view_cash_bank`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_cash_bank` AS select `ch`.`cashbank_no` AS `cashbank_no`,`ch`.`date_trn` AS `date_trn`,`ch`.`total` AS `total`,`ch`.`notes` AS `notes`,`ch`.`flag_trans` AS `flag_trans`,`cd`.`notes` AS `notes_detail`,`cd`.`amount` AS `amount`,`cd`.`id_account` AS `id_account`,`ma`.`account_name` AS `account_name` from ((`trn_cashbank_head` `ch` join `trn_cashbank_det` `cd` on((`ch`.`cashbank_no` = `cd`.`cashbank_no`))) join `mst_account` `ma` on((`cd`.`id_account` = `ma`.`id_account`))) ;

-- ----------------------------
-- View structure for view_combo_cashbank
-- ----------------------------
DROP VIEW IF EXISTS `view_combo_cashbank`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_combo_cashbank` AS select `a`.`id_account` AS `id_account`,`b`.`account_name` AS `account_name`,`a`.`id_cashbank` AS `id_cashbank` from (`i_cashbank_setup` `a` join `mst_account` `b` on((`b`.`id_account` = `a`.`id_account`))) ;

-- ----------------------------
-- View structure for view_ctk_bbk
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_bbk`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_bbk` AS select `a`.`id_account` AS `id_account`,`c`.`account_name` AS `account_name`,`a`.`cashbank_no` AS `cashbank_no`,`a`.`date_trn` AS `date_trn`,`d`.`account_name` AS `namaakundet`,`b`.`notes` AS `ketdetail`,`a`.`total` AS `total`,`a`.`notes` AS `notes`,`a`.`evidence_no` AS `evidence_no`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`b`.`amount` AS `amount` from (((`trn_cashbank_head` `a` join `trn_cashbank_det` `b` on((`b`.`cashbank_no` = `a`.`cashbank_no`))) join `mst_account` `c` on((`c`.`id_account` = `a`.`id_account`))) join `mst_account` `d` on((`d`.`id_account` = `b`.`id_account`))) where (`a`.`flag_trans` = 'BK') ;

-- ----------------------------
-- View structure for view_ctk_bbm
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_bbm`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_bbm` AS select `a`.`id_account` AS `id_account`,`c`.`account_name` AS `account_name`,`a`.`cashbank_no` AS `cashbank_no`,`a`.`date_trn` AS `date_trn`,`d`.`account_name` AS `namaakundet`,`b`.`notes` AS `ketdetail`,`a`.`total` AS `total`,`a`.`notes` AS `notes`,`a`.`evidence_no` AS `evidence_no`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`b`.`amount` AS `amount` from (((`trn_cashbank_head` `a` join `trn_cashbank_det` `b` on((`b`.`cashbank_no` = `a`.`cashbank_no`))) join `mst_account` `c` on((`c`.`id_account` = `a`.`id_account`))) join `mst_account` `d` on((`d`.`id_account` = `b`.`id_account`))) where (`a`.`flag_trans` = 'BM') ;

-- ----------------------------
-- View structure for view_ctk_bkk
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_bkk`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_bkk` AS SELECT
	`a`.`id_account` AS `id_account`,
	`c`.`account_name` AS `account_name`,
	`a`.`cashbank_no` AS `cashbank_no`,
	`a`.`date_trn` AS `date_trn`,
	`d`.`account_name` AS `namaakundet`,
	`b`.`notes` AS `ketdetail`,
	`a`.`total` AS `total`,
	`a`.`notes` AS `notes`,
	`a`.`evidence_no` AS `evidence_no`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
	`b`.`amount` AS `amount`
FROM
	(
		(
			(
				`trn_cashbank_head` `a`
				JOIN `trn_cashbank_det` `b` ON (
					(
						`b`.`cashbank_no` = `a`.`cashbank_no`
					)
				)
			)
			JOIN `mst_account` `c` ON (
				(
					`c`.`id_account` = `a`.`id_account`
				)
			)
		)
		JOIN `mst_account` `d` ON (
			(
				`d`.`id_account` = `b`.`id_account`
			)
		)
	)
WHERE
	(`a`.`flag_trans` = 'KK') ;

-- ----------------------------
-- View structure for view_ctk_bkm
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_bkm`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_bkm` AS select `a`.`id_account` AS `id_account`,`c`.`account_name` AS `account_name`,`a`.`cashbank_no` AS `cashbank_no`,`a`.`date_trn` AS `date_trn`,`d`.`account_name` AS `namaakundet`,`b`.`notes` AS `ketdetail`,`a`.`total` AS `total`,`a`.`notes` AS `notes`,`a`.`evidence_no` AS `evidence_no`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`b`.`amount` AS `amount` from (((`trn_cashbank_head` `a` join `trn_cashbank_det` `b` on((`b`.`cashbank_no` = `a`.`cashbank_no`))) join `mst_account` `c` on((`c`.`id_account` = `a`.`id_account`))) join `mst_account` `d` on((`d`.`id_account` = `b`.`id_account`))) where (`a`.`flag_trans` = 'KM') ;

-- ----------------------------
-- View structure for view_ctk_cashier
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_cashier`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_cashier` AS SELECT
	`x`.`customer` AS `customer`,
	`x`.`cust_address` AS `cust_address`,
	`x`.`cust_phone` AS `cust_phone`,
	`x`.`no_sales` AS `no_sales`,
	`x`.`date_trn` AS `date_trn`,
	`y`.`id_item` AS `id_item`,
	`e`.`item_name` AS `item_name`,
	`y`.`qty` AS `qty`,
	`y`.`id_unit` AS `id_unit`,
	`f`.`unit` AS `unit`,
	`y`.`price` AS `price`,
	(`y`.`price`)-(`y`.`price` * y.disc_nom/100)*(y.qty) as total_net,
	(`y`.`price`)-(`y`.`price` * y.disc_nom/100) as price_net,
	`y`.`nominal` AS `nominal`,
	`x`.`payment_method` AS `payment_method`,
	`x`.`term` AS `term`,
	`x`.`termpaydisc` AS `termpaydisc`,
	`x`.`discpay` AS `discpay`,
	`x`.`notes` AS `notes`,
	`x`.`subtotal` AS `subtotal`,
	`x`.`discount` AS `discount`,
	`x`.`tax` AS `tax`,
	`x`.`total` AS `total`,
x.paid,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`
FROM
	(
		(
			(
				`trn_cashier_head` `x`
				JOIN `trn_cashier_det` `y` ON (
					(
						`y`.`no_sales` = `x`.`no_sales`
					)
				)
			)
			JOIN `mst_item` `e` ON (
				(
					`e`.`id_item` = `y`.`id_item`
				)
			)
		)
		JOIN `mst_unit` `f` ON (
			(
				`f`.`id_unit` = `y`.`id_unit`
			)
		)
	)
UNION ALL
	SELECT
		`x`.`customer` AS `customer`,
		`x`.`cust_address` AS `cust_address`,
		`x`.`cust_phone` AS `cust_phone`,
		`x`.`no_sales` AS `no_sales`,
		`x`.`date_trn` AS `date_trn`,
		`y`.`id_service` AS `id_service`,
		`e`.`service_name` AS `service_name`,
		`y`.`qty` AS `qty`,
		`y`.`id_unit` AS `id_unit`,
		`f`.`unit` AS `unit`,
		`y`.`price` AS `price`,
		(`y`.`price`)-(`y`.`price` * y.disc_nom/100)*(y.qty) as total_net,
		(`y`.`price`)-(`y`.`price` * y.disc_nom/100) as price_net,
		`y`.`nominal` AS `nominal`,
		`x`.`payment_method` AS `payment_method`,
		`x`.`term` AS `term`,
		`x`.`termpaydisc` AS `termpaydisc`,
		`x`.`discpay` AS `discpay`,
		`x`.`notes` AS `notes`,
		`x`.`subtotal` AS `subtotal`,
		`x`.`discount` AS `discount`,
		`x`.`tax` AS `tax`,
		`x`.`total` AS `total`,
		x.paid,
		(
			SELECT
				`mst_company`.`company_name`
			FROM
				`mst_company`
			WHERE
				(
					`mst_company`.`flag_active` = 1
				)
		) AS `company_name`
	FROM
		(
			(
				(
					`trn_cashier_head` `x`
					JOIN `trn_cashier_service_det` `y` ON (
						(
							`y`.`no_sales` = `x`.`no_sales`
						)
					)
				)
				JOIN `mst_service` `e` ON (
					(
						`e`.`id_service` = `y`.`id_service`
					)
				)
			)
			JOIN `mst_unit` `f` ON (
				(
					`f`.`id_unit` = `y`.`id_unit`
				)
			)
		) ;

-- ----------------------------
-- View structure for view_ctk_cashier_return
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_cashier_return`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_cashier_return` AS SELECT
	x.customer AS `nm_customer`,
	x.customer_addr AS `address`,
	`x`.`no_sales_return` AS `no_sales_return`,
	`y`.`no_sales` AS `no_sales`,
	`x`.`date_trn` AS `date_trn`,
	`y`.`id_item` AS `id_item`,
	`e`.`item_name` AS `item_name`,
	`y`.`qty` AS `qty`,
	`y`.`id_unit` AS `id_unit`,
	`f`.`unit` AS `unit`,
	`y`.`price` AS `price`,
	`y`.`nominal` AS `nominal`,
	`x`.`payment_method` AS `payment_method`,
	`x`.`notes` AS `notes`,
	`x`.`subtotal` AS `subtotal`,
	`x`.`disc` AS `disc`,
	`x`.`tax` AS `tax`,
	`x`.`total` AS `total`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`
FROM
	(
		(
			(
				(
					(
						`trn_cashier_return_head` `x`
						JOIN `trn_cashier_return_det` `y` ON (
							(
								`y`.`no_sales_return` = `x`.`no_sales_return`
							)
						)
					)
					JOIN `trn_cashier_head` `v` ON (
						(
							`v`.`no_sales` = `y`.`no_sales`
						)
					)
				)
			)
			JOIN `mst_item` `e` ON (
				(
					`e`.`id_item` = `y`.`id_item`
				)
			)
		)
		JOIN `mst_unit` `f` ON (
			(
				`f`.`id_unit` = `y`.`id_unit`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_ctk_do
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_do`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_do` AS SELECT
	`a`.`id_customer` AS `id_customer`,
	concat(
		`d`.`first_name`,
		' ',
		`d`.`last_name`
	) AS `nm_customer`,
	`d`.`address` AS `address`,
	`d`.`city` AS `city`,
	`d`.`phone1` AS `phone1`,
	`d`.`phone2` AS `phone2`,
	`d`.`phone3` AS `phone3`,
	`a`.`no_delivery_order` AS `no_delivery_order`,
	`a`.`date_trn` AS `date_trn`,
	`b`.`id_item` AS `id_item`,
	`e`.`item_name` AS `item_name`,
	`b`.`sent_qty` AS `qty`,
	`b`.`id_unit` AS `id_unit`,
	`f`.`unit` AS `unit`,
	`b`.`notes` AS `notes_det`,
	`a`.`notes` AS `notes`,
	`a`.`no_sales_order` AS `no_sales_order`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`
FROM
	(
		(
			(
				(
					`trn_delivery_order_head` `a`
					JOIN `trn_delivery_order_det` `b` ON (
						(
							`b`.`no_delivery_order` = `a`.`no_delivery_order`
						)
					)
				)
				JOIN `mst_customer` `d` ON (
					(
						`d`.`id_customer` = `a`.`id_customer`
					)
				)
			)
			JOIN `mst_item` `e` ON (
				(
					`e`.`id_item` = `b`.`id_item`
				)
			)
		)
		JOIN `mst_unit` `f` ON (
			(
				`f`.`id_unit` = `b`.`id_unit`
			)
		)
	)
union all 
SELECT
	'' AS `id_customer`,
	'' AS `nm_customer`,
	'' AS `address`,
	'' AS `city`,
	'' AS `phone1`,
	'' AS `phone2`,
	'' AS `phone3`,
	a.no_do AS `no_delivery_order`,
	now() AS `date_trn`,
	a.id_item AS `id_item`,
	a.`item_name` AS `item_name`,
	a.qty AS `qty`,
	a.id_unit AS `id_unit`,
	b.unit AS `unit`,
	'Item Bonus' AS `notes_det`,
	'' AS `notes`,
	'' AS `no_sales_order`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`
FROM
trn_do_discitem_det a
inner join mst_unit b on b.id_unit = a.id_unit ;

-- ----------------------------
-- View structure for view_ctk_jurnal
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_jurnal`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_jurnal` AS select `a`.`journal_no` AS `journal_no`,`a`.`date_trn` AS `date_trn`,`a`.`description` AS `description`,`a`.`total` AS `total`,`b`.`id_account` AS `id_account`,`c`.`account_name` AS `account_name`,`b`.`notes` AS `notes_det`,(case when (`b`.`amount` > 0) then `b`.`amount` else 0 end) AS `debet`,(case when (`b`.`amount` < 0) then (-(1) * `b`.`amount`) else 0 end) AS `credit`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from ((`trn_journal_head` `a` join `trn_journal_det` `b` on((`b`.`journal_no` = `a`.`journal_no`))) join `mst_account` `c` on((`c`.`id_account` = `b`.`id_account`))) ;

-- ----------------------------
-- View structure for view_ctk_koreksistock
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_koreksistock`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_koreksistock` AS select `a`.`no_adjust_stock` AS `no_adjust_stock`,`a`.`date_trn` AS `date_trn`,`a`.`id_warehouse` AS `id_warehouse`,`b`.`id_item` AS `id_item`,`v`.`item_name` AS `item_name`,`b`.`negative` AS `negative`,`b`.`positive` AS `positive`,`a`.`notes` AS `notes`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`z`.`warehouse_name` AS `warehouse_name`,`b`.`notes` AS `notes_det` from (((`trn_adjust_stock_head` `a` join `trn_adjust_stock_det` `b` on((`b`.`no_adjust_stock` = `a`.`no_adjust_stock`))) join `mst_item` `v` on((`v`.`id_item` = `b`.`id_item`))) join `mst_warehouse` `z` on((`z`.`id_warehouse` = `a`.`id_warehouse`))) ;

-- ----------------------------
-- View structure for view_ctk_pindahgudang
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_pindahgudang`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_pindahgudang` AS select `a`.`no_tranfer_stock` AS `no_tranfer_stock`,`a`.`date_trn` AS `date_trn`,`a`.`id_warehouse_from` AS `id_warehouse_from`,`a`.`id_warehouse_to` AS `id_warehouse_to`,`b`.`id_item` AS `id_item`,`v`.`item_name` AS `item_name`,`b`.`qty` AS `qty`,`a`.`notes` AS `notes`,`b`.`unit` AS `unit`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`z`.`warehouse_name` AS `warehouse_name_from`,`x`.`warehouse_name` AS `warehouse_name_to`,`b`.`notes` AS `notes_det` from ((((`trn_transfer_stock_head` `a` join `trn_transfer_stock_det` `b` on((`b`.`no_tranfer_stock` = `a`.`no_tranfer_stock`))) join `mst_item` `v` on((`v`.`id_item` = `b`.`id_item`))) join `mst_warehouse` `z` on((`z`.`id_warehouse` = `a`.`id_warehouse_from`))) join `mst_warehouse` `x` on((`x`.`id_warehouse` = `a`.`id_warehouse_to`))) ;

-- ----------------------------
-- View structure for view_ctk_po
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_po`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_po` AS select `a`.`id_supplier` AS `id_supplier`,concat(`d`.`first_name`,' ',`d`.`last_name`) AS `nm_customer`,`d`.`address` AS `address`,`d`.`city` AS `city`,`d`.`phone1` AS `phone1`,`d`.`phone2` AS `phone2`,`d`.`phone3` AS `phone3`,`a`.`no_purchase_order` AS `no_purchase_order`,`a`.`date_trn` AS `date_trn`,`b`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`b`.`qty` AS `qty`,`b`.`id_unit` AS `id_unit`,`f`.`unit` AS `unit`,`b`.`price` AS `price`,`b`.`nominal` AS `nominal`,`a`.`subtotal` AS `subtotal`,`a`.`tax` AS `tax`,`a`.`total` AS `total`,`a`.`notes` AS `notes`,`a`.`freight` AS `freight`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from ((((`trn_purchase_order_head` `a` join `trn_purchase_order_det` `b` on((`b`.`no_purchase_order` = `a`.`no_purchase_order`))) join `mst_supplier` `d` on((`d`.`id_supplier` = `a`.`id_supplier`))) join `mst_item` `e` on((`e`.`id_item` = `b`.`id_item`))) join `mst_unit` `f` on((`f`.`id_unit` = `b`.`id_unit`))) ;

-- ----------------------------
-- View structure for view_ctk_purchase
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_purchase`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_purchase` AS select `x`.`id_supplier` AS `id_supplier`,concat(`d`.`first_name`,' ',`d`.`last_name`) AS `nm_supplier`,`d`.`address` AS `address`,`d`.`city` AS `city`,`d`.`phone1` AS `phone1`,`d`.`phone2` AS `phone2`,`d`.`phone3` AS `phone3`,`x`.`no_purchase` AS `no_purchase`,`x`.`no_purchase_order` AS `no_purchase_order`,`x`.`date_trn` AS `date_trn`,`y`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`y`.`qty` AS `qty`,`y`.`id_unit` AS `id_unit`,`f`.`unit` AS `unit`,`y`.`price` AS `price`,`y`.`nominal` AS `nominal`,`x`.`payment_method` AS `payment_method`,`x`.`payment_term_days` AS `payment_term_days`,`x`.`disc_term_days` AS `disc_term_days`,`x`.`disc_term_nominal` AS `disc_term_nominal`,`x`.`notes` AS `notes`,`x`.`subtotal` AS `subtotal`,`x`.`disc` AS `disc`,`x`.`tax` AS `tax`,`x`.`total` AS `total`,`x`.`freight` AS `freight`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from ((((`trn_purchase_head` `x` join `trn_purchase_det` `y` on((`y`.`no_purchase` = `x`.`no_purchase`))) join `mst_supplier` `d` on((`d`.`id_supplier` = `x`.`id_supplier`))) join `mst_item` `e` on((`e`.`id_item` = `y`.`id_item`))) join `mst_unit` `f` on((`f`.`id_unit` = `y`.`id_unit`))) ;

-- ----------------------------
-- View structure for view_ctk_purchase_return
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_purchase_return`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_purchase_return` AS select `x`.`id_supplier` AS `id_supplier`,concat(`d`.`first_name`,' ',`d`.`last_name`) AS `nm_supplier`,`d`.`address` AS `address`,`d`.`city` AS `city`,`d`.`phone1` AS `phone1`,`d`.`phone2` AS `phone2`,`d`.`phone3` AS `phone3`,`x`.`no_purchase_return` AS `no_purchase_return`,`y`.`no_purchase` AS `no_purchase`,`x`.`date_trn` AS `date_trn`,`y`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`y`.`qty` AS `qty`,`y`.`id_unit` AS `id_unit`,`f`.`unit` AS `unit`,`y`.`price` AS `price`,`y`.`nominal` AS `nominal`,`x`.`payment_method` AS `payment_method`,`x`.`notes` AS `notes`,`x`.`subtotal` AS `subtotal`,`x`.`disc` AS `disc`,`x`.`tax` AS `tax`,`x`.`total` AS `total`,`x`.`freight` AS `freight`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((((`trn_purchase_return_head` `x` join `trn_purchase_return_det` `y` on((`y`.`no_purchase_return` = `x`.`no_purchase_return`))) join `trn_purchase_head` `v` on((`v`.`no_purchase` = `y`.`no_purchase`))) join `mst_supplier` `d` on((`d`.`id_supplier` = `x`.`id_supplier`))) join `mst_item` `e` on((`e`.`id_item` = `y`.`id_item`))) join `mst_unit` `f` on((`f`.`id_unit` = `y`.`id_unit`))) ;

-- ----------------------------
-- View structure for view_ctk_rec
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_rec`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_rec` AS select `a`.`id_supplier` AS `id_supplier`,concat(`d`.`first_name`,' ',`d`.`last_name`) AS `nm_customer`,`d`.`address` AS `address`,`d`.`city` AS `city`,`d`.`phone1` AS `phone1`,`d`.`phone2` AS `phone2`,`d`.`phone3` AS `phone3`,`a`.`no_received_order` AS `no_received_order`,`a`.`date_trn` AS `date_trn`,`b`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`b`.`received_qty` AS `qty`,`b`.`id_unit` AS `id_unit`,`f`.`unit` AS `unit`,`b`.`notes` AS `notes_det`,`a`.`notes` AS `notes`,`a`.`no_purchase_order` AS `no_purchase_order`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from ((((`trn_received_order_head` `a` join `trn_received_order_det` `b` on((`b`.`no_received_order` = `a`.`no_received_order`))) join `mst_supplier` `d` on((`d`.`id_supplier` = `a`.`id_supplier`))) join `mst_item` `e` on((`e`.`id_item` = `b`.`id_item`))) join `mst_unit` `f` on((`f`.`id_unit` = `b`.`id_unit`))) ;

-- ----------------------------
-- View structure for view_ctk_reconcile
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_reconcile`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_reconcile` AS select `a`.`no_reconcile` AS `no_reconcile`,`a`.`date_trn` AS `date_trn`,`a`.`id_account_bank` AS `id_account_bank`,`c`.`account_name` AS `acc_nm_bank`,`a`.`notes` AS `notes`,`a`.`balance_before` AS `balance_before`,`a`.`reconcile` AS `reconcile`,`a`.`balance_after` AS `balance_after`,`b`.`id_account` AS `id_account`,`d`.`account_name` AS `account_name`,`b`.`notes` AS `notes_det`,`b`.`amount_in` AS `amount_in`,`b`.`amount_out` AS `amount_out`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_reconcile_head` `a` join `trn_reconcile_det` `b` on((`b`.`no_reconcile` = `a`.`no_reconcile`))) join `mst_account` `c` on((`c`.`id_account` = `a`.`id_account_bank`))) join `mst_account` `d` on((`d`.`id_account` = `b`.`id_account`))) ;

-- ----------------------------
-- View structure for view_ctk_ro
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_ro`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_ro` AS select `a`.`no_request_order` AS `no_request_order`,`a`.`date_trn` AS `date_trn`,`b`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`b`.`qty` AS `qty`,`b`.`id_unit` AS `id_unit`,`f`.`unit` AS `unit`,`b`.`notes` AS `notes_det`,`a`.`notes` AS `notes`,`a`.`date_required` AS `date_required`,`a`.`id_warehouse` AS `id_warehouse`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_request_order_head` `a` join `trn_request_order_det` `b` on((`b`.`no_request_order` = `a`.`no_request_order`))) join `mst_item` `e` on((`e`.`id_item` = `b`.`id_item`))) join `mst_unit` `f` on((`f`.`id_unit` = `b`.`id_unit`))) ;

-- ----------------------------
-- View structure for view_ctk_sales
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_sales`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_sales` AS select `x`.`id_customer` AS `id_customer`,concat(`d`.`first_name`,' ',`d`.`last_name`) AS `nm_customer`,`d`.`address` AS `address`,`d`.`city` AS `city`,`d`.`phone1` AS `phone1`,`d`.`phone2` AS `phone2`,`d`.`phone3` AS `phone3`,`x`.`no_sales` AS `no_sales`,`x`.`no_sales_order` AS `no_sales_order`,`x`.`date_trn` AS `date_trn`,`y`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`y`.`qty` AS `qty`,`y`.`id_unit` AS `id_unit`,`f`.`unit` AS `unit`,`y`.`price` AS `price`,`y`.`nominal` AS `nominal`,`x`.`payment_method` AS `payment_method`,`x`.`term` AS `term`,`x`.`termpaydisc` AS `termpaydisc`,`x`.`discpay` AS `discpay`,`x`.`notes` AS `notes`,`x`.`subtotal` AS `subtotal`,`x`.`discount` AS `discount`,`x`.`tax` AS `tax`,`x`.`total` AS `total`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from ((((`trn_sales_head` `x` join `trn_sales_det` `y` on((`y`.`no_sales` = `x`.`no_sales`))) join `mst_customer` `d` on((`d`.`id_customer` = `x`.`id_customer`))) join `mst_item` `e` on((`e`.`id_item` = `y`.`id_item`))) join `mst_unit` `f` on((`f`.`id_unit` = `y`.`id_unit`))) ;

-- ----------------------------
-- View structure for view_ctk_sales_return
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_sales_return`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_sales_return` AS select `x`.`id_customer` AS `id_customer`,concat(`d`.`first_name`,' ',`d`.`last_name`) AS `nm_customer`,`d`.`address` AS `address`,`d`.`city` AS `city`,`d`.`phone1` AS `phone1`,`d`.`phone2` AS `phone2`,`d`.`phone3` AS `phone3`,`x`.`no_sales_return` AS `no_sales_return`,`y`.`no_sales` AS `no_sales`,`x`.`date_trn` AS `date_trn`,`y`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`y`.`qty` AS `qty`,`y`.`id_unit` AS `id_unit`,`f`.`unit` AS `unit`,`y`.`price` AS `price`,`y`.`nominal` AS `nominal`,`x`.`payment_method` AS `payment_method`,`x`.`notes` AS `notes`,`x`.`subtotal` AS `subtotal`,`x`.`disc` AS `disc`,`x`.`tax` AS `tax`,`x`.`total` AS `total`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((((`trn_sales_return_head` `x` join `trn_sales_return_det` `y` on((`y`.`no_sales_return` = `x`.`no_sales_return`))) join `trn_sales_head` `v` on((`v`.`no_sales` = `y`.`no_sales`))) join `mst_customer` `d` on((`d`.`id_customer` = `x`.`id_customer`))) join `mst_item` `e` on((`e`.`id_item` = `y`.`id_item`))) join `mst_unit` `f` on((`f`.`id_unit` = `y`.`id_unit`))) ;

-- ----------------------------
-- View structure for view_ctk_service
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_service`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_service` AS select `x`.`cust_name` AS `cust_name`,`x`.`cust_address` AS `cust_address`,`x`.`cust_phone` AS `cust_phone`,`x`.`no_service` AS `no_service`,`x`.`date_trn` AS `date_trn`,`y`.`id_service` AS `id_service`,`e`.`service_name` AS `service_name`,'Unit' AS `Unit`,`y`.`qty` AS `qty`,`y`.`price` AS `price`,`y`.`nominal` AS `nominal`,`x`.`payment_method` AS `payment_method`,`x`.`notes` AS `notes`,`x`.`subtotal` AS `subtotal`,`x`.`discount` AS `discount`,`x`.`tax` AS `tax`,`x`.`total` AS `total`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,(select `mst_company`.`address` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_address`,(select `mst_company`.`phone` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_phone` from ((`trn_service_head` `x` join `trn_service_det` `y` on((`y`.`no_service` = `x`.`no_service`))) join `mst_service` `e` on((`e`.`id_service` = `y`.`id_service`))) union all select `x`.`cust_name` AS `cust_name`,`x`.`cust_address` AS `cust_address`,`x`.`cust_phone` AS `cust_phone`,`x`.`no_service` AS `no_service`,`x`.`date_trn` AS `date_trn`,`y`.`id_item` AS `id_item`,`e`.`item_name` AS `item_name`,`y`.`id_unit` AS `id_unit`,`y`.`qty` AS `qty`,`y`.`price` AS `price`,`y`.`nominal` AS `nominal`,`x`.`payment_method` AS `payment_method`,`x`.`notes` AS `notes`,`x`.`subtotal` AS `subtotal`,`x`.`discount` AS `discount`,`x`.`tax` AS `tax`,`x`.`total` AS `total`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,(select `mst_company`.`address` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_address`,(select `mst_company`.`phone` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_phone` from ((`trn_service_head` `x` join `trn_service_item_det` `y` on((`y`.`no_service` = `x`.`no_service`))) join `mst_item` `e` on((`e`.`id_item` = `y`.`id_item`))) ;

-- ----------------------------
-- View structure for view_ctk_so
-- ----------------------------
DROP VIEW IF EXISTS `view_ctk_so`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ctk_so` AS SELECT
	`a`.`id_customer` AS `id_customer`,
	concat(
		`d`.`first_name`,
		' ',
		`d`.`last_name`
	) AS `nm_customer`,
	`d`.`address` AS `address`,
	`d`.`city` AS `city`,
	`d`.`phone1` AS `phone1`,
	`d`.`phone2` AS `phone2`,
	`d`.`phone3` AS `phone3`,
	`a`.`no_sales_order` AS `no_sales_order`,
	`a`.`date_trn` AS `date_trn`,
	`b`.`id_item` AS `id_item`,
	`e`.`item_name` AS `item_name`,
	`b`.`qty` AS `qty`,
	`b`.`id_unit` AS `id_unit`,
	`f`.`unit` AS `unit`,
	`b`.`price`- (case when x.nom_disc is null then 0 else x.nom_disc end/b.qty) - 
	 (case when y.nom_disc is null then 0 else y.nom_disc end/b.qty) -
   (case when z.nom_disc is null then 0 else z.nom_disc end/b.qty) AS `price`,
	(`b`.`price`- (case when x.nom_disc is null then 0 else x.nom_disc end/b.qty) - 
	 (case when y.nom_disc is null then 0 else y.nom_disc end/b.qty) -
   (case when z.nom_disc is null then 0 else z.nom_disc end/b.qty)) * b.qty AS `nominal`,
	`a`.`subtotal` AS `subtotal`,
	a.discount as discount,
a.nett_total as nett_total,
	`a`.`tax` AS `tax`,
	`a`.`total` AS `total`,
	`a`.`notes` AS `notes`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`, case when concat(em.first_name,' ',em.last_name) is null then 'Office' else concat(em.first_name,' ',em.last_name) end as marketing
FROM
	(
		(
			(
				(
					`trn_sales_order_head` `a`
					JOIN `trn_sales_order_det` `b` ON (
						(
							`b`.`no_sales_order` = `a`.`no_sales_order`
						)
					)
				)
				JOIN `mst_customer` `d` ON (
					(
						`d`.`id_customer` = `a`.`id_customer`
					)
				)
			)
			JOIN `mst_item` `e` ON (
				(
					`e`.`id_item` = `b`.`id_item`
				)
			)
		)
		JOIN `mst_unit` `f` ON (
			(
				`f`.`id_unit` = `b`.`id_unit`
			)
		)
join trn_so_discbrand_det x on x.no_sales_order = b.no_sales_order and x.id_item = b.id_item
join trn_so_disccat_det y on y.no_sales_order = b.no_sales_order and y.id_item = b.id_item
join trn_so_disctype_det z on z.no_sales_order = b.no_sales_order and z.id_item = b.id_item
left JOIN mst_employee em on em.id_employee = a.id_employee
	) ;

-- ----------------------------
-- View structure for view_curr_def
-- ----------------------------
DROP VIEW IF EXISTS `view_curr_def`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_curr_def` AS select id_currency from mst_currency where flag_default =1 ;

-- ----------------------------
-- View structure for view_dataset_do
-- ----------------------------
DROP VIEW IF EXISTS `view_dataset_do`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_dataset_do` AS select distinct `a`.`no_sales_order` AS `no_sales_order`,`a`.`id_customer` AS `id_customer`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `customer_name`,`b`.`address` AS `address`,`a`.`date_trn` AS `date_trn` from ((`trn_sales_order_head` `a` join `mst_customer` `b` on((`b`.`id_customer` = `a`.`id_customer`))) join `trn_sales_order_det` `c` on((`c`.`no_sales_order` = `a`.`no_sales_order`))) where (((case when isnull(`c`.`qty`) then 0 else `c`.`qty` end) - (case when isnull(`c`.`sent_qty`) then 0 else `c`.`sent_qty` end)) <> 0) ;

-- ----------------------------
-- View structure for view_dataset_po
-- ----------------------------
DROP VIEW IF EXISTS `view_dataset_po`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_dataset_po` AS select distinct `a`.`no_purchase_order` AS `no_purchase_order`,`a`.`id_supplier` AS `id_supplier`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `supplier_name`,`b`.`address` AS `address`,`a`.`date_trn` AS `date_trn` from ((`trn_purchase_order_head` `a` join `mst_supplier` `b` on((`b`.`id_supplier` = `a`.`id_supplier`))) join `trn_purchase_order_det` `c` on((`c`.`no_purchase_order` = `a`.`no_purchase_order`))) where (((case when isnull(`c`.`qty`) then 0 else `c`.`qty` end) - (case when isnull(`c`.`qty_received`) then 0 else `c`.`qty_received` end)) <> 0) ;

-- ----------------------------
-- View structure for view_dataset_po_purch
-- ----------------------------
DROP VIEW IF EXISTS `view_dataset_po_purch`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_dataset_po_purch` AS select distinct `a`.`no_purchase_order` AS `no_purchase_order`,`a`.`id_supplier` AS `id_supplier`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `supplier_name`,`b`.`address` AS `address`,`a`.`date_trn` AS `date_trn` from ((`trn_purchase_order_head` `a` join `mst_supplier` `b` on((`b`.`id_supplier` = `a`.`id_supplier`))) join `trn_purchase_order_det` `c` on((`c`.`no_purchase_order` = `a`.`no_purchase_order`))) where (((case when isnull(`c`.`qty_received`) then 0 else `c`.`qty_received` end) > 0) and ((case when isnull(`a`.`flag_status_invoice`) then 0 else `a`.`flag_status_invoice` end) = 0)) ;

-- ----------------------------
-- View structure for view_dataset_po_rec
-- ----------------------------
DROP VIEW IF EXISTS `view_dataset_po_rec`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_dataset_po_rec` AS select distinct `a`.`no_purchase_order` AS `no_purchase_order`,`a`.`id_supplier` AS `id_supplier`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `supplier_name`,`b`.`address` AS `address`,`a`.`date_trn` AS `date_trn` from ((`trn_purchase_order_head` `a` join `mst_supplier` `b` on((`b`.`id_supplier` = `a`.`id_supplier`))) join `trn_purchase_order_det` `c` on((`c`.`no_purchase_order` = `a`.`no_purchase_order`))) where ((((case when isnull(`c`.`qty`) then 0 else `c`.`qty` end) - (case when isnull(`c`.`qty_received`) then 0 else `c`.`qty_received` end)) <> 0) and ((case when isnull(`a`.`flag_status_invoice`) then 0 else `a`.`flag_status_invoice` end) = 0)) ;

-- ----------------------------
-- View structure for view_dataset_purch
-- ----------------------------
DROP VIEW IF EXISTS `view_dataset_purch`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_dataset_purch` AS select distinct `a`.`no_purchase` AS `no_purchase`,`a`.`id_supplier` AS `id_supplier`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `supplier_name`,`b`.`address` AS `address`,`a`.`date_trn` AS `date_trn` from (((`trn_purchase_head` `a` join `trn_purchase_det` `s` on((`s`.`no_purchase` = `a`.`no_purchase`))) join `mst_supplier` `b` on((`b`.`id_supplier` = `a`.`id_supplier`))) left join `view_total_purchase_return` `f` on(((`f`.`id_item` = `s`.`id_item`) and (`f`.`no_purchase` = `s`.`no_purchase`)))) where ((case when isnull(`f`.`qty`) then 0 else `f`.`qty` end) < (case when isnull(`s`.`qty`) then 0 else `s`.`qty` end)) ;

-- ----------------------------
-- View structure for view_dataset_so
-- ----------------------------
DROP VIEW IF EXISTS `view_dataset_so`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_dataset_so` AS select distinct `a`.`no_sales_order` AS `no_sales_order`,`a`.`id_customer` AS `id_customer`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `customer_name`,`b`.`address` AS `address`,`a`.`date_trn` AS `date_trn` from ((`trn_sales_order_head` `a` join `mst_customer` `b` on((`b`.`id_customer` = `a`.`id_customer`))) join `trn_sales_order_det` `c` on((`c`.`no_sales_order` = `a`.`no_sales_order`))) where (((case when isnull(`c`.`qty`) then 0 else `c`.`qty` end) - (case when isnull(`c`.`sent_qty`) then 0 else `c`.`sent_qty` end)) <> 0) ;

-- ----------------------------
-- View structure for view_dataset_so_dev
-- ----------------------------
DROP VIEW IF EXISTS `view_dataset_so_dev`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_dataset_so_dev` AS select distinct `a`.`no_sales_order` AS `no_sales_order`,`a`.`id_customer` AS `id_customer`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `customer_name`,`b`.`address` AS `address`,`a`.`date_trn` AS `date_trn` from ((`trn_sales_order_head` `a` join `mst_customer` `b` on((`b`.`id_customer` = `a`.`id_customer`))) join `trn_sales_order_det` `c` on((`c`.`no_sales_order` = `a`.`no_sales_order`))) where ((((case when isnull(`c`.`qty`) then 0 else `c`.`qty` end) - (case when isnull(`c`.`sent_qty`) then 0 else `c`.`sent_qty` end)) <> 0) and ((case when isnull(`a`.`flag_status_invoice`) then 0 else `a`.`flag_status_invoice` end) = 0)) ;

-- ----------------------------
-- View structure for view_depreciation_history
-- ----------------------------
DROP VIEW IF EXISTS `view_depreciation_history`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_depreciation_history` AS select a.id_aset,b.nama,c.type,a.date_trn,a.nominal,a.period,a.years,d.department_name,
(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`
 from i_aset_depreciation a
inner join mst_aset b on b.id_aset = a.id_aset
inner join mst_golaset c on c.id_golongan = b.id_golongan
inner join mst_department d on d.department_id = b.id_department ;

-- ----------------------------
-- View structure for view_disc_brand_item
-- ----------------------------
DROP VIEW IF EXISTS `view_disc_brand_item`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `view_disc_brand_item` AS select a.id_item,a.item_name,case when b.disc is null then 0 else b.disc end as disc 
from mst_item a inner join mst_itembrand b on b.mst_itembrand_id = a.id_brand ;

-- ----------------------------
-- View structure for view_disc_cat_item
-- ----------------------------
DROP VIEW IF EXISTS `view_disc_cat_item`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_disc_cat_item` AS select a.id_item,a.item_name,case when b.discount is null then 0 else b.discount end as disc 
from mst_item a inner join mst_itemcat b on b.mst_itemcat_id = a.id_category ;

-- ----------------------------
-- View structure for view_disc_item_do
-- ----------------------------
DROP VIEW IF EXISTS `view_disc_item_do`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_disc_item_do` AS select a.no_do,a.id_item, b.item_name, a.qty ,a.id_unit
from trn_do_discitem_det a inner join mst_item b on b.id_item = a.id_item ;

-- ----------------------------
-- View structure for view_disc_item_so
-- ----------------------------
DROP VIEW IF EXISTS `view_disc_item_so`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_disc_item_so` AS select a.no_sales_order,a.id_item, b.item_name, a.qty ,a.id_unit
from trn_so_discitem_det a inner join mst_item b on b.id_item = a.id_item ;

-- ----------------------------
-- View structure for view_disc_type_item
-- ----------------------------
DROP VIEW IF EXISTS `view_disc_type_item`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_disc_type_item` AS select a.id_item,a.item_name,case when b.discount is null then 0 else b.discount end as disc 
from mst_item a inner join mst_itemjenis b on b.mst_itemjenis_id = a.id_jenis ;

-- ----------------------------
-- View structure for view_employee
-- ----------------------------
DROP VIEW IF EXISTS `view_employee`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_employee` AS select `mst_employee`.`id_employee` AS `id_employee`,concat(`mst_employee`.`first_name`,' ',`mst_employee`.`last_name`) AS `employee_nm`,`mst_employee`.`position_id` AS `position_id`,`mst_employee`.`department_id` AS `department_id` from `mst_employee` ;

-- ----------------------------
-- View structure for view_grafikbiaya_bln
-- ----------------------------
DROP VIEW IF EXISTS `view_grafikbiaya_bln`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_grafikbiaya_bln` AS select c.account_name,sum(a.nominal)/get_totalcost_month() as persent from trn_ledger_det a inner join trn_ledger_head b on b.no_ledger = a.no_ledger 
inner join mst_account c on c.id_account = a.id_account
where c.golongan = 6 and MONTH(b.date_trn) = get_month() AND YEAR(B.date_trn) = get_year() and b.post_from <> 'Close Period'
group by c.account_name ;

-- ----------------------------
-- View structure for view_grafikbiaya_th
-- ----------------------------
DROP VIEW IF EXISTS `view_grafikbiaya_th`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_grafikbiaya_th` AS select c.account_name,round(sum(a.nominal)) as persent from trn_ledger_det a inner join trn_ledger_head b on b.no_ledger = a.no_ledger 
inner join mst_account c on c.id_account = a.id_account
where c.golongan = 6 and year(b.date_trn) = get_year() and b.post_from <> 'Close Period'
group by c.account_name ;

-- ----------------------------
-- View structure for view_grafik_currentaset
-- ----------------------------
DROP VIEW IF EXISTS `view_grafik_currentaset`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_grafik_currentaset` AS select c.account_name,sum(case when a.nominal > 0 then abs(a.nominal) else 0 end) as debet,
sum(case when a.nominal < 0 then abs(a.nominal) else 0 end) as credit
 from trn_ledger_det a inner join trn_ledger_head b on b.no_ledger = a.no_ledger 
inner join mst_account c on c.id_account = a.id_account
where c.golongan = 1 AND YEAR(B.date_trn) = get_year() and b.post_from <> 'Close Period' 
and a.id_account in (select id_account from i_cashbank_setup)
group by c.account_name
order by a.id_account asc ;

-- ----------------------------
-- View structure for view_hutang_jt
-- ----------------------------
DROP VIEW IF EXISTS `view_hutang_jt`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_hutang_jt` AS SELECT DISTINCT
	`a`.`no_purchase` AS `no_purchase`,
	`a`.`id_supplier` AS `id_supplier`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `supplier`,
	`a`.`date_trn` AS `date_trn`,
	(
		(
			`a`.`purchase_amount` - `a`.`return_amount`
		) - `a`.`disc_amount`
	) AS `total_ap`,
	`a`.`paid_amount` AS `paid_amount`,
	case when `a`.purchase_amount is null then 0 else a.purchase_amount end -
	case when `a`.return_amount is null then 0 else a.return_amount end -
	case when `a`.disc_amount is null then 0 else a.disc_amount end -
	case when `a`.paid_amount is null then 0 else a.paid_amount end
AS `balance`,
	`b`.`payment_term_days` AS `payment_term_days`,
	cast(
		(
			`a`.`date_trn` + INTERVAL `b`.`payment_term_days` DAY
		) AS date
	) AS `jatuh_tempo`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
b.kurs,
h.id_curr,
k.convert_value
FROM
	(
		(
			`ap_status` `a`
			JOIN `trn_purchase_head` `b` ON (
				(
					`b`.`no_purchase` = `a`.`no_purchase`
				)
			)
			join trn_purchase_det h on h.no_purchase = b.no_purchase
		)
		JOIN `mst_supplier` `c` ON (
			(
				`c`.`id_supplier` = `b`.`id_supplier`
			)
		)
join mst_setcurrency k on k.id_currency = h.id_curr
	)
WHERE
	(case when `a`.purchase_amount is null then 0 else a.purchase_amount end -
	case when `a`.return_amount is null then 0 else a.return_amount end -
	case when `a`.disc_amount is null then 0 else a.disc_amount end -
	case when `a`.paid_amount is null then 0 else a.paid_amount end > 0) ;

-- ----------------------------
-- View structure for view_item_beg_balance
-- ----------------------------
DROP VIEW IF EXISTS `view_item_beg_balance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_item_beg_balance` AS select `b`.`id_item` AS `id_item`,`a`.`item_name` AS `item_name`,`b`.`id_unit` AS `id_unit`,(case when isnull(`b`.`balance`) then 0 else `b`.`balance` end) AS `balance`,(case when isnull(`b`.`price`) then 0 else `b`.`price` end) AS `price`,(case when isnull(`b`.`notes`) then '' else `b`.`notes` end) AS `notes`,`b`.`id_warehouse` AS `id_warehouse` from (`mst_item` `a` join `i_item_beg_balance` `b` on((`b`.`id_item` = `a`.`id_item`))) ;

-- ----------------------------
-- View structure for view_item_disc
-- ----------------------------
DROP VIEW IF EXISTS `view_item_disc`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_item_disc` AS SELECT
	a.id_item,
	a.id_item_disc,
	b.item_name AS item_name_disc,
	a.qty,
	a.id_unit
FROM
	mst_item_disc a
INNER JOIN mst_item b ON b.id_item = a.id_item_disc ;

-- ----------------------------
-- View structure for view_laba_rugi
-- ----------------------------
DROP VIEW IF EXISTS `view_laba_rugi`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `view_laba_rugi` AS select *, (select * from view_curr_def) as curr from temp_income ;

-- ----------------------------
-- View structure for view_laphutang_per_supplier
-- ----------------------------
DROP VIEW IF EXISTS `view_laphutang_per_supplier`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_laphutang_per_supplier` AS SELECT
	`a`.`no_purchase` AS `no_purchase`,
	`a`.`date_trn` AS `date_trn`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `supplier_name`,
	`b`.`notes` AS `notes`,
	`b`.`payment_term_days` AS `payment_term_days`,
	`a`.`purchase_amount` AS `purchase_amount`,
	(
		CASE
		WHEN isnull(`a`.`return_amount`) THEN
			0
		ELSE
			`a`.`return_amount`
		END
	) AS `return_amount`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
	`b`.`id_supplier` AS `id_supplier`,
	(
		CASE
		WHEN (
			(
				to_days(now()) - to_days(`a`.`date_trn`)
			) <= `b`.`disc_term_days`
		) THEN
			round(
				(
					(
						`b`.`disc_term_nominal` * `a`.`purchase_amount`
					) / 100
				),
				0
			)
		ELSE
			0
		END
	) AS `est_disc`,
	(
		CASE
		WHEN (
			(
				to_days(now()) - to_days(`a`.`date_trn`)
			) <= `b`.`disc_term_days`
		) THEN
			(
				(
					(
						`a`.`purchase_amount` - (
							CASE
							WHEN isnull(`a`.`return_amount`) THEN
								0
							ELSE
								`a`.`return_amount`
							END
						)
					) - round(
						(
							(
								`b`.`disc_term_nominal` * `a`.`purchase_amount`
							) / 100
						),
						0
					)
				) - (
					CASE
					WHEN isnull(`a`.`paid_amount`) THEN
						0
					ELSE
						`a`.`paid_amount`
					END
				)
			)
		ELSE
			(
				(
					`a`.`purchase_amount` - (
						CASE
						WHEN isnull(`a`.`return_amount`) THEN
							0
						ELSE
							`a`.`return_amount`
						END
					)
				) - (
					CASE
					WHEN isnull(`a`.`paid_amount`) THEN
						0
					ELSE
						`a`.`paid_amount`
					END
				)
			)
		END
	) AS `total`,
	(
		CASE
		WHEN isnull(`a`.`paid_amount`) THEN
			0
		ELSE
			`a`.`paid_amount`
		END
	) AS `paid_amount`,
(select id_currency from mst_currency where flag_default = 1) as curr
FROM
	(
		(
			`ap_status` `a`
			JOIN `trn_purchase_head` `b` ON (
				(
					`b`.`no_purchase` = `a`.`no_purchase`
				)
			)
		)
		JOIN `mst_supplier` `c` ON (
			(
				`c`.`id_supplier` = `b`.`id_supplier`
			)
		)
	)
WHERE
	(`b`.`payment_method` = 2) ;

-- ----------------------------
-- View structure for view_lappiutang_per_cust
-- ----------------------------
DROP VIEW IF EXISTS `view_lappiutang_per_cust`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lappiutang_per_cust` AS SELECT
	`a`.`no_sales` AS `no_sales`,
	`a`.`date_trn` AS `date_trn`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `customer_name`,
	`b`.`notes` AS `notes`,
	`b`.`term` AS `term`,
	`a`.`sales_amount` AS `sales_amount`,
	(
		CASE
		WHEN isnull(`a`.`return_amount`) THEN
			0
		ELSE
			`a`.`return_amount`
		END
	) AS `return_amount`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
	`b`.`id_customer` AS `id_customer`,
	(
		CASE
		WHEN (
			(
				to_days(now()) - to_days(`a`.`date_trn`)
			) <= `b`.`termpaydisc`
		) THEN
			(
				(
					`b`.`discpay` * `a`.`sales_amount`
				) / 100
			)
		ELSE
			0
		END
	) AS `est_disc`,
	(
		CASE
		WHEN (
			(
				to_days(now()) - to_days(`a`.`date_trn`)
			) <= `b`.`termpaydisc`
		) THEN
			(
				(
					(
						`a`.`sales_amount` - (
							CASE
							WHEN isnull(`a`.`return_amount`) THEN
								0
							ELSE
								`a`.`return_amount`
							END
						)
					) - (
						(
							`b`.`discpay` * `a`.`sales_amount`
						) / 100
					)
				) - (
					CASE
					WHEN isnull(`a`.`paid_amount`) THEN
						0
					ELSE
						`a`.`paid_amount`
					END
				)
			)
		ELSE
			(
				(
					`a`.`sales_amount` - (
						CASE
						WHEN isnull(`a`.`return_amount`) THEN
							0
						ELSE
							`a`.`return_amount`
						END
					)
				) - (
					CASE
					WHEN isnull(`a`.`paid_amount`) THEN
						0
					ELSE
						`a`.`paid_amount`
					END
				)
			)
		END
	) AS `total`,
	(
		CASE
		WHEN isnull(`a`.`paid_amount`) THEN
			0
		ELSE
			`a`.`paid_amount`
		END
	) AS `paid_amount`,
(select id_currency from mst_currency where flag_default = 1) as curr
FROM
	(
		(
			`ar_status` `a`
			JOIN `trn_sales_head` `b` ON (
				(
					`b`.`no_sales` = `a`.`no_sales`
				)
			)
		)
		JOIN `mst_customer` `c` ON (
			(
				`c`.`id_customer` = `b`.`id_customer`
			)
		)
	)
WHERE
	(`b`.`payment_method` = 2) ;

-- ----------------------------
-- View structure for view_lap_datacustomer
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_datacustomer`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_datacustomer` AS select `mst_customer`.`id_customer` AS `ID`,concat(`mst_customer`.`first_name`,' ',`mst_customer`.`last_name`) AS `Nama`,`mst_customer`.`address` AS `Alamat`,`mst_customer`.`city` AS `Kota`,`mst_customer`.`state` AS `Propinsi`,concat(`mst_customer`.`phone1`,',',`mst_customer`.`phone2`) AS `Telepon`,`mst_customer`.`email` AS `Email`,`mst_customer`.`website` AS `Wesite`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from `mst_customer` ;

-- ----------------------------
-- View structure for view_lap_datacustomer_2
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_datacustomer_2`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_datacustomer_2` AS select `mst_customer`.`id_customer` AS `ID`,concat(`mst_customer`.`first_name`,' ',`mst_customer`.`last_name`) AS `Nama`,`mst_customer`.`address` AS `Alamat`,`mst_customer`.`city` AS `Kota`,`mst_customer`.`state` AS `Propinsi`,concat(`mst_customer`.`phone1`,',',`mst_customer`.`phone2`) AS `Telepon`,`mst_customer`.`email` AS `Email`,`mst_customer`.`website` AS `Wesite`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from `mst_customer` ;

-- ----------------------------
-- View structure for view_lap_dataemployee
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_dataemployee`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_dataemployee` AS select `mst_employee`.`id_employee` AS `ID`,concat(`mst_employee`.`first_name`,' ',`mst_employee`.`last_name`) AS `Nama`,`mst_employee`.`address` AS `Alamat`,`mst_employee`.`city` AS `Kota`,`mst_employee`.`state` AS `Propinsi`,concat(`mst_employee`.`phone1`,',',`mst_employee`.`phone2`) AS `Telepon`,`mst_employee`.`email` AS `Email`,`mst_employee`.`website` AS `Wesite`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from `mst_employee` ;

-- ----------------------------
-- View structure for view_lap_datasupplier
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_datasupplier`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_datasupplier` AS select `mst_supplier`.`id_supplier` AS `ID`,concat(`mst_supplier`.`first_name`,' ',`mst_supplier`.`last_name`) AS `Nama`,`mst_supplier`.`address` AS `Alamat`,`mst_supplier`.`city` AS `Kota`,`mst_supplier`.`state` AS `Propinsi`,concat(`mst_supplier`.`phone1`,',',`mst_supplier`.`phone2`) AS `Telepon`,`mst_supplier`.`email` AS `Email`,`mst_supplier`.`website` AS `Wesite`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from `mst_supplier` ;

-- ----------------------------
-- View structure for view_lap_detail_transjasa
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_detail_transjasa`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_detail_transjasa` AS select `a`.`no_service` AS `no_service`,cast(`a`.`date_trn` as date) AS `date_trn`,`a`.`id_customer` AS `id_customer`,`b`.`id_service` AS `id_service`,`d`.`service_name` AS `service_name`,`b`.`price` AS `price`,`b`.`qty` AS `qty`,`b`.`nominal` AS `nominal`,(case when isnull(`a`.`cust_name`) then concat(`c`.`first_name`,' ',`c`.`last_name`) else `a`.`cust_name` end) AS `nama_customer`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,(case when (`a`.`flag_member` = 0) then 'Non Member' when (`a`.`flag_member` = 1) then 'Member' end) AS `status_member` from (((`trn_service_head` `a` join `trn_service_det` `b` on((`b`.`no_service` = `a`.`no_service`))) join `mst_service` `d` on((`d`.`id_service` = `b`.`id_service`))) left join `mst_customer` `c` on((`c`.`id_customer` = `a`.`id_customer`))) union all select `a`.`no_service` AS `no_service`,cast(`a`.`date_trn` as date) AS `date_trn`,`a`.`id_customer` AS `id_customer`,`b`.`id_item` AS `id_item`,`d`.`item_name` AS `item_name`,`b`.`price` AS `price`,`b`.`qty` AS `qty`,`b`.`nominal` AS `nominal`,(case when isnull(`a`.`cust_name`) then concat(`c`.`first_name`,' ',`c`.`last_name`) else `a`.`cust_name` end) AS `nama_customer`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,(case when (`a`.`flag_member` = 0) then 'Non Member' when (`a`.`flag_member` = 1) then 'Member' end) AS `status_member` from (((`trn_service_head` `a` join `trn_service_item_det` `b` on((`b`.`no_service` = `a`.`no_service`))) join `mst_item` `d` on((`d`.`id_item` = `b`.`id_item`))) left join `mst_customer` `c` on((`c`.`id_customer` = `a`.`id_customer`))) ;

-- ----------------------------
-- View structure for view_lap_detail_transkasir
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_detail_transkasir`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_detail_transkasir` AS SELECT
	`a`.`no_sales` AS `no_sales`,
	cast(`a`.`date_trn` AS date) AS `date_trn`,
	`a`.`id_customer` AS `id_customer`,
	`b`.`id_item` AS `id_item`,
	`d`.`item_name` AS `item_name`,
	`b`.`price` AS `price`,
	`b`.`qty` AS `qty`,
	`b`.`nominal` AS `nominal`,
	(
		CASE
		WHEN isnull(`a`.`customer`) THEN
			concat(
				`c`.`first_name`,
				' ',
				`c`.`last_name`
			)
		ELSE
			`a`.`customer`
		END
	) AS `nama_customer`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
	(
		CASE
		WHEN (`a`.`flag_member` = 0) THEN
			'Non Member'
		WHEN (`a`.`flag_member` = 1) THEN
			'Member'
		END
	) AS `status_member`,
	`a`.`subtotal` AS `subtotal`,
	(
		(
			`a`.`discount` * `a`.`subtotal`
		) / 100
	) AS `discount`,
	(
		`a`.`tax` * (
			`a`.`subtotal` - (
				(
					`a`.`subtotal` * `a`.`discount`
				) / 100
			)
		)
	) AS `tax`,
	`a`.`total` AS `total`,
(select id_currency from mst_currency where flag_default = 1) as id_currency,
b.number_asc
FROM
	(
		(
			(
				`trn_cashier_head` `a`
				JOIN `trn_cashier_det` `b` ON (
					(
						`b`.`no_sales` = `a`.`no_sales`
					)
				)
			)
			JOIN `mst_item` `d` ON (
				(
					`d`.`id_item` = `b`.`id_item`
				)
			)
		)
		LEFT JOIN `mst_customer` `c` ON (
			(
				`c`.`id_customer` = `a`.`id_customer`
			)
		)
	)
UNION ALL
	SELECT
		`a`.`no_sales` AS `no_sales`,
		cast(`a`.`date_trn` AS date) AS `date_trn`,
		`a`.`id_customer` AS `id_customer`,
		`b`.`id_service` AS `id_service`,
		`d`.`service_name` AS `service_name`,
		`b`.`price` AS `price`,
		`b`.`qty` AS `qty`,
		`b`.`nominal` AS `nominal`,
		(
			CASE
			WHEN isnull(`a`.`customer`) THEN
				concat(
					`c`.`first_name`,
					' ',
					`c`.`last_name`
				)
			ELSE
				`a`.`customer`
			END
		) AS `nama_customer`,
		(
			SELECT
				`mst_company`.`company_name`
			FROM
				`mst_company`
			WHERE
				(
					`mst_company`.`flag_active` = 1
				)
		) AS `company_name`,
		(
			CASE
			WHEN (`a`.`flag_member` = 0) THEN
				'Non Member'
			WHEN (`a`.`flag_member` = 1) THEN
				'Member'
			END
		) AS `status_member`,
		`a`.`subtotal` AS `subtotal`,
		(
			(
				`a`.`discount` * `a`.`subtotal`
			) / 100
		) AS `discount`,
		(
			`a`.`tax` * (
				`a`.`subtotal` - (
					(
						`a`.`subtotal` * `a`.`discount`
					) / 100
				)
			)
		) AS `tax`,
		`a`.`total` AS `total`,
(select id_currency from mst_currency where flag_default = 1) as id_currency,
b.number_asc
	FROM
		(
			(
				(
					`trn_cashier_head` `a`
					JOIN `trn_cashier_service_det` `b` ON (
						(
							`b`.`no_sales` = `a`.`no_sales`
						)
					)
				)
				JOIN `mst_service` `d` ON (
					(
						`d`.`id_service` = `b`.`id_service`
					)
				)
			)
			LEFT JOIN `mst_customer` `c` ON (
				(
					`c`.`id_customer` = `a`.`id_customer`
				)
			)
		) 
order by number_asc ;

-- ----------------------------
-- View structure for view_lap_hutang_lunas
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_hutang_lunas`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_hutang_lunas` AS SELECT
	`a`.`no_purchase` AS `no_purchase`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `supplier`,
	`a`.`purchase_amount` AS `purchase_amount`,
	`a`.`return_amount` AS `return_amount`,
	(
		`a`.`purchase_amount` - `a`.`return_amount`
	) AS `nett_purch`,
	`b`.`no_payment_ap` AS `no_payment_ap`,
	`d`.`date_trn` AS `date_trn`,
	`a`.`disc_amount` AS `disc_amount`,
	`b`.`paid_amount` AS `paid_amount`,
	`d`.`notes` AS `notes`,
	`d`.`id_supplier` AS `id_supplier`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
d.id_currency
FROM
	(
		(
			(
				`ap_status` `a`
				JOIN `trn_payment_ap_det` `b` ON (
					(
						`b`.`no_purchase` = `a`.`no_purchase`
					)
				)
			)
			JOIN `mst_supplier` `c` ON (
				(
					`c`.`id_supplier` = `a`.`id_supplier`
				)
			)
		)
		JOIN `trn_payment_ap_head` `d` ON (
			(
				`d`.`no_payment_ap` = `b`.`no_payment_ap`
			)
		)
	)
WHERE
	(`a`.`balance` = 0) ;

-- ----------------------------
-- View structure for view_lap_jurnal
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_jurnal`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_jurnal` AS SELECT
	cast(`a`.`date_trn` AS date) AS `date_trn`,
	`b`.`no_ledger` AS `no_ledger`,
	`b`.`id_account` AS `id_account`,
	`c`.`account_name` AS `account_name`,
	`b`.`notes` AS `notes`,
	(
		CASE
		WHEN (`b`.`nominal` > 0) THEN
			`b`.`nominal`
		ELSE
			0
		END
	) AS `debit`,
	(
		CASE
		WHEN (`b`.`nominal` < 0) THEN
			(-(1) * `b`.`nominal`)
		ELSE
			0
		END
	) AS `kredit`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
(select id_currency from mst_currency where flag_default = 1) as curr
FROM
	(
		(
			`trn_ledger_head` `a`
			JOIN `trn_ledger_det` `b` ON (
				(
					`b`.`no_ledger` = `a`.`no_ledger`
				)
			)
		)
		JOIN `mst_account` `c` ON (
			(
				`c`.`id_account` = `b`.`id_account`
			)
		)
	)
ORDER BY
	`a`.`date_trn`,
	`a`.`no_ledger`,
	(
		CASE
		WHEN (`b`.`nominal` > 0) THEN
			`b`.`nominal`
		END
	) DESC ;

-- ----------------------------
-- View structure for view_lap_koreksi_stock
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_koreksi_stock`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_koreksi_stock` AS select `a`.`no_adjust_stock` AS `no_adjust_stock`,`a`.`date_trn` AS `date_trn`,`c`.`warehouse_name` AS `warehouse_name`,`b`.`negative` AS `koreksi_negative`,`b`.`positive` AS `koreksi_positive`,`b`.`notes` AS `notes_det`,`a`.`notes` AS `notes`,`b`.`id_item` AS `id_item`,`d`.`item_name` AS `item_name`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_adjust_stock_head` `a` join `trn_adjust_stock_det` `b` on((`b`.`no_adjust_stock` = `a`.`no_adjust_stock`))) join `mst_warehouse` `c` on((`c`.`id_warehouse` = `a`.`id_warehouse`))) join `mst_item` `d` on((`d`.`id_item` = `b`.`id_item`))) ;

-- ----------------------------
-- View structure for view_lap_pembelian_std
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_pembelian_std`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_pembelian_std` AS SELECT DISTINCT
	`a`.`no_purchase` AS `no_purchase`,
	cast(`a`.`date_trn` AS date) AS `date_trn`,
	`a`.`id_supplier` AS `id_supplier`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `nama_supplier`,
	`a`.`subtotal` AS `subtotal`,
	`a`.`freight` AS `freight`,
	(
		(
			`a`.`disc` * (
				`a`.`subtotal` + `a`.`freight`
			)
		) / 100
	) AS `discount`,
	(
		(
			`a`.`subtotal` + `a`.`freight`
		) - (
			(
				`a`.`disc` * (
					`a`.`subtotal` + `a`.`freight`
				)
			) / 100
		)
	) AS `subtotal_nett`,
	(
		(`a`.`tax` / 100) * (
			(
				`a`.`subtotal` + `a`.`freight`
			) - (
				(`a`.`disc` * `a`.`subtotal`) / 100
			)
		)
	) AS `PPN`,
	`a`.`total` AS `total`,
	`a`.`notes` AS `notes`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
x.id_curr
FROM
	(
		`trn_purchase_head` `a` join trn_purchase_det x on x.no_purchase = a.no_purchase
		JOIN `mst_supplier` `c` ON (
			(
				`c`.`id_supplier` = `a`.`id_supplier`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_lap_pemby_hutang
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_pemby_hutang`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_pemby_hutang` AS SELECT
	`aph`.`no_payment_ap` AS `no_payment_ap`,
	concat(
		`ms`.`first_name`,' ',
		`ms`.`last_name`
	) AS `supplier_name`,
	`aph`.`date_trn` AS `date_trn`,
	`aph`.`notes` AS `notes`,
	0 AS `total`,
	`ma`.`account_name` AS `account_name`,
	`aph`.`id_supplier` AS `id_supplier`,
	`aph`.`id_account` AS `id_account`,
	`apd`.`number_asc` AS `number_asc`,
	`apd`.`no_purchase` AS `no_purchase`,
	`apd`.`invoice_date` AS `invoice_date`,
	`apd`.`ap_amount`/ apd.kurs AS `ap_amount`,
	`apd`.`discount`/ apd.kurs AS `discount`,
	`apd`.`ap_amount_net`/ apd.kurs AS `ap_amount_net`,
	`apd`.`paid_amount`/ apd.kurs AS `paid_amount`,
	concat(
		`ms`.`address`,
		' ',
		`ms`.`city`
	) AS `supplier_addr`,
	`apd`.`ap_return`/ apd.kurs AS `ap_return`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
aph.id_currency,
apd.kurs
FROM
	(
		(
			(
				`trn_payment_ap_head` `aph`
				JOIN `trn_payment_ap_det` `apd` ON (
					(
						`aph`.`no_payment_ap` = `apd`.`no_payment_ap`
					)
				)
			)
			JOIN `mst_supplier` `ms` ON (
				(
					`ms`.`id_supplier` = `aph`.`id_supplier`
				)
			)
		)
		JOIN `mst_account` `ma` ON (
			(
				`ma`.`id_account` = `aph`.`id_account`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_lap_pemby_piutang
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_pemby_piutang`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_pemby_piutang` AS SELECT
	`aph`.`no_payment_ar` AS `no_payment_ar`,
	concat(
		`ms`.`first_name`,
		`ms`.`last_name`
	) AS `customer_name`,
	`aph`.`date_trn` AS `date_trn`,
	`aph`.`notes` AS `notes`,
	0 AS `total`,
	`ma`.`account_name` AS `account_name`,
	`aph`.`id_customer` AS `id_customer`,
	`aph`.`id_account` AS `id_account`,
	`apd`.`number_asc` AS `number_asc`,
	`apd`.`no_invoice` AS `no_invoice`,
	`apd`.`invoice_date` AS `invoice_date`,
	`apd`.`ap_amount`/ apd.kurs AS `ap_amount`,
	`apd`.`discount`/ apd.kurs AS `discount`,
	`apd`.`ap_amount_net`/ apd.kurs AS `ap_amount_net`,
	`apd`.`paid_amount`/ apd.kurs AS `paid_amount`,
	concat(
		`ms`.`address`,
		' ',
		`ms`.`city`
	) AS `supplier_addr`,
	`apd`.`ap_return`/ apd.kurs AS `ap_return`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
aph.id_currency,
apd.kurs
FROM
	(
		(
			(
				`trn_payment_ar_head` `aph`
				JOIN `trn_payment_ar_det` `apd` ON (
					(
						`aph`.`no_payment_ar` = `apd`.`no_payment_ar`
					)
				)
			)
			JOIN `mst_customer` `ms` ON (
				(
					`ms`.`id_customer` = `aph`.`id_customer`
				)
			)
		)
		JOIN `mst_account` `ma` ON (
			(
				`ma`.`id_account` = `aph`.`id_account`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_lap_penjualan_std
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_penjualan_std`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_penjualan_std` AS SELECT DISTINCT
	`a`.`no_sales` AS `no_sales`,
	cast(`a`.`date_trn` AS date) AS `date_trn`,
	`a`.`id_customer` AS `id_customer`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `nama_customer`,
	`a`.`subtotal` AS `subtotal`,
	(
		(
			`a`.`discount` * `a`.`subtotal`
		) / 100
	) AS `discount`,
	(
		`a`.`subtotal` - (
			(
				`a`.`discount` * `a`.`subtotal`
			) / 100
		)
	) AS `subtotal_nett`,
	(
		(`a`.`tax` / 100) * (
			`a`.`subtotal` - (
				(
					`a`.`discount` * `a`.`subtotal`
				) / 100
			)
		)
	) AS `PPN`,
	`a`.`total` AS `total`,
	`a`.`notes` AS `notes`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
b.id_curr
FROM
	(
		`trn_sales_head` `a`
		join trn_sales_det b on b.no_sales = a.no_sales
		JOIN `mst_customer` `c` ON (
			(
				`c`.`id_customer` = `a`.`id_customer`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_lap_piutang_lunas
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_piutang_lunas`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_piutang_lunas` AS SELECT
	`a`.`no_sales` AS `no_sales`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `customer`,
	`a`.`sales_amount` AS `sales_amount`,
	`a`.`return_amount` AS `return_amount`,
	(
		`a`.`sales_amount` - `a`.`return_amount`
	) AS `nett_sales`,
	`b`.`no_payment_ar` AS `no_payment_ar`,
	`d`.`date_trn` AS `date_trn`,
	`a`.`disc_amount` AS `disc_amount`,
	`b`.`paid_amount` AS `paid_amount`,
	`d`.`notes` AS `notes`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
d.id_currency
FROM
	(
		(
			(
				`ar_status` `a`
				JOIN `trn_payment_ar_det` `b` ON (
					(
						`b`.`no_invoice` = `a`.`no_sales`
					)
				)
			)
			JOIN `mst_customer` `c` ON (
				(
					`c`.`id_customer` = `a`.`id_customer`
				)
			)
		)
		JOIN `trn_payment_ar_head` `d` ON (
			(
				`d`.`no_payment_ar` = `b`.`no_payment_ar`
			)
		)
	)
WHERE
	(`a`.`balance` = 0) ;

-- ----------------------------
-- View structure for view_lap_ranking_pembperbarang
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_ranking_pembperbarang`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_ranking_pembperbarang` AS select `a`.`no_purchase` AS `no_purchase`,`a`.`id_item` AS `id_item`,`d`.`item_name` AS `item_name`,`b`.`date_trn` AS `date_trn`,sum(`a`.`qty`) AS `qty`,`b`.`id_supplier` AS `id_supplier`,concat(`c`.`first_name`,' ',`c`.`last_name`) AS `supplier_name`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_purchase_det` `a` join `trn_purchase_head` `b` on((`b`.`no_purchase` = `a`.`no_purchase`))) join `mst_supplier` `c` on((`c`.`id_supplier` = `b`.`id_supplier`))) join `mst_item` `d` on((`d`.`id_item` = `a`.`id_item`))) group by `a`.`id_item`,`b`.`id_supplier` order by `b`.`id_supplier`,sum(`a`.`qty`) desc ;

-- ----------------------------
-- View structure for view_lap_ranking_penjperbarang
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_ranking_penjperbarang`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_ranking_penjperbarang` AS select `a`.`no_sales` AS `no_sales`,`a`.`id_item` AS `id_item`,`d`.`item_name` AS `item_name`,`b`.`date_trn` AS `date_trn`,sum(`a`.`qty`) AS `qty`,`b`.`id_customer` AS `id_customer`,concat(`c`.`first_name`,' ',`c`.`last_name`) AS `customer_name`,`a`.`price` AS `price`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_sales_det` `a` join `trn_sales_head` `b` on((`b`.`no_sales` = `a`.`no_sales`))) join `mst_customer` `c` on((`c`.`id_customer` = `b`.`id_customer`))) join `mst_item` `d` on((`d`.`id_item` = `a`.`id_item`))) group by `a`.`id_item` order by sum(`a`.`qty`) desc ;

-- ----------------------------
-- View structure for view_lap_rekappemb_bln_persupp
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_rekappemb_bln_persupp`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_rekappemb_bln_persupp` AS select `a`.`no_purchase` AS `no_purchase`,cast(`a`.`date_trn` as date) AS `date_trn`,`a`.`id_supplier` AS `id_supplier`,concat(`c`.`first_name`,' ',`c`.`last_name`) AS `nama_supplier`,`a`.`subtotal` AS `subtotal`,`a`.`freight` AS `freight`,((`a`.`disc` * (`a`.`subtotal` + `a`.`freight`)) / 100) AS `discount`,((`a`.`subtotal` + `a`.`freight`) - ((`a`.`disc` * (`a`.`subtotal` + `a`.`freight`)) / 100)) AS `subtotal_nett`,((`a`.`tax` / 100) * ((`a`.`subtotal` + `a`.`freight`) - ((`a`.`disc` * `a`.`subtotal`) / 100))) AS `PPN`,`a`.`total` AS `total`,`a`.`notes` AS `notes`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (`trn_purchase_head` `a` join `mst_supplier` `c` on((`c`.`id_supplier` = `a`.`id_supplier`))) ;

-- ----------------------------
-- View structure for view_lap_rekap_kasbank
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_rekap_kasbank`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_rekap_kasbank` AS SELECT
	`a`.`cashbank_no` AS `cashbank_no`,
	cast(`a`.`date_trn` AS date) AS `date_trn`,
	`a`.`id_account` AS `id_account`,
	`c`.`account_name` AS `account_name`,
	`a`.`total` AS `total`,
	`a`.`notes` AS `notes`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
a.id_currency
FROM
	(
		`trn_cashbank_head` `a`
		LEFT JOIN `mst_account` `c` ON (
			(
				`c`.`id_account` = `a`.`id_account`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_lap_rekap_pemb_supplier
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_rekap_pemb_supplier`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_rekap_pemb_supplier` AS select `a`.`no_purchase` AS `no_purchase`,cast(`a`.`date_trn` as date) AS `date_trn`,`a`.`id_supplier` AS `id_supplier`,concat(`c`.`first_name`,' ',`c`.`last_name`) AS `nama_supplier`,`a`.`subtotal` AS `subtotal`,`a`.`freight` AS `freight`,((`a`.`disc` * (`a`.`subtotal` + `a`.`freight`)) / 100) AS `discount`,((`a`.`subtotal` + `a`.`freight`) - ((`a`.`disc` * (`a`.`subtotal` + `a`.`freight`)) / 100)) AS `subtotal_nett`,((`a`.`tax` / 100) * ((`a`.`subtotal` + `a`.`freight`) - ((`a`.`disc` * `a`.`subtotal`) / 100))) AS `PPN`,`a`.`total` AS `total`,`a`.`notes` AS `notes`,`b`.`id_item` AS `id_item`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from ((`trn_purchase_head` `a` join `trn_purchase_det` `b` on((`b`.`no_purchase` = `a`.`no_purchase`))) join `mst_supplier` `c` on((`c`.`id_supplier` = `a`.`id_supplier`))) group by `b`.`id_item` ;

-- ----------------------------
-- View structure for view_lap_rekap_penjper_category
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_rekap_penjper_category`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_rekap_penjper_category` AS SELECT
	`id_category` AS `id_category`,
	sum(`total`) AS `total`
FROM
	hitung_rekap_jual_category
GROUP BY
	`id_category` ;

-- ----------------------------
-- View structure for view_lap_rekap_transjasa
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_rekap_transjasa`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_rekap_transjasa` AS select `a`.`no_service` AS `no_service`,cast(`a`.`date_trn` as date) AS `date_trn`,`a`.`id_customer` AS `id_customer`,(case when isnull(`a`.`cust_name`) then concat(`c`.`first_name`,' ',`c`.`last_name`) else `a`.`cust_name` end) AS `nama_customer`,`a`.`subtotal` AS `subtotal`,((`a`.`discount` * `a`.`subtotal`) / 100) AS `discount`,(`a`.`subtotal` - ((`a`.`discount` * `a`.`subtotal`) / 100)) AS `subtotal_nett`,((`a`.`tax` / 100) * (`a`.`subtotal` - ((`a`.`discount` * `a`.`subtotal`) / 100))) AS `PPN`,`a`.`total` AS `total`,`a`.`notes` AS `notes`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,(case when (`a`.`flag_member` = 0) then 'Non Member' when (`a`.`flag_member` = 1) then 'Member' end) AS `status_member` from (`trn_service_head` `a` left join `mst_customer` `c` on((`c`.`id_customer` = `a`.`id_customer`))) ;

-- ----------------------------
-- View structure for view_lap_rekap_transkasir
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_rekap_transkasir`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_rekap_transkasir` AS SELECT
	`a`.`no_sales` AS `no_sales`,
	cast(`a`.`date_trn` AS date) AS `date_trn`,
	`a`.`id_customer` AS `id_customer`,
	(
		CASE
		WHEN isnull(`a`.`customer`) THEN
			concat(
				`c`.`first_name`,
				' ',
				`c`.`last_name`
			)
		ELSE
			`a`.`customer`
		END
	) AS `nama_customer`,
	`a`.`subtotal` AS `subtotal`,
	(
		(
			`a`.`discount` * `a`.`subtotal`
		) / 100
	) AS `discount`,
	(
		`a`.`subtotal` - (
			(
				`a`.`discount` * `a`.`subtotal`
			) / 100
		)
	) AS `subtotal_nett`,
	(
		(`a`.`tax` / 100) * (
			`a`.`subtotal` - (
				(
					`a`.`discount` * `a`.`subtotal`
				) / 100
			)
		)
	) AS `PPN`,
	`a`.`total` AS `total`,
	`a`.`notes` AS `notes`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
	(
		CASE
		WHEN (`a`.`flag_member` = 0) THEN
			'Non Member'
		WHEN (`a`.`flag_member` = 1) THEN
			'Member'
		END
	) AS `status_member`,
(select id_currency from mst_currency where flag_default = 1) as id_curr
FROM
	(
		`trn_cashier_head` `a`
		LEFT JOIN `mst_customer` `c` ON (
			(
				`c`.`id_customer` = `a`.`id_customer`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_lap_stockopname
-- ----------------------------
DROP VIEW IF EXISTS `view_lap_stockopname`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_lap_stockopname` AS select `a`.`no_opname` AS `no_opname`,`a`.`date_trn` AS `date_trn`,`a`.`id_warehouse` AS `id_warehouse`,`b`.`id_item` AS `id_item`,`v`.`item_name` AS `item_name`,`b`.`id_unit` AS `id_unit`,`b`.`qty_onhand` AS `qty_onhand`,`b`.`qty_opname` AS `qty_opname`,`b`.`notes` AS `notes`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`z`.`warehouse_name` AS `warehouse_name` from (((`i_opname_head` `a` join `i_opname_det` `b` on((`b`.`no_opname` = `a`.`no_opname`))) join `mst_item` `v` on((`v`.`id_item` = `b`.`id_item`))) join `mst_warehouse` `z` on((`z`.`id_warehouse` = `a`.`id_warehouse`))) ;

-- ----------------------------
-- View structure for view_list_item
-- ----------------------------
DROP VIEW IF EXISTS `view_list_item`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_list_item` AS SELECT
	`mst_item`.`id_item` AS `id_item`,
	`mst_item`.`item_name` AS `item_name`,
	`mst_item`.`id_category` AS `id_category`,
	`mst_item`.`id_jenis` AS `id_jenis`,
	`mst_item`.`id_account` AS `id_account`,
	`mst_item`.`main_unit` AS `main_unit`,
	`mst_item`.`buy_unit` AS `buy_unit`,
	`mst_item`.`sell_unit` AS `sell_unit`,
	`mst_item`.`flag_buy` AS `flag_buy`,
	`mst_item`.`flag_sell` AS `flag_sell`,
	`mst_item`.`flag_inv` AS `flag_inv`,
	`mst_item`.`blob_image` AS `blob_image`,
	`mst_item`.`sell_price` AS `sell_price`,
	`mst_item`.`modified_user` AS `modified_user`,
	`mst_item`.`created_date` AS `created_date`,
	`mst_item`.`modified_date` AS `modified_date`,
	`mst_item`.`created_user` AS `created_user`,
	`mst_item`.`id_warehouse` AS `id_warehouse`,
	`mst_item`.`max_qty` AS `max_qty`,
	`mst_item`.`min_qty` AS `min_qty`,
	`mst_item`.`notes` AS `notes`,
	`mst_item`.`length` AS `length`,
	`mst_item`.`width` AS `width`,
	`mst_item`.`height` AS `height`,
	`mst_item`.`weight` AS `weight`,
	(
		CASE
		WHEN isnull(`mst_item`.`id_barcode`) THEN
			''
		ELSE
			`mst_item`.`id_barcode`
		END
	) AS `id_barcode`,
	mst_itembrand.mst_itembrand_nm as brand,
  mst_itemcat.mst_itemcat_nm as category,
	mst_itemjenis.mst_itemjenis_nm as type,
	mst_item.id_brand
FROM
	`mst_item` left join mst_itembrand on mst_itembrand.mst_itembrand_id = mst_item.id_brand
	inner join mst_itemcat on mst_itemcat.mst_itemcat_id = mst_item.id_category
	inner join mst_itemjenis on mst_itemjenis.mst_itemjenis_id = mst_item.id_jenis 
WHERE
	(
		(
			CASE
			WHEN isnull(`mst_item`.`flag_sell`) THEN
				0
			ELSE
				`mst_item`.`flag_sell`
			END
		) = 1
	) ;

-- ----------------------------
-- View structure for view_list_item_ro
-- ----------------------------
DROP VIEW IF EXISTS `view_list_item_ro`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_list_item_ro` AS select `a`.`id_item` AS `id_item`,`b`.`item_name` AS `item_name`,`a`.`no_request_order` AS `no_request_order`,`a`.`approve_qty` AS `approve_qty`,`a`.`id_unit` AS `id_unit`,(case when isnull(`b`.`id_barcode`) then '' else `b`.`id_barcode` end) AS `id_barcode` from (`trn_request_order_det` `a` join `mst_item` `b` on((`b`.`id_item` = `a`.`id_item`))) where (((case when isnull(`a`.`flag_status`) then 0 else `a`.`flag_status` end) = 1) and ((case when isnull(`a`.`flag_po`) then 0 else `a`.`flag_po` end) = 0)) ;

-- ----------------------------
-- View structure for view_list_material
-- ----------------------------
DROP VIEW IF EXISTS `view_list_material`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_list_material` AS select `mst_item`.`id_item` AS `id_item`,`mst_item`.`item_name` AS `item_name`,`mst_item`.`id_category` AS `id_category`,`mst_item`.`id_jenis` AS `id_jenis`,`mst_item`.`id_account` AS `id_account`,`mst_item`.`main_unit` AS `main_unit`,`mst_item`.`buy_unit` AS `buy_unit`,`mst_item`.`sell_unit` AS `sell_unit`,`mst_item`.`flag_buy` AS `flag_buy`,`mst_item`.`flag_sell` AS `flag_sell`,`mst_item`.`flag_inv` AS `flag_inv`,`mst_item`.`blob_image` AS `blob_image`,`mst_item`.`sell_price` AS `sell_price`,`mst_item`.`modified_user` AS `modified_user`,`mst_item`.`created_date` AS `created_date`,`mst_item`.`modified_date` AS `modified_date`,`mst_item`.`created_user` AS `created_user`,`mst_item`.`id_warehouse` AS `id_warehouse`,`mst_item`.`max_qty` AS `max_qty`,`mst_item`.`min_qty` AS `min_qty`,`mst_item`.`notes` AS `notes`,`mst_item`.`length` AS `length`,`mst_item`.`width` AS `width`,`mst_item`.`height` AS `height`,`mst_item`.`weight` AS `weight`,(case when isnull(`mst_item`.`id_barcode`) then '' else `mst_item`.`id_barcode` end) AS `id_barcode` from `mst_item` where (((case when isnull(`mst_item`.`flag_buy`) then 0 else `mst_item`.`flag_buy` end) = 1) or ((case when isnull(`mst_item`.`flag_inv`) then 0 else `mst_item`.`flag_inv` end) = 1)) ;

-- ----------------------------
-- View structure for view_list_po
-- ----------------------------
DROP VIEW IF EXISTS `view_list_po`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_list_po` AS select `h`.`no_purchase_order` AS `no_purchase_order`,concat(`s`.`first_name`,' ',`s`.`last_name`) AS `nm_supplier`,`h`.`date_trn` AS `date_trn`,`h`.`subtotal` AS `subtotal`,`h`.`freight` AS `freight`,`h`.`tax` AS `tax`,`h`.`total` AS `total`,`h`.`notes` AS `notes` from ((`trn_purchase_order_head` `h` join `trn_purchase_order_det` `d` on((`h`.`no_purchase_order` = `d`.`no_purchase_order`))) join `mst_supplier` `s` on((`h`.`id_supplier` = `s`.`id_supplier`))) ;

-- ----------------------------
-- View structure for view_main_unit_item
-- ----------------------------
DROP VIEW IF EXISTS `view_main_unit_item`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_main_unit_item` AS select `mst_item`.`id_item` AS `id_item`,`mst_item`.`main_unit` AS `main_unit`,`mst_item`.`flag_buy` AS `flag_buy`,`mst_item`.`flag_inv` AS `flag_inv`,`mst_item`.`flag_sell` AS `flag_sell` from `mst_item` ;

-- ----------------------------
-- View structure for view_marketing
-- ----------------------------
DROP VIEW IF EXISTS `view_marketing`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost`  VIEW `view_marketing` AS select a.id_employee,concat(b.first_name,' ', b.last_name) as nama from mst_marketing a inner join mst_employee b on b.id_employee = a.id_employee ;

-- ----------------------------
-- View structure for view_marketing_combo
-- ----------------------------
DROP VIEW IF EXISTS `view_marketing_combo`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_marketing_combo` AS SELECT
	a.id_employee,
	concat(
		b.first_name,
		' ',
		b.last_name
	) AS nama
FROM
	mst_marketing a
INNER JOIN mst_employee b ON b.id_employee = a.id_employee

union ALL
select 'OFC','Office' ;

-- ----------------------------
-- View structure for view_path_userphoto
-- ----------------------------
DROP VIEW IF EXISTS `view_path_userphoto`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_path_userphoto` AS select b.username,a.id_employee,
case when a.photo is null then '' else a.photo end as photo 
from mst_employee a inner join mst_user b on b.id_employee=a.id_employee ;

-- ----------------------------
-- View structure for view_piutang_jt
-- ----------------------------
DROP VIEW IF EXISTS `view_piutang_jt`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_piutang_jt` AS SELECT DISTINCT
	`a`.`no_sales` AS `no_sales`,
	`a`.`id_customer` AS `id_customer`,
	concat(
		`c`.`first_name`,
		' ',
		`c`.`last_name`
	) AS `customer`,
	`a`.`date_trn` AS `date_trn`,
	(
		(
			(
				CASE
				WHEN isnull(`a`.`sales_amount`) THEN
					0
				ELSE
					`a`.`sales_amount`
				END
			) - (
				CASE
				WHEN isnull(`a`.`return_amount`) THEN
					0
				ELSE
					`a`.`return_amount`
				END
			)
		) - (
			CASE
			WHEN isnull(`a`.`disc_amount`) THEN
				0
			ELSE
				`a`.`disc_amount`
			END
		)
	) AS `total_ar`,
	(
		CASE
		WHEN isnull(`a`.`paid_amount`) THEN
			0
		ELSE
			`a`.`paid_amount`
		END
	) AS `paid_amount`,
	(
		CASE
		WHEN isnull(`a`.`balance`) THEN
			0
		ELSE
			`a`.`balance`
		END
	) AS `balance`,
	`b`.`termpaydisc` AS `termpaydisc`,
	cast(
		(
			`a`.`date_trn` + INTERVAL `b`.`termpaydisc` DAY
		) AS date
	) AS `jatuh_tempo`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
g.id_curr
FROM
	(
		(
			`ar_status` `a`
			JOIN `trn_sales_head` `b` ON (
				(
					`b`.`no_sales` = `a`.`no_sales`
				)
			)
		join trn_sales_det g on g.no_sales = b.no_sales
		)
		JOIN `mst_customer` `c` ON (
			(
				`c`.`id_customer` = `b`.`id_customer`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_po_detail
-- ----------------------------
DROP VIEW IF EXISTS `view_po_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_po_detail` AS select `a`.`id_supplier` AS `id_supplier`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `nama`,`b`.`address` AS `address`,`a`.`no_purchase_order` AS `no_purchase_order`,`a`.`date_trn` AS `date_trn`,`c`.`id_curr` AS `id_curr`,`a`.`notes` AS `notes`,`a`.`subtotal` AS `subtotal`,`a`.`tax` AS `tax`,`a`.`total` AS `total_head`,`c`.`number_asc` AS `number_asc`,`c`.`id_item` AS `id_item`,`c`.`id_unit` AS `id_unit`,`f`.`item_name` AS `item_name`,`c`.`notes` AS `description`,`c`.`qty` AS `qty`,`c`.`price` AS `price`,(`c`.`qty` * `c`.`price`) AS `total`,`a`.`freight` AS `freight` from (((`trn_purchase_order_head` `a` join `mst_supplier` `b` on((`b`.`id_supplier` = `a`.`id_supplier`))) join `trn_purchase_order_det` `c` on((`c`.`no_purchase_order` = `a`.`no_purchase_order`))) join `mst_item` `f` on((`f`.`id_item` = `c`.`id_item`))) order by `c`.`number_asc` ;

-- ----------------------------
-- View structure for view_po_report
-- ----------------------------
DROP VIEW IF EXISTS `view_po_report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_po_report` AS SELECT
	`a`.`no_purchase_order` AS `no_purchase_order`,
	concat(
		`b`.`first_name`,
		' ',
		`b`.`last_name`
	) AS `nama`,
	`a`.`date_trn` AS `date_trn`,
	`a`.`freight` AS `freight`,
	(
		(`a`.`tax` / 100) * (
			`a`.`subtotal` + `a`.`freight`
		)
	) AS `tax`,
	`a`.`notes` AS `notes`,
	`a`.`id_supplier` AS `id_supplier`,
	`c`.`id_item` AS `id_item`,
	`d`.`item_name` AS `item_name`,
	`c`.`qty` AS `qty`,
	`c`.`qty_received` AS `qty_received`,
	`c`.`id_unit` AS `id_unit`,
	`c`.`price` AS `price`,
	`c`.`nominal` AS `nominal`,
	`c`.`no_request_order` AS `no_request_order`,
	`c`.`notes` AS `notes_det`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`,
c.id_curr
FROM
	(
		(
			(
				`trn_purchase_order_head` `a`
				JOIN `trn_purchase_order_det` `c` ON (
					(
						`c`.`no_purchase_order` = `a`.`no_purchase_order`
					)
				)
			)
			JOIN `mst_supplier` `b` ON (
				(
					`b`.`id_supplier` = `a`.`id_supplier`
				)
			)
		)
		JOIN `mst_item` `d` ON (
			(
				`d`.`id_item` = `c`.`id_item`
			)
		)
	) ;

-- ----------------------------
-- View structure for view_recitem_report
-- ----------------------------
DROP VIEW IF EXISTS `view_recitem_report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_recitem_report` AS select `a`.`no_received_order` AS `no_received_order`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `nama`,`a`.`date_trn` AS `date_trn`,`a`.`notes` AS `notes`,`a`.`id_supplier` AS `id_supplier`,`a`.`no_purchase_order` AS `no_purchase_order`,`c`.`id_item` AS `id_item`,`d`.`item_name` AS `item_name`,`c`.`qty` AS `qty`,`c`.`received_qty` AS `received_qty`,`c`.`id_unit` AS `id_unit`,`d`.`notes` AS `notes_det`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_received_order_head` `a` join `trn_received_order_det` `c` on((`c`.`no_received_order` = `a`.`no_received_order`))) join `mst_supplier` `b` on((`b`.`id_supplier` = `a`.`id_supplier`))) join `mst_item` `d` on((`d`.`id_item` = `c`.`id_item`))) ;

-- ----------------------------
-- View structure for view_rekonsiliasi_report
-- ----------------------------
DROP VIEW IF EXISTS `view_rekonsiliasi_report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_rekonsiliasi_report` AS select `a`.`no_reconcile` AS `no_reconcile`,`b`.`account_name` AS `nama`,`a`.`date_trn` AS `date_trn`,`a`.`notes` AS `notes`,`a`.`id_account_bank` AS `id_account_bank`,`c`.`id_account` AS `id_account_det`,`d`.`account_name` AS `account_name`,`c`.`amount_in` AS `amount_in`,`c`.`amount_out` AS `amount_out`,`c`.`notes` AS `notes_det`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name`,`a`.`balance_before` AS `balance_before`,`a`.`balance_after` AS `balance_after`,`a`.`reconcile` AS `reconcile` from (((`trn_reconcile_head` `a` join `trn_reconcile_det` `c` on((`c`.`no_reconcile` = `a`.`no_reconcile`))) join `mst_account` `b` on((`b`.`id_account` = `a`.`id_account_bank`))) join `mst_account` `d` on((`d`.`id_account` = `c`.`id_account`))) ;

-- ----------------------------
-- View structure for view_ro_report
-- ----------------------------
DROP VIEW IF EXISTS `view_ro_report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_ro_report` AS select `a`.`no_request_order` AS `no_request_order`,`a`.`date_trn` AS `date_trn`,`a`.`notes` AS `notes`,`f`.`id_item` AS `id_item`,`c`.`item_name` AS `item_name`,`f`.`qty` AS `qty`,`f`.`approve_qty` AS `approve_qty`,`f`.`approve_date` AS `approve_date`,`f`.`id_unit` AS `id_unit`,`a`.`id_warehouse` AS `id_warehouse`,`j`.`warehouse_name` AS `warehouse_name`,(case when ((sum((case when isnull(`f`.`approve_qty`) then 0 else `f`.`approve_qty` end)) < sum((case when isnull(`f`.`qty`) then 0 else `f`.`qty` end))) and (sum((case when isnull(`f`.`approve_qty`) then 0 else `f`.`approve_qty` end)) > 0)) then 'Approve Sebagian' when (sum((case when isnull(`f`.`approve_qty`) then 0 else `f`.`approve_qty` end)) = 0) then 'Belum di Approve' when (sum((case when isnull(`f`.`approve_qty`) then 0 else `f`.`approve_qty` end)) = sum((case when isnull(`f`.`qty`) then 0 else `f`.`qty` end))) then 'Sudah di Approve' end) AS `notes_approve`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_request_order_head` `a` join `trn_request_order_det` `f` on((`f`.`no_request_order` = `a`.`no_request_order`))) join `mst_item` `c` on((`c`.`id_item` = `f`.`id_item`))) join `mst_warehouse` `j` on((`j`.`id_warehouse` = `a`.`id_warehouse`))) group by `a`.`no_request_order`,`f`.`id_item`,`c`.`item_name` ;

-- ----------------------------
-- View structure for view_sales_nowadays
-- ----------------------------
DROP VIEW IF EXISTS `view_sales_nowadays`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_sales_nowadays` AS select cast(`a`.`date_trn` as date) AS `date_trn`,`a`.`no_sales` AS `no_sales`,`a`.`no_sales_order` AS `no_sales_order`,concat(`d`.`first_name`,' ',`d`.`last_name`) AS `customer`,`a`.`total` AS `total`,`c`.`id_curr` AS `id_curr` from ((`trn_sales_head` `a` join `trn_sales_det` `c` on((`c`.`no_sales` = `a`.`no_sales`))) join `mst_customer` `d` on((`d`.`id_customer` = `a`.`id_customer`))) group by `a`.`no_sales` ;

-- ----------------------------
-- View structure for view_sentitem_report
-- ----------------------------
DROP VIEW IF EXISTS `view_sentitem_report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_sentitem_report` AS select `a`.`no_delivery_order` AS `no_delivery_order`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `nama`,`a`.`date_trn` AS `date_trn`,`a`.`notes` AS `notes`,`a`.`id_customer` AS `id_customer`,`a`.`no_sales_order` AS `no_sales_order`,`c`.`id_item` AS `id_item`,`d`.`item_name` AS `item_name`,`c`.`qty` AS `qty`,`c`.`sent_qty` AS `sent_qty`,`c`.`id_unit` AS `id_unit`,`d`.`notes` AS `notes_det`,(select `mst_company`.`company_name` from `mst_company` where (`mst_company`.`flag_active` = 1)) AS `company_name` from (((`trn_delivery_order_head` `a` join `trn_delivery_order_det` `c` on((`c`.`no_delivery_order` = `a`.`no_delivery_order`))) join `mst_customer` `b` on((`b`.`id_customer` = `a`.`id_customer`))) join `mst_item` `d` on((`d`.`id_item` = `c`.`id_item`))) ;

-- ----------------------------
-- View structure for view_so_detail
-- ----------------------------
DROP VIEW IF EXISTS `view_so_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_so_detail` AS SELECT
	`a`.`id_customer` AS `id_customer`,
	concat(
		`b`.`first_name`,
		' ',
		`b`.`last_name`
	) AS `nama`,
	`b`.`address` AS `address`,
	`a`.`no_sales_order` AS `no_sales_order`,
	`a`.`date_trn` AS `date_trn`,
	`c`.`id_curr` AS `id_curr`,
	`a`.`notes` AS `notes`,
	`a`.`subtotal` AS `subtotal`,
	`a`.`tax` AS `tax`,
	`a`.`total` AS `total_head`,
	`c`.`number_asc` AS `number_asc`,
	`c`.`id_item` AS `id_item`,
	`c`.`id_unit` AS `id_unit`,
	`f`.`item_name` AS `item_name`,
	`c`.`notes` AS `description`,
	`c`.`qty` AS `qty`,
	(
		CASE
		WHEN isnull(`c`.`sent_qty`) THEN
			0
		ELSE
			`c`.`sent_qty`
		END
	) AS `sent_qty`,
	`c`.`price`- (case when x.nom_disc is null then 0 else x.nom_disc end/c.qty) - 
	 (case when y.nom_disc is null then 0 else y.nom_disc end/c.qty) -
   (case when z.nom_disc is null then 0 else z.nom_disc end/c.qty) AS `price`,
	(`c`.`price`- (case when x.nom_disc is null then 0 else x.nom_disc end/c.qty) - 
	 (case when y.nom_disc is null then 0 else y.nom_disc end/c.qty) -
   (case when z.nom_disc is null then 0 else z.nom_disc end/c.qty)) * c.qty AS `total`,
	(
		CASE
		WHEN isnull(`a`.`kurs`) THEN
			1
		ELSE
			`a`.`kurs`
		END
	) AS `kurs`,
a.discount, a.nett_total
FROM
	(
		(
			(
				`trn_sales_order_head` `a`
				JOIN `mst_customer` `b` ON (
					(
						`b`.`id_customer` = `a`.`id_customer`
					)
				)
			)
			JOIN `trn_sales_order_det` `c` ON (
				(
					`c`.`no_sales_order` = `a`.`no_sales_order`
				)
			)
		)
		JOIN `mst_item` `f` ON (
			(
				`f`.`id_item` = `c`.`id_item`
			)
		)
join trn_so_discbrand_det x on x.no_sales_order = c.no_sales_order and x.id_item = c.id_item
join trn_so_disccat_det y on y.no_sales_order = c.no_sales_order and y.id_item = c.id_item
join trn_so_disctype_det z on z.no_sales_order = c.no_sales_order and z.id_item = c.id_item
	) ;

-- ----------------------------
-- View structure for view_so_nowadays
-- ----------------------------
DROP VIEW IF EXISTS `view_so_nowadays`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_so_nowadays` AS select `d`.`date_trn` AS `date_trn`,`a`.`no_sales_order` AS `no_sales_order`,`a`.`id_item` AS `id_item`,`b`.`item_name` AS `item_name`,`a`.`qty` AS `qty`,`a`.`id_unit` AS `id_unit`,`a`.`price` AS `price`,`a`.`nominal` AS `nominal`,`a`.`id_curr` AS `id_curr` from ((`trn_sales_order_det` `a` join `mst_item` `b` on((`b`.`id_item` = `a`.`id_item`))) join `trn_sales_order_head` `d` on((`d`.`no_sales_order` = `a`.`no_sales_order`))) ;

-- ----------------------------
-- View structure for view_so_report
-- ----------------------------
DROP VIEW IF EXISTS `view_so_report`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_so_report` AS SELECT
	`a`.`no_sales_order` AS `no_sales_order`,
	concat(
		`b`.`first_name`,
		' ',
		`b`.`last_name`
	) AS `nama`,
	`a`.`date_trn` AS `date_trn`,
	(
		(`a`.`tax` / 100) * `a`.`subtotal`
	) AS `tax`,
	`a`.`notes` AS `notes`,
	`a`.`id_customer` AS `id_customer`,
	`c`.`id_item` AS `id_item`,
	`d`.`item_name` AS `item_name`,
	`c`.`qty` AS `qty`,
	`c`.`sent_qty` AS `sent_qty`,
	`c`.`id_unit` AS `id_unit`,
	`c`.`price` AS `price`,
	`c`.`nominal` AS `nominal`,
	`c`.`notes` AS `notes_det`,
	(
		SELECT
			`mst_company`.`company_name`
		FROM
			`mst_company`
		WHERE
			(
				`mst_company`.`flag_active` = 1
			)
	) AS `company_name`, concat(em.first_name,' ',em.last_name) as marketing
FROM
	(
		(
			(
				`trn_sales_order_head` `a`
				JOIN `trn_sales_order_det` `c` ON (
					(
						`c`.`no_sales_order` = `a`.`no_sales_order`
					)
				)
			)
			JOIN `mst_customer` `b` ON (
				(
					`b`.`id_customer` = `a`.`id_customer`
				)
			)
		)
		JOIN `mst_item` `d` ON (
			(
				`d`.`id_item` = `c`.`id_item`
			)
		)
join mst_employee em on em.id_employee = a.id_employee
	) ;

-- ----------------------------
-- View structure for view_total_purchase_return
-- ----------------------------
DROP VIEW IF EXISTS `view_total_purchase_return`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_total_purchase_return` AS select sum(`g`.`qty`) AS `qty`,`g`.`no_purchase_return` AS `no_purchase_return`,`g`.`id_item` AS `id_item`,`g`.`no_purchase` AS `no_purchase` from `trn_purchase_return_det` `g` group by `g`.`no_purchase_return`,`g`.`id_item`,`g`.`no_purchase` ;

-- ----------------------------
-- View structure for view_user
-- ----------------------------
DROP VIEW IF EXISTS `view_user`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `view_user` AS select `a`.`username` AS `username`,concat(`b`.`first_name`,' ',`b`.`last_name`) AS `nama`,`c`.`position_name` AS `position`,`d`.`department_name` AS `departement` from (((`mst_user` `a` join `mst_employee` `b` on((`b`.`id_employee` = `a`.`id_employee`))) join `mst_position` `c` on((`c`.`position_id` = `b`.`position_id`))) join `mst_department` `d` on((`d`.`department_id` = `b`.`department_id`))) ;

-- ----------------------------
-- Procedure structure for cash_bank_register
-- ----------------------------
DROP PROCEDURE IF EXISTS `cash_bank_register`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `cash_bank_register`(in var_criteria text, in tgl_awal date, in tgl_akhir date)
BEGIN

declare filter text;
declare sawalD double;
declare sawalK double;
declare def varchar(3);

	
	select case when b.def_position ='D' then sum(a.nominal) else 0 end into sawalD
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tgl_awal and a.id_account = var_criteria;

	select case when b.def_position ='K' then -1*sum(a.nominal) else 0 end into sawalK
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tgl_awal and a.id_account = var_criteria;

	IF sawalD IS NULL THEN 
		 SET sawalD=0;
	END IF;


	IF sawalK IS NULL THEN 
		 SET sawalK=0;
	END IF;


	select def_position into def from mst_account where id_account = var_criteria;

select * from (
		select 'Saldo Awal' as no_ledger,tgl_awal as date_trn,'' as id_account,'' as account_name,'' as notes,sawalD AS DEBET,sawalK AS KREDIT
		union ALL
		select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
		case when a.nominal >= 0 then a.nominal else 0 end as debet,
		case when a.nominal < 0 then -1*a.nominal else 0 end as credit
		from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head c on c.no_ledger=a.no_ledger
		WHERE (c.date_trn between tgl_awal and tgl_akhir) and a.id_account = var_criteria
	) x order by x.date_trn asc;

	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for general_ledger
-- ----------------------------
DROP PROCEDURE IF EXISTS `general_ledger`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `general_ledger`(in var_criteria text, in tgl_awal date, in tgl_akhir date, in date_filter integer)
BEGIN

declare filter text;
declare sawalD double;
declare sawalK double;
declare def varchar(3);
declare tglsawal date;
declare saldo_awal double;

		select cast(date_trn as date) into tglsawal from trn_ledger_head order by date_trn asc limit 1;
if date_filter = 1 then
	if tglsawal < tgl_awal then
		set tglsawal = tgl_awal;
	end if;
end if;

if date_filter = 1 then
	
	select case when b.def_position ='D' then sum(a.nominal) else 0 end into sawalD
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tgl_awal and a.id_account = var_criteria;

	select case when b.def_position ='K' then -1*sum(a.nominal) else 0 end into sawalK
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tgl_awal and a.id_account = var_criteria;
elseif date_filter = 0 THEN
	
	select case when b.def_position ='D' then sum(a.nominal) else 0 end into sawalD
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tglsawal and a.id_account = var_criteria;

	select case when b.def_position ='K' then -1*sum(a.nominal) else 0 end into sawalK
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tglsawal and a.id_account = var_criteria;
end if;

	select def_position into def from mst_account where id_account = var_criteria;

	IF sawalD IS NULL THEN 
		 SET sawalD=0;
	END IF;


	IF sawalK IS NULL THEN 
		 SET sawalK=0;
	END IF;

	
	select beg_balance into saldo_awal from mst_account where id_account = var_criteria and flag_header=0;
	if def = 'D' THEN
		set sawalD = sawalD + saldo_awal;
	elseif def = 'K' THEN
		set sawalK = sawalK +saldo_awal; 
	end if;

	IF sawalD IS NULL THEN 
		 SET sawalD=0;
	END IF;


	IF sawalK IS NULL THEN 
		 SET sawalK=0;
	END IF;

	if date_filter = 1 then
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,'' as id_account,'' as account_name,'' as notes,sawalD AS DEBET,sawalK AS KREDIT
		union ALL
		select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
		case when a.nominal >= 0 then a.nominal else 0 end as debet,
		case when a.nominal < 0 then -1*a.nominal else 0 end as credit
		from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head c on c.no_ledger=a.no_ledger
		WHERE (c.date_trn between tgl_awal and tgl_akhir) and a.id_account = var_criteria
	) x order by x.date_trn asc;
	elseif date_filter = 0 THEN
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,'' as id_account,'' as account_name,'' as notes,sawalD AS DEBET,sawalK AS KREDIT
		union ALL
		select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
		case when a.nominal >= 0 then a.nominal else 0 end as debet,
		case when a.nominal < 0 then -1*a.nominal else 0 end as credit
		from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head c on c.no_ledger=a.no_ledger
		WHERE a.id_account = var_criteria
	) x order by x.date_trn asc;
	end if;

	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for get_income
-- ----------------------------
DROP PROCEDURE IF EXISTS `get_income`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_income`(in var_i integer)
BEGIN
declare tRev double;
declare tExp double;
declare tInc double;


	select case when sum(saldo) is null then 0 else sum(saldo) end into tRev from temp_income
	where left(id_account,1)='4';

	select case when sum(saldo) is null then 0 else sum(saldo) end into tExp from temp_income
	where left(id_account,1) in ('5','6');

	set tInc = tRev - tExp;
	select tInc;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_account
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_account`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_account`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN

	select * from mst_account where id_account = var_criteria;

else
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Account No' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where id_account like filter;
		elseif var_field = 'Account Name' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where account_name like filter;
		end if;
	elseif var_date_filter = 1 THEN
		IF VAR_FIELD = 'Account No' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where id_account like filter
			and (created_date between startdate and enddate);
		elseif var_field = 'Account Name' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where account_name like filter
			and (created_date between startdate and enddate);
		end if;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_adjust_stock
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_adjust_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_adjust_stock`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select 
		a.no_adjust_stock,
		a.id_warehouse,
		a.date_trn,a.total_adjust,c.id_item,d.item_name,positive,negative,c.notes as description,
		case when a.notes is null then '' else a.notes end notes ,c.id_unit 
	from trn_adjust_stock_head a
	inner join mst_warehouse b on b.id_warehouse = a.id_warehouse
	inner join trn_adjust_stock_det c on c.no_adjust_stock = a.no_adjust_stock
	inner join mst_item d on d.id_item = c.id_item
	where a.no_adjust_stock = var_criteria;
else
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Adjustment No' THEN
			select 
			a.no_adjust_stock,
			b.warehouse_name,
			a.date_trn,a.total_adjust,
			case when a.notes is null then '' else a.notes end notes  
			from trn_adjust_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse
			where a.no_adjust_stock like filter;	
		elseif var_field = 'Warehouse' THEN
			select 
			a.no_adjust_stock,
			b.warehouse_name,
			a.date_trn,a.total_adjust,
			case when a.notes is null then '' else a.notes end notes 
			from trn_adjust_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse
			where b.warehouse_name like filter;
		end if;
	elseif var_date_filter = 1 THEN
		IF VAR_FIELD = 'Adjustment No' THEN
			select 
			a.no_adjust_stock,
			b.warehouse_name,
			a.date_trn,a.total_adjust,
			case when a.notes is null then '' else a.notes end notes  
			from trn_adjust_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse
			where a.no_adjust_stock like filter
			and (a.date_trn between startdate and enddate);
		elseif var_field = 'Warehouse' THEN
			select 
			a.no_adjust_stock,
			b.warehouse_name,
			a.date_trn,a.total_adjust,
			case when a.notes is null then '' else a.notes end notes 
			from trn_adjust_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse
			where b.warehouse_name like filter	
			and (a.date_trn between startdate and enddate);
		end if;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_APpayment
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_APpayment`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_APpayment`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN
	declare filter text;
	declare var_total_net double;
	declare var_total_ap double;
	declare var_total_return double;
	declare var_total_disc double;
	
	
	select concat('%',var_criteria,'%') into filter;
	IF detail = 1 THEN
		SELECT
		aph.no_payment_ap, CONCAT(ms.first_name, ms.last_name) AS supplier_name,
		aph.date_trn, aph.notes, aph.total as total, ma.account_name, aph.id_supplier,
		aph.id_account, CONCAT(ms.address,' ',ms.city) AS supplier_addr, 
		SUM(apd.paid_amount) as total_paid, apd.ap_return
		FROM
		trn_payment_ap_head aph INNER JOIN trn_payment_ap_det apd
		ON aph.no_payment_ap = apd.no_payment_ap
		INNER JOIN mst_supplier ms ON ms.id_supplier = aph.id_supplier
		INNER JOIN mst_account ma ON ma.id_account = aph.id_account
		GROUP BY aph.no_payment_ap;
	ELSE
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Detail' THEN
			SELECT
			aph.no_payment_ap, CONCAT(ms.first_name, ms.last_name) AS supplier_name,
			aph.date_trn, aph.notes, 0 as total, ma.account_name, aph.id_supplier,
			aph.id_account,
			apd.number_asc, apd.no_purchase, apd.invoice_date, apd.ap_amount,
			apd.discount, SUM(apd.ap_amount_net) as ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS supplier_addr, apd.ap_return, aph.id_currency, 
			case when apd.kurs is null then 1 else apd.kurs end as kurs, 
			aph.flag_kurs_pu
			FROM
			trn_payment_ap_head aph INNER JOIN trn_payment_ap_det apd
			ON aph.no_payment_ap = apd.no_payment_ap
			INNER JOIN mst_supplier ms ON ms.id_supplier = aph.id_supplier
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ap = var_criteria 
			GROUP BY apd.no_purchase;
		ELSEIF VAR_FIELD = 'Payment No' THEN
			SELECT
			aph.no_payment_ap, CONCAT(ms.first_name, ms.last_name) AS supplier_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_supplier,
			aph.id_account,
			apd.number_asc, apd.no_purchase, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS supplier_addr, apd.ap_return
			FROM
			trn_payment_ap_head aph INNER JOIN trn_payment_ap_det apd
			ON aph.no_payment_ap = apd.no_payment_ap
			INNER JOIN mst_supplier ms ON ms.id_supplier = aph.id_supplier
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ap like filter ;
		ELSEIF VAR_FIELD = 'Supplier' THEN
			SELECT
			aph.no_payment_ap, CONCAT(ms.first_name, ms.last_name) AS supplier_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_supplier,
			aph.id_account,
			apd.number_asc, apd.no_purchase, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS supplier_addr, apd.ap_return
			FROM
			trn_payment_ap_head aph INNER JOIN trn_payment_ap_det apd
			ON aph.no_payment_ap = apd.no_payment_ap
			INNER JOIN mst_supplier ms ON ms.id_supplier = aph.id_supplier
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE CONCAT(ms.first_name, ms.last_name) like filter;
		END IF;
	ELSEIF var_date_filter = 1 THEN
		IF VAR_FIELD = 'Payment No' THEN
			SELECT
			aph.no_payment_ap, CONCAT(ms.first_name, ms.last_name) AS supplier_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_supplier,
			aph.id_account,
			apd.number_asc, apd.no_purchase, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS supplier_addr, apd.ap_return
			FROM
			trn_payment_ap_head aph INNER JOIN trn_payment_ap_det apd
			ON aph.no_payment_ap = apd.no_payment_ap
			INNER JOIN mst_supplier ms ON ms.id_supplier = aph.id_supplier
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ap like filter
			and (aph.date_trn between startdate and enddate);
		ELSEIF VAR_FIELD = 'Supplier' THEN
			SELECT
			aph.no_payment_ap, CONCAT(ms.first_name, ms.last_name) AS supplier_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_supplier,
			aph.id_account,
			apd.number_asc, apd.no_purchase, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS supplier_addr, apd.ap_return
			FROM
			trn_payment_ap_head aph INNER JOIN trn_payment_ap_det apd
			ON aph.no_payment_ap = apd.no_payment_ap
			INNER JOIN mst_supplier ms ON ms.id_supplier = aph.id_supplier
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE CONCAT(ms.first_name, ms.last_name) like filter
			and (aph.date_trn between startdate and enddate);
		END IF;
	END IF;
	END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_approve_ro
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_approve_ro`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_approve_ro`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
declare total_approve integer;
declare total_item integer;
declare notes_approve text;

select concat('%',var_criteria,'%') into filter;

select count(id_item) into total_approve from trn_request_order_det where flag_status = 1 and no_request_order = var_criteria;
select count(id_item) into total_item from trn_request_order_det where no_request_order = var_criteria;

if total_approve > 0 and total_approve < total_item THEN
	set notes_approve = 'Approve Sebagian';
elseif total_approve > 0 and total_approve = total_item THEN
	set notes_approve = 'Approve Seluruhnya';
elseif total_approve = 0 THEN
	set notes_approve = 'Belum di Approve';
end if;

if detail = 1 THEN

select a.id_supplier,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_request_order, a.date_trn,a.notes,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty,notes_approve 
 from trn_request_order_head a
inner join mst_supplier b on b.id_supplier = a.id_supplier
inner join trn_request_order_det c on c.no_request_order=a.no_request_order
inner join mst_item f on f.id_item = c.id_item
where a.no_request_order = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'Requisition No' THEN
		select a.no_request_order, a.date_trn, a.notes, c.id_item, d.item_name,
		case when c.qty is null then 0 else c.qty end - case when c.approve_qty is null then 0 else c.approve_qty end as qty, c.id_unit
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where a.no_request_order like filter and (c.flag_status = 0 or (c.flag_status = 1 and case when c.approve_qty is null then 0 else c.approve_qty end < case when c.qty is null then 0 else c.qty end)) ;
	elseif VAR_FIELD = 'Item ID' THEN
		select a.no_request_order, a.date_trn, a.notes, c.id_item, d.item_name,
		case when c.qty is null then 0 else c.qty end - case when c.approve_qty is null then 0 else c.approve_qty end as qty, c.id_unit
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where c.id_item like filter and (c.flag_status = 0 or (c.flag_status = 1 and case when c.approve_qty is null then 0 else c.approve_qty end < case when c.qty is null then 0 else c.qty end)) ;
	elseif VAR_FIELD = 'Item Name' THEN
		select a.no_request_order, a.date_trn, a.notes, c.id_item, d.item_name,
		case when c.qty is null then 0 else c.qty end - case when c.approve_qty is null then 0 else c.approve_qty end as qty, c.id_unit
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where d.item_name like filter and (c.flag_status = 0 or (c.flag_status = 1 and case when c.approve_qty is null then 0 else c.approve_qty end < case when c.qty is null then 0 else c.qty end)) ;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'Requisition No' THEN
		select a.no_request_order, a.date_trn, a.notes, c.id_item, d.item_name,
		case when c.qty is null then 0 else c.qty end - case when c.approve_qty is null then 0 else c.approve_qty end as qty, c.id_unit
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where a.no_request_order like filter and (c.flag_status = 0 or (c.flag_status = 1 and case when c.approve_qty is null then 0 else c.approve_qty end < case when c.qty is null then 0 else c.qty end))
		and (a.date_trn between startdate and enddate);
	elseif VAR_FIELD = 'Item ID' THEN
		select a.no_request_order, a.date_trn,a.notes, c.id_item,d.item_name,
		case when c.qty is null then 0 else c.qty end - case when c.approve_qty is null then 0 else c.approve_qty end as qty, c.id_unit
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where c.id_item like filter and (c.flag_status = 0 or (c.flag_status = 1 and case when c.approve_qty is null then 0 else c.approve_qty end < case when c.qty is null then 0 else c.qty end))
		and (a.date_trn between startdate and enddate);
	elseif VAR_FIELD = 'Item Name' THEN
		select a.no_request_order, a.date_trn,a.notes, c.id_item,d.item_name,
		case when c.qty is null then 0 else c.qty end - case when c.approve_qty is null then 0 else c.approve_qty end as qty, c.id_unit
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where d.item_name like filter and (c.flag_status = 0 or (c.flag_status = 1 and case when c.approve_qty is null then 0 else c.approve_qty end < case when c.qty is null then 0 else c.qty end))
		and (a.date_trn between startdate and enddate);
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_ap_initbalance
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_ap_initbalance`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_ap_initbalance`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.cutoff_date,
		a.invoice_no,
		a.id_supplier,
		concat(b.first_name,' ',b.last_name) as supplier_name,
		a.amount_of,
		a.notes
  from mst_ap_initialbalance a
	inner join mst_supplier b on b.id_supplier = a.id_supplier
	where invoice_no = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'Invoice No' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_supplier,
		concat(b.first_name,' ',b.last_name) as supplier_name,
		a.amount_of,
		a.notes
		from mst_ap_initialbalance a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where a.invoice_no like filter;
	elseif var_field = 'Supplier' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_supplier,
		concat(b.first_name,' ',b.last_name) as supplier_name,
		a.amount_of,
		a.notes
		from mst_ap_initialbalance a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where concat(b.first_name,' ',b.last_name) like filter;
	end if;
ELSEif var_date_filter = 1 THEN
IF VAR_FIELD = 'Invoice No' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_supplier,
		concat(b.first_name,' ',b.last_name) as supplier_name,
		a.amount_of,
		a.notes
		from mst_ap_initialbalance a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where a.invoice_no like filter
		and (a.created_date between startdate and enddate);
	elseif var_field = 'Supplier' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_supplier,
		concat(b.first_name,' ',b.last_name) as supplier_name,
		a.amount_of,
		a.notes
		from mst_ap_initialbalance a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where concat(b.first_name,' ',b.last_name) like filter
		and (a.created_date between startdate and enddate);
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_ARpayment
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_ARpayment`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_ARpayment`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN
	declare filter text;
	declare var_total_net double;
	declare var_total_ap double;
	declare var_total_return double;
	declare var_total_disc double;
	

	select concat('%',var_criteria,'%') into filter;
	IF detail = 1 THEN
		SELECT
		aph.no_payment_ar, CONCAT(ms.first_name,' ',ms.last_name) AS customer_name,
		aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_customer,
		aph.id_account, CONCAT(ms.address,' ',ms.city) AS customer_addr, 
		SUM(apd.paid_amount) as total_paid, apd.ap_return
		FROM
		trn_payment_ar_head aph INNER JOIN trn_payment_ar_det apd
		ON aph.no_payment_ar = apd.no_payment_ar
		INNER JOIN mst_customer ms ON ms.id_customer = aph.id_customer
		INNER JOIN mst_account ma ON ma.id_account = aph.id_account
		GROUP BY aph.no_payment_ar;
	ELSE
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Detail' THEN
			SELECT
			aph.no_payment_ar, CONCAT(ms.first_name,' ', ms.last_name) AS customer_name,
			aph.date_trn, aph.notes, 0 as total, ma.account_name, aph.id_customer,
			aph.id_account,
			apd.number_asc, apd.no_invoice, apd.invoice_date, apd.ap_amount,
			apd.discount, SUM(apd.ap_amount_net) as ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS customer_addr, apd.ap_return,
			case when apd.kurs is null then 1 else apd.kurs end as kurs, 
			aph.flag_kurs_pu
			FROM
			trn_payment_ar_head aph INNER JOIN trn_payment_ar_det apd
			ON aph.no_payment_ar = apd.no_payment_ar
			INNER JOIN mst_customer ms ON ms.id_customer = aph.id_customer
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ar = var_criteria
			GROUP BY apd.no_invoice;
		ELSEIF VAR_FIELD = 'Payment No' THEN
			SELECT
			aph.no_payment_ar, CONCAT(ms.first_name,' ', ms.last_name) AS customer_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_customer,
			aph.id_account,
			apd.number_asc, apd.no_invoice, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS customer_addr, apd.ap_return
			FROM
			trn_payment_ar_head aph INNER JOIN trn_payment_ar_det apd
			ON aph.no_payment_ar = apd.no_payment_ar
			INNER JOIN mst_customer ms ON ms.id_customer = aph.id_customer
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ar like filter;
		ELSEIF VAR_FIELD = 'Customer' THEN
			SELECT
			aph.no_payment_ar, CONCAT(ms.first_name,' ' , ms.last_name) AS customer_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_customer,
			aph.id_account,
			apd.number_asc, apd.no_invoice, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS customer_addr, apd.ap_return
			FROM
			trn_payment_ar_head aph INNER JOIN trn_payment_ar_det apd
			ON aph.no_payment_ar = apd.no_payment_ar
			INNER JOIN mst_customer ms ON ms.id_customer = aph.id_customer
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ar like filter;
		END IF;
	ELSEIF var_date_filter = 1 then
		IF VAR_FIELD = 'Payment No' THEN
			SELECT
			aph.no_payment_ar, CONCAT(ms.first_name,' ',ms.last_name) AS customer_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_customer,
			aph.id_account,
			apd.number_asc, apd.no_invoice, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS customer_addr, apd.ap_return
			FROM
			trn_payment_ar_head aph INNER JOIN trn_payment_ar_det apd
			ON aph.no_payment_ar = apd.no_payment_ar
			INNER JOIN mst_customer ms ON ms.id_customer = aph.id_customer
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ar like filter
			and (aph.date_trn between startdate and enddate);
		ELSEIF VAR_FIELD = 'Customer' THEN
			SELECT
			aph.no_payment_ar, CONCAT(ms.first_name,' ',ms.last_name) AS customer_name,
			aph.date_trn, aph.notes, aph.total, ma.account_name, aph.id_customer,
			aph.id_account,
			apd.number_asc, apd.no_invoice, apd.invoice_date, apd.ap_amount,
			apd.discount, apd.ap_amount_net, apd.paid_amount,
			CONCAT(ms.address,' ',ms.city) AS customer_addr, apd.ap_return
			FROM
			trn_payment_ar_head aph INNER JOIN trn_payment_ar_det apd
			ON aph.no_payment_ar = apd.no_payment_ar
			INNER JOIN mst_customer ms ON ms.id_customer = aph.id_customer
			INNER JOIN mst_account ma ON ma.id_account = aph.id_account
			WHERE aph.no_payment_ar like filter
			and (aph.date_trn between startdate and enddate);
		END IF;
	end if;
	END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_ar_initbalance
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_ar_initbalance`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_ar_initbalance`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.cutoff_date,
		a.invoice_no,
		a.id_customer,
		concat(b.first_name,' ',b.last_name) as customer_name,
		a.amount_of,
		a.notes
  from mst_ar_initialbalance a
	inner join mst_customer b on b.id_customer = a.id_customer
	where invoice_no = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'Invoice No' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_customer,
		concat(b.first_name,' ',b.last_name) as customer_name,
		a.amount_of,
		a.notes
		from mst_ar_initialbalance a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.invoice_no like filter;
	elseif var_field = 'Customer' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_customer,
		concat(b.first_name,' ',b.last_name) as customer_name,
		a.amount_of,
		a.notes
		from mst_ar_initialbalance a
		inner join mst_customer b on b.id_customer = a.id_customer
		where concat(b.first_name,' ',b.last_name) like filter;
	end if;
ELSEif var_date_filter = 1 THEN
IF VAR_FIELD = 'Invoice No' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_customer,
		concat(b.first_name,' ',b.last_name) as customer_name,
		a.amount_of,
		a.notes
		from mst_ar_initialbalance a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.invoice_no like filter
		and (a.created_date between startdate and enddate);
	elseif var_field = 'Customer' THEN
		select a.cutoff_date,
		a.invoice_no,
		a.id_customer,
		concat(b.first_name,' ',b.last_name) as customer_name,
		a.amount_of,
		a.notes
		from mst_ar_initialbalance a
		inner join mst_customer b on b.id_customer = a.id_customer
		where concat(b.first_name,' ',b.last_name) like filter
		and (a.created_date between startdate and enddate);
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_aset
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_aset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_aset`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_aset,
				 a.id_golongan,
				 b.type,
				 a.nama,
				 a.notes,
				 a.tanggal_perolehan,
				 a.nilai_perolehan,
				 a.sawal_nilai_buku,
				 a.created_date,
				 a.modified_date,
				 a.created_user,
				 a.modified_user,
				 a.id_department,
				 c.department_name
  from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan
	inner join mst_department c on c.department_id = a.id_department
	where a.id_aset = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'ID Aset' THEN
		SELECT 
				 a.id_aset,
				 a.id_golongan,
				 b.type,
				 a.nama,
				 a.notes,
				 a.tanggal_perolehan,
				 a.nilai_perolehan,
				 a.sawal_nilai_buku,
				 a.created_date,
				 a.modified_date,
				 a.created_user,
				 a.modified_user
		from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan
		where a.id_aset like filter;
	elseif var_field = 'Nama Aset' THEN
		SELECT 
				 a.id_aset,
				 a.id_golongan,
				 b.type,
				 a.nama,
				 a.notes,
				 a.tanggal_perolehan,
				 a.nilai_perolehan,
				 a.sawal_nilai_buku,
				 a.created_date,
				 a.modified_date,
				 a.created_user,
				 a.modified_user
		from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan
		where a.nama like filter;
	end if;
ELSEif var_date_filter = 1 THEN
IF VAR_FIELD = 'ID Aset' THEN
		SELECT 
				 a.id_aset,
				 a.id_golongan,
				 b.type,
				 a.nama,
				 a.notes,
				 a.tanggal_perolehan,
				 a.nilai_perolehan,
				 a.sawal_nilai_buku,
				 a.created_date,
				 a.modified_date,
				 a.created_user,
				 a.modified_user
		from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan
		where a.id_aset like filter
		and (a.created_date between startdate and enddate);
	elseif var_field = 'Nama Aset' THEN
			SELECT 
				 a.id_aset,
				 a.id_golongan,
				 b.type,
				 a.nama,
				 a.notes,
				 a.tanggal_perolehan,
				 a.nilai_perolehan,
				 a.sawal_nilai_buku,
				 a.created_date,
				 a.modified_date,
				 a.created_user,
				 a.modified_user
		from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan
		where a.nama like filter
		and (a.created_date between startdate and enddate);
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_begin_penyusutan
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_begin_penyusutan`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_begin_penyusutan`(in var_period integer, in var_years integer)
BEGIN
	select a.id_aset, a.nama,c.department_name , b.type,b.rate_penyusutan,
case when get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan) 
>= (a.nilai_perolehan * b.rate_penyusutan/100/12)
then round((a.nilai_perolehan * b.rate_penyusutan/100/12),0) 
when get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan) 
< (a.nilai_perolehan * b.rate_penyusutan/100/12) and get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan) > 0 
then get_nilai_buku_aset(a.id_golongan,a.nilai_perolehan,a.tanggal_perolehan,b.rate_penyusutan)
else 0 end as penyusutan, 
case when a.id_coa_aset is null then '' else a.id_coa_aset end as id_coa_aset,
case when a.id_coa_penyusutan is null then '' else a.id_coa_penyusutan end as id_coa_penyusutan,
case when a.id_coa_akumulasi is null then '' else a.id_coa_akumulasi end as id_coa_akumulasi
 from mst_aset a inner join mst_golaset b on b.id_golongan = a.id_golongan 
inner join mst_department c on c.department_id = a.id_department 
where a.id_aset not in (select id_aset from i_aset_depreciation where period = var_period and years = var_years);

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_biaya
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_biaya`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_biaya`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN

	select a.*,b.account_name from mst_standard_cost a inner join mst_account b on b.id_account = a.id_account where a.id_cost = var_criteria;

else
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Jenis Biaya' THEN
			SELECT id_cost,
			cost_name,
			cost_def, 
			notes 
			FROM mst_standard_cost where id_cost like filter;
		end if;
	elseif var_date_filter = 1 THEN
		IF VAR_FIELD = 'Jenis Biaya' THEN
			SELECT id_cost,
			cost_name,
			cost_def, 
			notes 
			FROM mst_standard_cost where id_cost like filter
			and (created_date between startdate and enddate);
		end if;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_brand_disc
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_brand_disc`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_brand_disc`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN

	select * from mst_account where id_account = var_criteria;

else
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Account No' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where id_account like filter;
		elseif var_field = 'Account Name' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where account_name like filter;
		end if;
	elseif var_date_filter = 1 THEN
		IF VAR_FIELD = 'Account No' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where id_account like filter
			and (created_date between startdate and enddate);
		elseif var_field = 'Account Name' THEN
			SELECT id_account,
			account_name,
			CASE WHEN flag_header = 1 THEN 'Header' else 'Detail' end as Type,
			case when def_position = 'D' then 'Debet' else 'Credit' end as Def, 
			notes 
			FROM mst_account where account_name like filter
			and (created_date between startdate and enddate);
		end if;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_cashier
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_cashier`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_cashier`(in var_field varchar(255), in var_criteria text, in detail integer,in date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.customer,a.cust_address as address,a.cust_phone,a.no_sales, a.date_trn, 
c.id_curr,a.notes,a.subtotal,a.tax,a.total as total_head,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty, c.price, (c.qty * c.price) as total, a.discount,a.discpay,a.termpaydisc,a.term,a.payment_method,
c.disc_nom,c.nominal_net,case when a.flag_member is null then 0 else a.flag_member end as flag_member,
case when a.id_customer is null then '' else a.id_customer end as id_customer
 from trn_cashier_head a
inner join trn_cashier_det c on c.no_sales=a.no_sales
inner join mst_item f on f.id_item = c.id_item
where a.no_sales = var_criteria
union ALL
select a.customer,a.cust_address as address,a.cust_phone,a.no_sales, a.date_trn, 
c.id_curr,a.notes,a.subtotal,a.tax,a.total as total_head,
c.number_asc,c.id_service as id_item,c.id_unit,f.service_name as item_name, c.notes as description, 
c.qty, c.price, (c.qty * c.price) as total, a.discount,a.discpay,a.termpaydisc,a.term,a.payment_method,
c.disc_nom,c.nominal_net,
case when a.flag_member is null then 0 else a.flag_member end as flag_member,
case when a.id_customer is null then '' else a.id_customer end as id_customer
 from trn_cashier_head a
inner join trn_cashier_service_det c on c.no_sales=a.no_sales
inner join mst_service f on f.id_service = c.id_service
where a.no_sales = var_criteria;
else

if date_filter = 0 then
IF VAR_FIELD = 'Transaction No' THEN

select a.no_sales, a.customer as nama, a.date_trn, a.subtotal, (a.tax/100) * (a.subtotal -(a.discount/100 * a.subtotal)) as tax,
a.total,a.notes,a.customer,a.cust_address as address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_cashier_head a
where a.no_sales like filter;

elseif var_field = 'Customer' THEN
select a.no_sales, a.customer as nama, a.date_trn, a.subtotal, (a.tax/100) * (a.subtotal -(a.discount/100 * a.subtotal)) as tax,
a.total,a.notes,a.customer,a.cust_address as address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_cashier_head a
	where a.customer like filter;


end if;
elseIF VAR_FIELD = 'Transaction No' THEN

select a.no_sales, a.customer as nama, a.date_trn, a.subtotal, (a.tax/100) * (a.subtotal -(a.discount/100 * a.subtotal)) as tax,
a.total,a.notes,a.customer,a.cust_address as address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_cashier_head a
where a.no_sales like filter
and (date_trn between var_tgl_awal and var_tgl_akhir) ;

elseif var_field = 'Customer' THEN
select a.no_sales, a.customer as nama, a.date_trn, a.subtotal, (a.tax/100) * (a.subtotal -(a.discount/100 * a.subtotal)) as tax,
a.total,a.notes,a.customer,a.cust_address as address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_cashier_head a
	where a.customer like filter
and (date_trn between var_tgl_awal and var_tgl_akhir) ;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_cashier_2
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_cashier_2`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_cashier_2`(in var_field varchar(255), in var_criteria text, in detail integer)
BEGIN
	declare filter text;
	select concat('%',var_criteria,'%') into filter;
	IF detail = 1 THEN
		SELECT
				DISTINCT(h.no_sales), 
				CONCAT(s.first_name,' ',s.last_name) as nm_customer,			
				h.no_sales_order,
				h.date_trn, h.subtotal, h.discount, h.tax, h.total, h.notes,
				h.payment_method, h.term, h.termpaydisc,h.discount,
				CONCAT(s.address,' ',s.city) as addr_customer, p.ref_status_name as nm_payment,
				s.id_customer
			FROM
				trn_sales_head h
			INNER JOIN trn_sales_det d ON h.no_sales = d.no_sales
			INNER JOIN mst_customer s ON h.id_customer =s.id_customer
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id;
	ELSE
		IF VAR_FIELD = 'detail' THEN
			SELECT
				h.no_sales, 
				h.customer,
				h.date_trn, h.subtotal, h.discount, h.tax, h.total, h.notes,
				d.number_asc, d.id_item, i.item_name, d.notes as notes_detail, d.qty, d.id_unit,
				d.price, d.nominal, d.id_curr, h.payment_method, h.term, 
				h.termpaydisc,h.discpay,
				h.cust_address, p.ref_status_name as nm_payment,
				s.id_customer,d.disc_nom,d.nominal_net
			FROM
				trn_cashier_head h
			INNER JOIN trn_cashier_det d ON h.no_sales = d.no_sales
			INNER JOIN mst_customer s ON h.id_customer =s.id_customer
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_sales = var_criteria;
		END IF;
		IF VAR_FIELD = 'Invoice No' THEN
			select distinct h.no_sales, 
				h.customer,
				h.date_trn, h.subtotal, h.discount,(h.discount/100*h.subtotal) as discount_nom, h.tax,
				h.tax/100 * (h.subtotal-(h.discount/100*h.subtotal)) as tax_nom , h.total, h.notes,
				h.payment_method, h.term, 
				h.termpaydisc,h.discpay,
				h.cust_address, p.ref_status_name as nm_payment
			FROM
				trn_cashier_head h
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_sales like filter ;
		ELSEIF VAR_FIELD = 'Customer' THEN
				select distinct h.no_sales, 
				h.customer,
				h.date_trn, h.subtotal, h.discount,(h.discount/100*h.subtotal) as discount_nom, h.tax,
				h.tax/100 * (h.subtotal-(h.discount/100*h.subtotal)) as tax_nom , h.total, h.notes,
				h.payment_method, h.term, 
				h.termpaydisc,h.discpay,
				h.cust_address, p.ref_status_name as nm_payment
			FROM
				trn_cashier_head h
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			where h.customer like filter;
		END IF;
		IF VAR_FIELD = 'A/R Payment' THEN

select a.no_sales, a.date_trn, a.sales_amount, case when a.return_amount is null then 0 else a.return_amount end as return_amount,
case 
	when DATEDIFF((select now()),a.date_trn) <= b.termpaydisc THEN round((b.discpay * a.sales_amount/100),0)
	else 0 end as disc, 
case 
	when DATEDIFF((select now()),a.date_trn) <= b.termpaydisc THEN a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end - case when a.paid_amount is null then 0 else a.paid_amount end  
	else a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.paid_amount is null then 0 else a.paid_amount end end as total, case when a.paid_amount is null then 0 else a.paid_amount end as paid_amount,
case when b.kurs is null then 1 else b.kurs end as kurs, case when a.disc_amount is null then 0 else a.disc_amount end as diskon_bayar
from ar_status a
inner join trn_sales_head b on b.no_sales = a.no_sales
where b.id_customer = var_criteria AND  b.payment_method=2
and case 
	when DATEDIFF((select now()),a.date_trn) <= b.termpaydisc THEN a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end - case when a.paid_amount is null then 0 else a.paid_amount end  
	else a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.paid_amount is null then 0 else a.paid_amount end end <> 0;

			
		END IF;
	END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_cashier_return
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_cashier_return`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_cashier_return`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN
	declare filter text;
	select concat('%',var_criteria,'%') into filter;
IF detail = 1 THEN
	SELECT 
	DISTINCT(prh.no_sales_return), prh.date_trn, prh.id_customer, 
	CONCAT(ms.first_name,' ',ms.last_name) as customer_name, 
	CONCAT(ms.address,' ',ms.city) AS customer_addr,
	prh.payment_method, rpm.ref_status_name, prh.`notes`,
	prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales,prh.id_warehouse
	FROM trn_sales_return_head prh INNER JOIN trn_sales_return_det prd ON
	prh.no_sales_return= prd.no_sales_return 
	INNER JOIN mst_customer ms ON prh.id_customer =ms.id_customer
	INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method;
ELSE
if var_date_filter = 0 then
	IF VAR_FIELD = 'detail' THEN
		SELECT 
		(prh.no_sales_return), prh.date_trn, 
		prh.customer as customer_name, 
		prh.customer_addr AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes as notes_detail,
		prd.qty, prd.id_unit as unit, prd.price, prd.nominal, prd.no_sales,
		prd.id_curr, case when prh.kurs is null then 1 else prh.kurs end as kurs, prh.id_warehouse,
    prd.disc_nom, prd.nominal_net
		FROM trn_cashier_return_head prh INNER JOIN trn_cashier_return_det prd ON
		prh.no_sales_return= prd.no_sales_return 
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE prh.no_sales_return =  var_criteria ;

	ELSEIF VAR_FIELD = 'Return No' THEN
		SELECT distinct
		(prh.no_sales_return), prh.date_trn, 
		prh.customer as customer_name, 
		prh.customer_addr AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales, prh.id_warehouse
		FROM trn_cashier_return_head prh inner join trn_cashier_return_det prd on prd.no_sales_return = prh.no_sales_return
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE prh.no_sales_return like filter;
	ELSEIF VAR_FIELD = 'Customer' THEN
			SELECT distinct
		(prh.no_sales_return), prh.date_trn, 
		prh.customer as customer_name, 
		prh.customer_addr AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales, prh.id_warehouse
		FROM trn_cashier_return_head prh inner join trn_cashier_return_det prd on prd.no_sales_return = prh.no_sales_return
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE CONCAT(ms.first_name,ms.last_name) like filter;
	END IF;
elseif var_date_filter = 1 THEN
IF VAR_FIELD = 'Return No' THEN
			SELECT distinct
		(prh.no_sales_return), prh.date_trn, 
		prh.customer as customer_name, 
		prh.customer_addr AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales, prh.id_warehouse
		FROM trn_cashier_return_head prh inner join trn_cashier_return_det prd on prd.no_sales_return = prh.no_sales_return
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE prh.no_sales_return like filter
		and (prh.date_trn between startdate and enddate);
	ELSEIF VAR_FIELD = 'Customer' THEN
			SELECT distinct
		(prh.no_sales_return), prh.date_trn, 
		prh.customer as customer_name, 
		prh.customer_addr AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales, prh.id_warehouse
		FROM trn_cashier_return_head prh inner join trn_cashier_return_det prd on prd.no_sales_return = prh.no_sales_return
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE CONCAT(ms.first_name,ms.last_name) like filter
		and (prh.date_trn between startdate and enddate);
	END IF;
end if;
END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_cash_bank
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_cash_bank`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_cash_bank`(in var_field varchar(255), in var_criteria text, in detail integer, in type varchar(30), in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_account, b.account_name,
	case when flag_trans = 'KM' then 'Cash'
	when flag_trans = 'KK' then 'Cash'
	when flag_trans = 'BM' then 'Bank'
	when flag_trans = 'BK' then 'Bank'
	end as type, 
	a.date_trn, a.cashbank_no, a.notes, a.total,c.id_account as acc_det, z.account_name as acc_nm_det, c.notes as notes_det, c.amount, a.evidence_no
,id_currency,kurs	
from trn_cashbank_head a
	inner join mst_account b on b.id_account = a.id_account
	inner join trn_cashbank_det c on c.cashbank_no=a.cashbank_no 
	inner join mst_account z on z.id_account = c.id_account
	where a.cashbank_no = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'Disbursement No' or VAR_FIELD = 'Receipt No'  THEN
		if type = 'IN' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KM','BM')
			and cashbank_no like filter
			order by date_trn desc, cashbank_no desc;
		ELSEif type = 'OUT' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KK','BK')
			and cashbank_no like filter
			order by date_trn desc, cashbank_no desc;
		end if;
	elseif var_field = 'Amount Of' THEN
		if type = 'IN' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KM','BM')
			and total like filter
			order by date_trn desc, cashbank_no desc;
		ELSEif type = 'OUT' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KK','BK')
			and total like filter
			order by date_trn desc, cashbank_no desc;
		end if;
	end if;
elseif var_date_filter = 1 THEN
IF VAR_FIELD = 'Disbursement No' or VAR_FIELD = 'Receipt No'  THEN
		if type = 'IN' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KM','BM')
			and cashbank_no like filter
			and (date_trn between startdate and enddate)
			order by date_trn desc, cashbank_no desc;
		ELSEif type = 'OUT' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KK','BK')
			and cashbank_no like filter
			and (date_trn between startdate and enddate)
			order by date_trn desc, cashbank_no desc;
		end if;
	elseif var_field = 'Amount Of' THEN
		if type = 'IN' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KM','BM')
			and total like filter
			and (date_trn between startdate and enddate)
			order by date_trn desc, cashbank_no desc;
		ELSEif type = 'OUT' then
			select cashbank_no, 
			date_trn, 
			notes, 
			total from trn_cashbank_head
			where flag_trans in ('KK','BK')
			and total like filter
			and (date_trn between startdate and enddate)
			order by date_trn desc, cashbank_no desc;
		end if;
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_currency
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_currency`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_currency`(in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select id_currency, currency, notes, flag_default, nation
  from mst_currency
	where id_currency = var_criteria;
elseif detail = 0 then
	select id_currency, currency, notes
  from mst_currency;
elseif detail = 2 then
	select a.id_currency, b.currency, case when a.convert_value is null then 0 else a.convert_value end as convert_value, 
	(select id_currency from mst_currency where flag_default = 1 limit 1) as defcurrency,
	a.notes
	from mst_setcurrency a
	inner join mst_currency b on b.id_currency = a.id_currency;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_customer
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_customer`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_customer`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

	declare filter text;
	select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select * from mst_customer where id_customer = var_criteria;
elseif detail = 2 THEN

if var_date_filter = 0 then 
if var_field = 'Customer ID' then
SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where id_customer like filter;

elseif var_field = 'Barcode Member' then
SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where case when id_barcode is null then '' else id_barcode end like filter;

elseif var_field = 'First Name' THEN

SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where first_name like filter;

ELSEIF var_field = 'Last Name' THEN

	SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where last_name like filter;

ELSEIF var_field = 'City' THEN

	SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where city like filter;

end if;
elseif var_date_filter = 1 THEN
if var_field = 'Customer ID' then
SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where id_customer like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'Barcode Member' then
SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where case when id_barcode is null then '' else id_barcode end like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'First Name' THEN

SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where first_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

ELSEIF var_field = 'Last Name' THEN

SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where last_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

ELSEIF var_field = 'City' THEN

SELECT
	a.id_customer,
	concat(a.first_name, ' ', a.last_name) AS NAME,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city,
	case when a.id_barcode is null then '' else a.id_barcode end as id_barcode
FROM
	mst_customer a
where city like filter
and (created_date between var_tgl_awal and var_tgl_akhir);
end if;
end if;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_delivered_item
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_delivered_item`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_delivered_item`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
declare total_approve integer;
declare total_item integer;
declare notes_approve text;

select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN

select a.id_customer,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_delivery_order, a.date_trn,a.notes,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
case when c.qty is null then 0 else c.qty end as qty,
case when c.sent_qty is null then 0 else c.sent_qty end as sent_qty, 
a.no_sales_order, 
case when d.qty is null then 0 else d.qty end as qty_po, a.id_warehouse
 from trn_delivery_order_head a
inner join mst_customer b on b.id_customer = a.id_customer
inner join trn_delivery_order_det c on c.no_delivery_order=a.no_delivery_order
inner join trn_sales_order_det d on d.no_sales_order = a.no_sales_order and d.id_item = c.id_item
inner join mst_item f on f.id_item = c.id_item
where a.no_delivery_order = var_criteria;

elseif detail = 5 THEN
select * from trn_do_discitem_det;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'Delivery No' THEN
		select a.no_delivery_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_customer, a.no_sales_order
		from trn_delivery_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.no_delivery_order like filter
		order by a.date_trn desc, a.no_delivery_order desc;
	elseif VAR_FIELD = 'Customer' THEN
		select a.no_delivery_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_customer, a.no_sales_order
		from trn_delivery_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where concat(b.first_name,' ',b.last_name) like filter
		order by a.date_trn desc, a.no_delivery_order desc;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'Delivery No' THEN
		select a.no_delivery_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_customer, a.no_sales_order
		from trn_delivery_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.no_delivery_order like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_delivery_order desc;
	elseif VAR_FIELD = 'Customer' THEN
		select a.no_delivery_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_customer, a.no_sales_order
		from trn_delivery_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where concat(b.first_name,' ',b.last_name) like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_delivery_order desc;
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_expedition
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_expedition`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_expedition`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select id_expedition,
				expedition_name,
				expedition_rate,
				from_city,
				to_city,
				qty_perunit,
				notes,
				created_date,
				modified_date,
				created_user,
				modified_user
  from mst_expedition
	where id_expedition = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'ID Ekspedisi' THEN
		SELECT id_expedition,
				expedition_name,
				expedition_rate,
				from_city,
				to_city,
			  qty_perunit
		FROM mst_expedition where id_expedition like filter;
	elseif var_field = 'Nama Ekspedisi' THEN
		SELECT id_expedition,
				expedition_name,
				expedition_rate,
				from_city,
				to_city,
				qty_perunit
		FROM mst_expedition where expedition_name like filter;
	end if;
ELSEif var_date_filter = 1 THEN
IF VAR_FIELD = 'ID Expedisi' THEN
		SELECT id_expedition,
				expedition_name,
				expedition_rate,
				from_city,
				to_city,
				qty_perunit
		FROM mst_expedition where id_expedition like filter
		and (created_date between startdate and enddate);
	elseif var_field = 'Nama Expedisi' THEN
		SELECT id_expedition,
				expedition_name,
				expedition_rate,
				from_city,
				to_city,
				qty_perunit
		FROM mst_expedition where expedition_name like filter
		and (created_date between startdate and enddate);
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_golaset
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_golaset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_golaset`(in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_golongan, a.masa_manfaat,a.rate_penyusutan,a.type
  from mst_golaset a 
	where a.id_golongan = var_criteria;
else
		SELECT 
				 a.id_golongan, a.masa_manfaat,a.rate_penyusutan,a.type
		from mst_golaset a 
	  where a.id_golongan like filter;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_item
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_item`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_item`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select distinct a.id_item,a.item_name,a.id_category,a.id_jenis,a.id_account,b.account_name,
	a.main_unit,a.sell_unit,a.buy_unit,a.flag_buy,a.flag_sell,a.flag_inv,a.blob_image, a.sell_price,
	c.mst_itemcat_nm,d.mst_itemjenis_nm,e.unit as main_unit_nm, f.unit as sell_unit_nm, g.unit as buy_unit_nm, h.warehouse_name ,
	a.id_warehouse,a.max_qty,a.min_qty,a.notes,
  case when a.length is null then 0 else a.length end as length,
	case when a.width is null then 0 else a.width end as width,
	case when a.height is null then 0 else a.height end as height,
	case when a.weight is null then 0 else a.weight end as weight,
	a.blob_image, a.id_account_cogs, a.account_cogs, a.min_qty_unit, z.mst_itembrand_nm, a.id_brand, case when a.item_disc_qty
	is null then 0 else a.item_disc_qty end as qty_to_disc, a.item_disc_unit
  from mst_item a
	inner join mst_account b on b.id_account = a.id_account
  inner join mst_itemcat c on c.mst_itemcat_id = a.id_category
inner join mst_itembrand z on z.mst_itembrand_id = a.id_brand
inner join mst_itemjenis d on d.mst_itemjenis_id = a.id_jenis
inner join mst_unit e on e.id_unit = a.main_unit
inner join mst_unit f on f.id_unit = a.sell_unit
inner join mst_unit g on g.id_unit = a.buy_unit
inner join mst_warehouse h on h.id_warehouse = a.id_warehouse
	where id_item = var_criteria;
else

if var_date_filter = 0 then 
	IF VAR_FIELD = 'Item ID' THEN
		SELECT a.id_item, a.item_name, a.main_unit, b.mst_itemcat_nm, c.mst_itemjenis_nm,
		case when a.id_barcode is null then '' else a.id_barcode end as id_barcode, z.mst_itembrand_nm
		FROM mst_item a inner join mst_itemcat b on b.mst_itemcat_id = a.id_category 
		inner join mst_itemjenis c on c.mst_itemjenis_id = b.mst_itemjenis_id
		inner join mst_itembrand z on z.mst_itembrand_id = a.id_brand
		where id_item like filter;
	elseif var_field = 'Item Name' THEN
		SELECT a.id_item, a.item_name, a.main_unit, b.mst_itemcat_nm, c.mst_itemjenis_nm,
		case when a.id_barcode is null then '' else a.id_barcode end as id_barcode, z.mst_itembrand_nm
		FROM mst_item a inner join mst_itemcat b on b.mst_itemcat_id = a.id_category 
		inner join mst_itemjenis c on c.mst_itemjenis_id = b.mst_itemjenis_id
		inner join mst_itembrand z on z.mst_itembrand_id = a.id_brand
		where item_name like filter;
	end if;
elseif var_date_filter = 1 THEN
	IF VAR_FIELD = 'Item ID' THEN
		SELECT a.id_item, a.item_name, a.main_unit, b.mst_itemcat_nm, c.mst_itemjenis_nm,
		case when a.id_barcode is null then '' else a.id_barcode end as id_barcode, z.mst_itembrand_nm
		FROM mst_item a inner join mst_itemcat b on b.mst_itemcat_id = a.id_category 
		inner join mst_itemjenis c on c.mst_itemjenis_id = b.mst_itemjenis_id
		inner join mst_itembrand z on z.mst_itembrand_id = a.id_brand
		where id_item like filter
		and (a.created_date between var_tgl_awal and var_tgl_akhir);
	elseif var_field = 'Item Name' THEN
		SELECT a.id_item, a.item_name, a.main_unit, b.mst_itemcat_nm, c.mst_itemjenis_nm,
		case when a.id_barcode is null then '' else a.id_barcode end as id_barcode, z.mst_itembrand_nm
		FROM mst_item a inner join mst_itemcat b on b.mst_itemcat_id = a.id_category 
		inner join mst_itemjenis c on c.mst_itemjenis_id = b.mst_itemjenis_id
		inner join mst_itembrand z on z.mst_itembrand_id = a.id_brand
		where item_name like filter
		and (a.created_date between var_tgl_awal and var_tgl_akhir);
	end if;
end if;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_itembrand
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_itembrand`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_itembrand`(in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select mst_itembrand_id,mst_itembrand_nm,description, case when disc is null then 0 else disc end as disc
  from mst_itembrand a
	where mst_itembrand_id = var_criteria;
elseif detail = 0 then
	select mst_itembrand_id,mst_itembrand_nm,description, case when disc is null then 0 else disc end as disc
  from mst_itembrand a;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_itemcat
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_itemcat`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_itemcat`(in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select b.mst_itemjenis_id,b.mst_itemjenis_nm,mst_itemcat_id,mst_itemcat_nm,a.description,
	case when a.discount is null then 0 else a.discount end as discount
  from mst_itemcat a
	inner join mst_itemjenis b on b.mst_itemjenis_id = a.mst_itemjenis_id
	where a.mst_itemcat_id = var_criteria;
elseif detail = 0 then
	select b.mst_itemjenis_nm,mst_itemcat_id,mst_itemcat_nm,a.description,
	case when a.discount is null then 0 else a.discount end as discount
  from mst_itemcat a
	inner join mst_itemjenis b on b.mst_itemjenis_id = a.mst_itemjenis_id;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_itemjenis
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_itemjenis`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_itemjenis`(in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select mst_itemjenis_id,mst_itemjenis_nm,description,case when discount is null then 0 else discount end as discount
  from mst_itemjenis a
	where mst_itemjenis_id = var_criteria;
elseif detail = 0 then
	select mst_itemjenis_id,mst_itemjenis_nm,description,case when discount is null then 0 else discount end as discount
  from mst_itemjenis a;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_journal
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_journal`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_journal`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 case when b.amount>0 then b.amount else 0 end as debet,
				 case when b.amount<0 then -1*b.amount else 0 end as credit,
				 b.notes,
				 b.id_account,
				 c.account_name,
				 a.kurs,
				 a.id_currency
	from trn_journal_head a
	inner join trn_journal_det b on b.journal_no = a.journal_no 
	inner join mst_account c on c.id_account = b.id_account
	where a.journal_no = var_criteria;
else

if var_date_filter = 0 then
	IF VAR_FIELD = 'Journal No' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_journal_head a
		where a.journal_no like filter
		order by a.date_trn desc, a.journal_no desc;
	elseif var_field = 'Notes' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_journal_head a
		where a.description like filter
		order by a.date_trn desc, a.journal_no desc;
	end if;
elseif var_date_filter = 1 THEN
	IF VAR_FIELD = 'Journal No' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_journal_head a
		where a.journal_no like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.journal_no desc;
	elseif var_field = 'Notes' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_journal_head a
		where a.description like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.journal_no desc;
	end if;
end if;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_journal_adjust
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_journal_adjust`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_journal_adjust`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 case when b.amount>0 then b.amount else 0 end as debet,
				 case when b.amount<0 then -1*b.amount else 0 end as credit,
				 b.notes,
				 b.id_account,
				 c.account_name,
				 a.kurs,
				 a.id_currency
	from trn_adjustjournal_head a
	inner join trn_adjustjournal_det b on b.journal_no = a.journal_no 
	inner join mst_account c on c.id_account = b.id_account
	where a.journal_no = var_criteria;
else

if var_date_filter = 0 then
	IF VAR_FIELD = 'Journal No' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_adjustjournal_head a
		where a.journal_no like filter
		order by a.date_trn desc, a.journal_no desc;
	elseif var_field = 'Notes' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_adjustjournal_head a
		where a.description like filter
		order by a.date_trn desc, a.journal_no desc;
	end if;
elseif var_date_filter = 1 THEN
	IF VAR_FIELD = 'Journal No' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_adjustjournal_head a
		where a.journal_no like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.journal_no desc;
	elseif var_field = 'Notes' THEN
		select a.journal_no, 
				 a.date_trn, 
				 a.description, 
				 a.total as amount
		from trn_adjustjournal_head a
		where a.description like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.journal_no desc;
	end if;
end if;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_journal_all
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_journal_all`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_journal_all`(in var_field varchar(255), in var_criteria text, in var_post_from varchar(250),in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;
if var_date_filter = 0 then
 IF VAR_FIELD = 'Journal No' THEN
		select distinct a.no_ledger, 
				 a.date_trn, 
				 b.id_account, 
				 c.account_name,
				 b.notes,
				 case when b.nominal > 0 then b.nominal else 0 end as debit,
				 case when b.nominal <= 0 then -1 * b.nominal else 0 end as credit, a.post_from
		from trn_ledger_head a
		inner join trn_ledger_det b on b.no_ledger = a.no_ledger 
		inner join mst_account c on c.id_account = b.id_account
		where a.no_ledger like filter
		and a.post_from like var_post_from 
		order by a.no_ledger asc, a.date_trn asc;
	elseif var_field = 'Account No' THEN
		select distinct a.no_ledger, 
				 a.date_trn, 
				 b.id_account, 
				 c.account_name,
				 b.notes,
				 case when b.nominal > 0 then b.nominal else 0 end as debit,
				 case when b.nominal <= 0 then -1 * b.nominal else 0 end as credit,a.post_from
		from trn_ledger_head a
		inner join trn_ledger_det b on b.no_ledger = a.no_ledger 
		inner join mst_account c on c.id_account = b.id_account
		where b.id_account like filter
		and a.post_from like var_post_from
		order by a.no_ledger asc, a.date_trn asc;
elseif var_field = 'Account Name' THEN
		select distinct a.no_ledger, 
				 a.date_trn, 
				 b.id_account, 
				 c.account_name,
				 b.notes,
				 case when b.nominal > 0 then b.nominal else 0 end as debit,
				 case when b.nominal <= 0 then -1 * b.nominal else 0 end as credit,a.post_from
		from trn_ledger_head a
		inner join trn_ledger_det b on b.no_ledger = a.no_ledger 
		inner join mst_account c on c.id_account = b.id_account
		where c.account_name like filter
		and a.post_from like var_post_from 
		order by a.no_ledger asc, a.date_trn asc;
	end if;
elseif var_date_filter =1 THEN
IF VAR_FIELD = 'Journal No' THEN
		select distinct a.no_ledger, 
				 a.date_trn, 
				 b.id_account, 
				 c.account_name,
				 b.notes,
				 case when b.nominal > 0 then b.nominal else 0 end as debit,
				 case when b.nominal <= 0 then -1 * b.nominal else 0 end as credit,a.post_from
		from trn_ledger_head a
		inner join trn_ledger_det b on b.no_ledger = a.no_ledger 
		inner join mst_account c on c.id_account = b.id_account
		where a.no_ledger like filter
		and a.post_from like var_post_from
		and (a.date_trn between startdate and enddate)
		order by a.no_ledger asc, a.date_trn asc;
	elseif var_field = 'Account No' THEN
		select distinct a.no_ledger, 
				 a.date_trn, 
				 b.id_account, 
				 c.account_name,
				 b.notes,
				 case when b.nominal > 0 then b.nominal else 0 end as debit,
				 case when b.nominal <= 0 then -1 * b.nominal else 0 end as credit, a.post_from
		from trn_ledger_head a
		inner join trn_ledger_det b on b.no_ledger = a.no_ledger 
		inner join mst_account c on c.id_account = b.id_account
		where b.id_account like filter
		and a.post_from like var_post_from
		and (a.date_trn between startdate and enddate)
		order by a.no_ledger asc, a.date_trn asc;
elseif var_field = 'Account Name' THEN
		select distinct a.no_ledger, 
				 a.date_trn, 
				 b.id_account, 
				 c.account_name,
				 b.notes,
				 case when b.nominal > 0 then b.nominal else 0 end as debit,
				 case when b.nominal <= 0 then -1 * b.nominal else 0 end as credit, a.post_from
		from trn_ledger_head a
		inner join trn_ledger_det b on b.no_ledger = a.no_ledger 
		inner join mst_account c on c.id_account = b.id_account
		where c.account_name like filter
		and a.post_from like var_post_from
		and (a.date_trn between startdate and enddate)
		order by a.no_ledger asc, a.date_trn asc;
	end if;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_ledger
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_ledger`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_ledger`(in var_criteria text)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

IF VAR_FIELD = 'Journal No' THEN

	select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
	case when a.nominal >= 0 then a.nominal else 0 end as debet,
	case when a.nominal < 0 then a.nominal else 0 end as credit
  from trn_ledger_det a
	inner join mst_account b on b.id_account = a.id_account
	inner join trn_ledger_head c on c.no_ledger=a.no_ledger
	WHERE a.no_ledger like filter;
	

elseif var_field = 'Date' THEN

	select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
	case when a.nominal >= 0 then a.nominal else 0 end as debet,
	case when a.nominal < 0 then a.nominal else 0 end as credit
  from trn_ledger_det a
	inner join mst_account b on b.id_account = a.id_account
	inner join trn_ledger_head c on c.no_ledger=a.no_ledger
	WHERE c.date_trn = var_criteria;

end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_marketing
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_marketing`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_marketing`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select * from mst_employee where id_employee = var_criteria;
else
if var_date_filter = 0 then 
if var_field = 'Employee ID' then
SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where id_employee like filter;

ELSEIF var_field = 'First Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where first_name like filter;

elseif var_field = 'Last Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where last_name like filter;

elseif var_field = 'City' THEN
SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where city like filter;


end if;
elseif var_date_filter = 1 THEN
if var_field = 'Employee ID' then
SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where id_employee like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

ELSEIF var_field = 'First Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where first_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'Last Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where last_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'City' THEN
SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_employee,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	case when 
		a.target is null then 0 
	else
		a.target
	end as target,department_id,position_id
FROM
	mst_employee a
where city like filter
and (created_date between var_tgl_awal and var_tgl_akhir);


end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_not_marketing
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_not_marketing`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_not_marketing`()
BEGIN
	SELECT
	id_employee,
	concat(first_name, ' ', last_name) AS nama
FROM
	mst_employee
WHERE
	id_employee NOT IN (
		SELECT
			id_employee
		FROM
			mst_marketing
	);

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_po
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_po`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_po`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_supplier,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_purchase_order, a.date_trn, 
c.id_curr,a.notes,a.subtotal,a.freight,a.tax,a.total as total_head,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty, c.price, (c.qty * c.price) as total, c.no_request_order 
 from trn_purchase_order_head a
inner join mst_supplier b on b.id_supplier = a.id_supplier
inner join trn_purchase_order_det c on c.no_purchase_order=a.no_purchase_order
inner join mst_item f on f.id_item = c.id_item
where a.no_purchase_order = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'PO No' THEN
		select a.no_purchase_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, a.freight, (a.tax/100) * (a.subtotal+a.freight) as tax,
		a.total,a.notes,a.id_supplier
		from trn_purchase_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where a.no_purchase_order like filter
		order by a.date_trn desc, a.no_purchase_order desc;
	elseif VAR_FIELD = 'Supplier' THEN
		select a.no_purchase_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, a.freight, (a.tax/100) * (a.subtotal+a.freight) as tax,
		a.total,a.notes,a.id_supplier
		from trn_purchase_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where concat(b.first_name,' ',b.last_name) like filter
		order by a.date_trn desc, a.no_purchase_order desc;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'PO No' THEN
		select a.no_purchase_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, a.freight, (a.tax/100) * (a.subtotal+a.freight) as tax,
		a.total,a.notes,a.id_supplier
		from trn_purchase_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where a.no_purchase_order like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_purchase_order desc;
	elseif VAR_FIELD = 'Supplier' THEN
		select a.no_purchase_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, a.freight, (a.tax/100) * (a.subtotal+a.freight) as tax,
		a.total,a.notes,a.id_supplier
		from trn_purchase_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where concat(b.first_name,' ',b.last_name) like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_purchase_order desc;
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_po2
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_po2`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_po2`(in var_field varchar(255), in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_supplier,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_purchase_order, a.date_trn, 
c.id_curr,a.notes,a.subtotal,a.freight,a.tax,a.total as total_head,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty, c.price, (c.qty * c.price) as total 
 from trn_purchase_order_head a
inner join mst_supplier b on b.id_supplier = a.id_supplier
inner join trn_purchase_order_det c on c.no_purchase_order=a.no_purchase_order
inner join mst_item f on f.id_item = c.id_item
where a.no_purchase_order = var_criteria
order by c.number_asc asc;
else

IF VAR_FIELD = 'PO No' THEN

select a.no_purchase_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, a.freight, (a.tax/100) * (a.subtotal+a.freight) as tax,
a.total,a.notes,a.id_supplier,case when a.kurs is null then 1 else a.kurs end kurs
from trn_purchase_order_head a
inner join mst_supplier b on b.id_supplier = a.id_supplier
where a.no_purchase_order like filter
and a.no_purchase_order not in (select no_purchase_order from trn_purchase_head);
	
elseif var_field = 'Supplier' THEN
select a.no_purchase_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, a.freight, (a.tax/100) * (a.subtotal+a.freight) as tax,
a.total,a.notes,a.id_supplier,case when a.kurs is null then 1 else a.kurs end kurs
from trn_purchase_order_head a
inner join mst_supplier b on b.id_supplier = a.id_supplier
where concat(b.first_name,' ',b.last_name) like filter
and a.no_purchase_order not in (select no_purchase_order from trn_purchase_head);

end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_po_purch
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_po_purch`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_po_purch`(in var_field varchar(255), in var_criteria text, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if var_date_filter = 0 then
	IF VAR_FIELD = 'No PO' THEN
		select c.id_item, d.item_name, c.notes as notes, c.qty,c.qty_received, c.id_unit, 
		c.price, c.qty_received * c.price as nominal,case when a.tax is null then 0 else a.tax end as tax,
		case when a.freight is null then 0 else a.freight end as freight,case when a.kurs is null then 1 else a.kurs end as kurs,
		c.id_curr
		from trn_purchase_order_head a
		inner join trn_purchase_order_det c on c.no_purchase_order = a.no_purchase_order
		inner join mst_item d on d.id_item = c.id_item
		where a.no_purchase_order = var_criteria and case when a.flag_status_invoice is null then 0 else a.flag_status_invoice end <> 1;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'No PO' THEN
		select c.id_item, d.item_name, c.notes as notes, c.qty,c.qty_received, c.id_unit, 
		c.price, c.qty_received * c.price as nominal,case when a.tax is null then 0 else a.tax end as tax,
		case when a.freight is null then 0 else a.freight end as freight, case when a.kurs is null then 1 else a.kurs end as kurs,
		c.id_curr
		from trn_purchase_order_head a
		inner join trn_purchase_order_det c on c.no_purchase_order = a.no_purchase_order
		inner join mst_item d on d.id_item = c.id_item
		where a.no_purchase_order = var_criteria
		and (a.date_trn between startdate and enddate) and case when a.flag_status_invoice is null then 0 else a.flag_status_invoice end <> 1;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_po_rec
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_po_rec`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_po_rec`(in var_field varchar(255), in var_criteria text, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if var_date_filter = 0 then
	IF VAR_FIELD = 'No PO' THEN
		select c.id_item, d.item_name, '', c.qty, c.id_unit, 
		0, 0,f.warehouse_name,e.id_warehouse
		from trn_purchase_order_head a
		inner join trn_purchase_order_det c on c.no_purchase_order = a.no_purchase_order
		inner join mst_item d on d.id_item = c.id_item
		inner join trn_request_order_head e on e.no_request_order = c.no_request_order
		inner join mst_warehouse f on f.id_warehouse = e.id_warehouse
		where a.no_purchase_order = var_criteria and c.qty - case when c.qty_received is null then 0 else c.qty_received end > 0;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'No PO' THEN
		select c.id_item, d.item_name, '', c.qty, c.id_unit, 
		0, 0, f.warehouse_name,e.id_warehouse
		from trn_purchase_order_head a
		inner join trn_purchase_order_det c on c.no_purchase_order = a.no_purchase_order
		inner join mst_item d on d.id_item = c.id_item
		inner join trn_request_order_head e on e.no_request_order = c.no_request_order
		inner join mst_warehouse f on f.id_warehouse = e.id_warehouse
		where a.no_purchase_order = var_criteria
		and (a.date_trn between startdate and enddate) and c.qty - case when c.qty_received is null then 0 else c.qty_received end > 0;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_purchase
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_purchase`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_purchase`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN
	declare filter text;
	select concat('%',var_criteria,'%') into filter;
	IF detail = 1 THEN
		SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,			
				h.no_purchase_order,
				case when h.no_purchase_order is null then 0 else 1 end as flag_po,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier, p.ref_status_name as nm_payment,
				s.id_supplier, d.number_asc, d.id_curr, d.id_item,h.subtotal+h.freight - ((h.subtotal +h.freight) * h.disc/100) as netto,d.id_unit,h.disc, d.qty, d.id_unit, d.price, d.nominal, d.notes as notes_detail,
				d.item_name, h.id_account, acc.account_name, f.qty_received, f.qty as qtypo,case when h.kurs is null then 1 else h.kurs end as kurs
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN trn_purchase_order_det f ON f.no_purchase_order = h.no_purchase_order and f.id_item = d.id_item
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			inner join mst_account acc on acc.id_account = h.id_account
			where h.no_purchase = var_criteria;
	ELSE
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Invoice No' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,CONCAT(s.address,' ',s.city) as addr_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier,
				p.ref_status_name as nm_payment, s.id_supplier, case when h.kurs is null then 1 else h.kurs end as kurs
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_purchase like filter
			ORDER BY h.date_trn desc, h.no_purchase_order desc;
		END IF;
		IF VAR_FIELD = 'Supplier' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,CONCAT(s.address,' ',s.city) as addr_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier,
				p.ref_status_name as nm_payment, s.id_supplier,case when h.kurs is null then 1 else h.kurs end as kurs
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE (s.first_name like filter or s.last_name like filter)
			ORDER BY h.date_trn desc, h.no_purchase_order desc;
		END IF;
	elseif var_date_filter = 1 THEN
		IF VAR_FIELD = 'Invoice No' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,CONCAT(s.address,' ',s.city) as addr_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier,
				p.ref_status_name as nm_payment, s.id_supplier,case when h.kurs is null then 1 else h.kurs end as kurs
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_purchase like filter 
			and (h.date_trn between startdate and enddate)
			ORDER BY h.date_trn desc, h.no_purchase_order desc;
		END IF;
		IF VAR_FIELD = 'Supplier' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,CONCAT(s.address,' ',s.city) as addr_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier,
				p.ref_status_name as nm_payment, s.id_supplier,case when h.kurs is null then 1 else h.kurs end as kurs
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE (s.first_name like filter or s.last_name like filter)
			and (h.date_trn between startdate and enddate)
			ORDER BY h.date_trn desc, h.no_purchase_order desc;
		END IF;
	end if;
	END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_purchase_2
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_purchase_2`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_purchase_2`(in var_field varchar(255), in var_criteria text, in detail integer)
BEGIN
	declare filter text;
	declare qty_retur double;
	select concat('%',var_criteria,'%') into filter;
	IF detail = 1 THEN
	
		
		SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,			
				h.no_purchase_order,
				case when h.no_purchase_order is null then 0 else 1 end as flag_po,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier, p.ref_status_name as nm_payment,
				s.id_supplier, d.number_asc, d.id_curr, d.id_item,h.subtotal+h.freight - ((h.subtotal +h.freight) * h.disc/100) as netto,d.id_unit,h.disc ,i.item_name, d.qty, d.id_unit, d.price, d.nominal, d.notes as notes_detail
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			where h.no_purchase = var_criteria
			order by d.number_asc;
	ELSE
		IF VAR_FIELD = 'detail' THEN
		
			SELECT
				h.no_purchase, 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				d.number_asc, d.id_item, i.item_name, d.notes as notes_detail, d.qty, d.id_unit,
				d.price, d.nominal, d.id_curr, h.payment_method, h.payment_term_days, 
				h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier, p.ref_status_name as nm_payment,
				s.id_supplier,h.disc
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_purchase = var_criteria 
			order by d.number_asc;
		END IF;
		IF VAR_FIELD = 'Invoice No' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,CONCAT(s.address,' ',s.city) as addr_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier,
				p.ref_status_name as nm_payment, s.id_supplier,h.disc,d.id_curr
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_purchase like filter;
		ELSEIF VAR_FIELD = 'Supplier' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,CONCAT(s.address,' ',s.city) as addr_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier,
				p.ref_status_name as nm_payment, s.id_supplier,h.disc,d.id_curr
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE CONCAT(s.first_name,' ',s.last_name) like filter;
		END IF;
		IF VAR_FIELD = 'A/P Payment' THEN
			select a.no_purchase, a.date_trn, a.purchase_amount, case when a.return_amount is null then 0 else a.return_amount end as return_amount,
case 
	when DATEDIFF((select now()),a.date_trn) <= b.disc_term_days 
	and case when a.balance is null then 0 else a.balance end  >= 0
	THEN round((b.disc_term_nominal * a.purchase_amount/100),0)
	else 0 end as disc, 
case 
	when DATEDIFF((select now()),a.date_trn) <= b.disc_term_days THEN a.purchase_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end - case when a.paid_amount is null then 0 else a.paid_amount end  
	else a.purchase_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.paid_amount is null then 0 else a.paid_amount end end as total, case when a.paid_amount is null then 0 else a.paid_amount end as paid_amount 
,case when b.kurs is null then 1 else b.kurs end as kurs, case when a.disc_amount is null then 0 else a.disc_amount end as diskon_bayar

from ap_status a
inner join trn_purchase_head b on b.no_purchase = a.no_purchase
where b.id_supplier = var_criteria AND  b.payment_method=2
and case 
	when DATEDIFF((select now()),a.date_trn) <= b.disc_term_days THEN a.purchase_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end - case when a.paid_amount is null then 0 else a.paid_amount end  
	else a.purchase_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.paid_amount is null then 0 else a.paid_amount end end <> 0;

			
		END IF;
	END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_purchase_kredit
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_purchase_kredit`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_purchase_kredit`(in var_field varchar(255), in var_criteria text, in detail integer)
BEGIN
	declare filter text;
	select concat('%',var_criteria,'%') into filter;
	IF detail = 1 THEN
		SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,			
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier, p.ref_status_name as nm_payment,
				s.id_supplier,h.disc
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id;
	ELSE
		IF VAR_FIELD = 'detail' THEN
			SELECT
				h.no_purchase, 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				d.number_asc, d.id_item, i.item_name, d.notes as notes_detail, d.qty, d.id_unit,
				d.price, d.nominal, d.id_curr, h.payment_method, h.payment_term_days, 
				h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier, p.ref_status_name as nm_payment,
				s.id_supplier,h.disc
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_purchase = var_criteria ;
		END IF;
		IF VAR_FIELD = 'Purchase No' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,CONCAT(s.address,' ',s.city) as addr_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier,
				p.ref_status_name as nm_payment, s.id_supplier,h.disc
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_purchase = var_criteria ;
		END IF;
		IF VAR_FIELD = 'A/P Payment' THEN
			SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,
				h.no_purchase_order,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier, p.ref_status_name as nm_payment,
				s.id_supplier,h.disc
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.id_supplier = var_criteria AND  h.payment_method=2;
		END IF;
	END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_purchase_order
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_purchase_order`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_purchase_order`(in var_field varchar(255), in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_customer,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_sales_order, a.date_trn, 
c.id_curr,a.notes,a.subtotal,a.tax,a.total as total_head,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty, c.price, (c.qty * c.price) as total 
 from trn_sales_order_head a
inner join mst_customer b on b.id_customer = a.id_customer
inner join trn_sales_order_det c on c.no_sales_order=a.no_sales_order
inner join mst_item f on f.id_item = c.id_item
where a.no_sales_order = var_criteria;
else

IF VAR_FIELD = 'SO No' THEN

select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
a.total,a.notes,a.id_customer,b.address
from trn_sales_order_head a
inner join mst_customer b on b.id_customer = a.id_customer
where a.no_sales_order like filter
order by a.date_trn desc, a.no_sales_order desc;	
elseif var_field = 'Date' THEN
select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
a.total,a.notes,a.id_customer, b.address  
from trn_sales_order_head a
inner join mst_customer b on b.id_customer = a.id_customer
	where a.date_trn = var_criteria
order by a.date_trn desc, a.no_sales_order desc;

elseif var_field = 'Customer Name' THEN
select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
a.total,a.notes,a.id_customer, b.address  
from trn_sales_order_head a
inner join mst_customer b on b.id_customer = a.id_customer
	where concat(b.first_name,' ',b.last_name) like filter
order by a.date_trn desc, a.no_sales_order desc;


end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_purchase_purchreturn
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_purchase_purchreturn`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_purchase_purchreturn`(in var_field varchar(255), in var_criteria text, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

		SELECT
				DISTINCT(h.no_purchase), 
				CONCAT(s.first_name,' ',s.last_name) as nm_supplier,			
				h.no_purchase_order,
				case when h.no_purchase_order is null then 0 else 1 end as flag_po,
				h.date_trn, h.subtotal, h.freight, h.tax, h.total, h.notes,
				h.payment_method, h.payment_term_days, h.disc_term_days,h.disc_term_nominal,
				CONCAT(s.address,' ',s.city) as addr_supplier, p.ref_status_name as nm_payment,
				s.id_supplier, d.number_asc, d.id_curr, d.id_item,h.subtotal - ((h.subtotal) * h.disc/100) as netto,d.id_unit,h.disc, d.qty, d.id_unit, d.price, d.nominal, d.notes as notes_detail,
				d.item_name, h.id_account, acc.account_name, f.qty_received, f.qty as qtypo,
				case when h.kurs is null then 1 else h.kurs end as kurs
			FROM
				trn_purchase_head h
			INNER JOIN trn_purchase_det d ON h.no_purchase = d.no_purchase
			INNER JOIN trn_purchase_order_det f ON f.no_purchase_order = h.no_purchase_order and f.id_item = d.id_item
			INNER JOIN mst_supplier s ON h.id_supplier =s.id_supplier
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			inner join mst_account acc on acc.id_account = h.id_account
			where h.no_purchase = var_criteria;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_purchase_return
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_purchase_return`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_purchase_return`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN
	declare filter text;
	select concat('%',var_criteria,'%') into filter;
IF detail = 1 THEN
	SELECT 
		(prh.no_purchase_return), prh.date_trn, prh.id_supplier, 
		CONCAT(ms.first_name,ms.last_name) as supplier_name, 
		CONCAT(ms.address,' ',ms.city) AS supplier_addr,
		prh.payment_method, rpm.ref_status_name, prh.notes,
		prh.subtotal, prh.freight, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes as notes_detail,
		prd.qty, mu.unit, prd.price, prd.nominal, prd.no_purchase,
		prd.id_curr,prh.disc,prd.id_curr,prd.qty_purch,prd.id_unit,
		case when prh.kurs is null then 1 else prh.kurs end as kurs, prh.id_warehouse
		FROM trn_purchase_return_head prh INNER JOIN trn_purchase_return_det prd ON
		prh.no_purchase_return= prd.no_purchase_return
		INNER JOIN mst_supplier ms ON prh.id_supplier =ms.id_supplier
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE prh.no_purchase_return =  var_criteria ;
ELSE
if var_date_filter = 0 then
	IF VAR_FIELD = 'detail' THEN
		SELECT 
		(prh.no_purchase_return), prh.date_trn, prh.id_supplier, 
		CONCAT(ms.first_name,ms.last_name) as supplier_name, 
		CONCAT(ms.address,' ',ms.city) AS supplier_addr,
		prh.payment_method, rpm.ref_status_name, prh.notes,
		prh.subtotal, prh.freight, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes as notes_detail,
		prd.qty, mu.unit, prd.price, prd.nominal, prd.no_purchase,
		prd.id_curr,prh.disc,prd.qty_purch,prd.id_unit,
		case when prh.kurs is null then 1 else prh.kurs end as kurs,prh.id_warehouse
		FROM trn_purchase_return_head prh INNER JOIN trn_purchase_return_det prd ON
		prh.no_purchase_return= prd.no_purchase_return 
		INNER JOIN mst_supplier ms ON prh.id_supplier =ms.id_supplier
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE prh.no_purchase_return =  var_criteria;
	ELSEIF VAR_FIELD = 'Return No' THEN
		SELECT 
		prh.no_purchase_return, prh.date_trn, prh.id_supplier, 
		CONCAT(ms.first_name,' ',ms.last_name) as supplier_name, 
		CONCAT(ms.address,' ',ms.city) AS supplier_addr,
		prh.payment_method, rpm.ref_status_name, prh.notes,
		prh.subtotal, prh.freight, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes,
		sum(prd.qty), mu.unit, sum(prd.price), sum(prd.nominal), prd.no_purchase,
    prh.disc, prh.id_warehouse
		FROM trn_purchase_return_head prh INNER JOIN trn_purchase_return_det prd ON
		prh.no_purchase_return= prd.no_purchase_return 
		INNER JOIN mst_supplier ms ON prh.id_supplier =ms.id_supplier
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE prh.no_purchase_return like filter
		group by prh.no_purchase_return
		order by prh.date_trn desc, prh.no_purchase_return desc;
	ELSEIF VAR_FIELD = 'Supplier' THEN
		SELECT 
		prh.no_purchase_return, prh.date_trn, prh.id_supplier, 
		CONCAT(ms.first_name,' ',ms.last_name) as supplier_name, 
		CONCAT(ms.address,' ',ms.city) AS supplier_addr,
		prh.payment_method, rpm.ref_status_name, prh.notes,
		prh.subtotal, prh.freight, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes,
		sum(prd.qty), mu.unit, sum(prd.price), sum(prd.nominal), prd.no_purchase,
    prh.disc, prh.id_warehouse
		FROM trn_purchase_return_head prh INNER JOIN trn_purchase_return_det prd ON
		prh.no_purchase_return= prd.no_purchase_return 
		INNER JOIN mst_supplier ms ON prh.id_supplier =ms.id_supplier
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE CONCAT(ms.first_name,ms.last_name) like filter
		group by prh.no_purchase_return
		order by prh.date_trn desc, prh.no_purchase_return desc;
	END IF;
ELSEIF var_date_filter = 1 THEN
	IF VAR_FIELD = 'Return No' THEN
		SELECT 
		prh.no_purchase_return, prh.date_trn, prh.id_supplier, 
		CONCAT(ms.first_name,' ',ms.last_name) as supplier_name, 
		CONCAT(ms.address,' ',ms.city) AS supplier_addr,
		prh.payment_method, rpm.ref_status_name, prh.notes,
		prh.subtotal, prh.freight, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes,
		sum(prd.qty), mu.unit, sum(prd.price), sum(prd.nominal), prd.no_purchase,
    prh.disc, prh.id_warehouse
		FROM trn_purchase_return_head prh INNER JOIN trn_purchase_return_det prd ON
		prh.no_purchase_return= prd.no_purchase_return 
		INNER JOIN mst_supplier ms ON prh.id_supplier =ms.id_supplier
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE prh.no_purchase_return like filter
		and (prh.date_trn between startdate and enddate)
		group by prh.no_purchase_return
		order by prh.date_trn desc, prh.no_purchase_return desc;
	ELSEIF VAR_FIELD = 'Supplier' THEN
		SELECT 
		prh.no_purchase_return, prh.date_trn, prh.id_supplier, 
		CONCAT(ms.first_name,' ',ms.last_name) as supplier_name, 
		CONCAT(ms.address,' ',ms.city) AS supplier_addr,
		prh.payment_method, rpm.ref_status_name, prh.notes,
		prh.subtotal, prh.freight, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes,
		sum(prd.qty), mu.unit, sum(prd.price), sum(prd.nominal), prd.no_purchase,
    prh.disc, prh.id_warehouse
		FROM trn_purchase_return_head prh INNER JOIN trn_purchase_return_det prd ON
		prh.no_purchase_return= prd.no_purchase_return 
		INNER JOIN mst_supplier ms ON prh.id_supplier =ms.id_supplier
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE CONCAT(ms.first_name,ms.last_name) like filter
		and (prh.date_trn between startdate and enddate)
		group by prh.no_purchase_return
		order by prh.date_trn desc, prh.no_purchase_return desc;
	END IF;
end if;
END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_received_order
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_received_order`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_received_order`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
declare total_approve integer;
declare total_item integer;
declare notes_approve text;

select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN

select a.id_supplier,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_received_order, a.date_trn,a.notes,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty,c.received_qty, a.no_purchase_order, d.qty as qty_po,c.id_warehouse, g.warehouse_name
 from trn_received_order_head a
inner join mst_supplier b on b.id_supplier = a.id_supplier
inner join trn_received_order_det c on c.no_received_order=a.no_received_order
inner join trn_purchase_order_det d on d.no_purchase_order = a.no_purchase_order and d.id_item=c.id_item
inner join mst_item f on f.id_item = c.id_item
inner join mst_warehouse g on g.id_warehouse = c.id_warehouse
where a.no_received_order = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'Received No' THEN
		select a.no_received_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_supplier, a.no_purchase_order
		from trn_received_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where a.no_received_order like filter
		order by a.date_trn desc, a.no_received_order desc;
	elseif VAR_FIELD = 'Supplier' THEN
		select a.no_received_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_supplier, a.no_purchase_order
		from trn_received_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where concat(b.first_name,' ',b.last_name) like filter
		order by a.date_trn desc, a.no_received_order desc;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'Received No' THEN
		select a.no_received_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_supplier, a.no_purchase_order
		from trn_received_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where a.no_received_order like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_received_order desc;
	elseif VAR_FIELD = 'Supplier' THEN
		select a.no_received_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn,a.notes,a.id_supplier, a.no_purchase_order
		from trn_received_order_head a
		inner join mst_supplier b on b.id_supplier = a.id_supplier
		where concat(b.first_name,' ',b.last_name) like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_received_order desc;
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_reconcile
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_reconcile`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_reconcile`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.no_reconcile, 
				 a.date_trn, 
				 b.amount_in,
				 b.amount_out,
				 case when a.notes is null then '' else a.notes end as notes_head,
				 b.notes,
				 b.id_account,
				 c.account_name,
				 a.id_account_bank,
				 a.balance_before,
				 a.reconcile,
				 a.balance_after,
				 a.id_currency,
				 a.kurs
	from trn_reconcile_head a
	inner join trn_reconcile_det b on b.no_reconcile = a.no_reconcile 
	inner join mst_account c on c.id_account = b.id_account
	where a.no_reconcile = var_criteria;
else

if var_date_filter = 0 then
IF VAR_FIELD = 'Reconcile No' THEN

	select a.no_reconcile, 
				 a.date_trn, 
				 case when a.notes is null then '' else a.notes end as notes_head,
				 a.reconcile
	from trn_reconcile_head a
	where a.no_reconcile like filter
	order by a.date_trn desc, a.no_reconcile desc;
	
elseif var_field = 'Notes' THEN

	select a.no_reconcile, 
				 a.date_trn, 
				 case when a.notes is null then '' else a.notes end as notes_head,
				 a.reconcile
	from trn_reconcile_head a
	where case when a.notes is null then '' else a.notes end like filter
	order by a.date_trn desc, a.no_reconcile desc;

end if;
elseif var_date_filter = 1 THEN
IF VAR_FIELD = 'Reconcile No' THEN

	select a.no_reconcile, 
				 a.date_trn, 
				 case when a.notes is null then '' else a.notes end as notes_head,
				 a.reconcile
	from trn_reconcile_head a
	where a.no_reconcile like filter
	and (a.date_trn between startdate and enddate)
	order by a.date_trn desc, a.no_reconcile desc;
	
elseif var_field = 'Notes' THEN

	select a.no_reconcile, 
				 a.date_trn, 
				 case when a.notes is null then '' else a.notes end as notes_head,
				 a.reconcile
	from trn_reconcile_head a
	where case when a.notes is null then '' else a.notes end like filter
	and (a.date_trn between startdate and enddate)
	order by a.date_trn desc, a.no_reconcile desc;

end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_ro
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_ro`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_ro`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
declare total_approve integer;
declare total_item integer;
declare notes_approve text;

select concat('%',var_criteria,'%') into filter;

select count(id_item) into total_approve from trn_request_order_det where case when flag_status is null then 0 else flag_status end = 1 and no_request_order = var_criteria;
select count(id_item) into total_item from trn_request_order_det where no_request_order = var_criteria;

if total_approve > 0 and total_approve < total_item THEN
	set notes_approve = 'Approve Sebagian';
elseif total_approve > 0 and total_approve = total_item THEN
	set notes_approve = 'Approve Seluruhnya';
elseif total_approve = 0 THEN
	set notes_approve = 'Belum di Approve';
end if;

if detail = 1 THEN

select a.no_request_order, a.date_trn,a.notes,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty,notes_approve,a.id_warehouse,a.date_required
 from trn_request_order_head a
inner join trn_request_order_det c on c.no_request_order=a.no_request_order
inner join mst_item f on f.id_item = c.id_item
where a.no_request_order = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'Requisition No' THEN
		select a.no_request_order, a.date_trn,a.notes,
		case when sum(case when f.approve_qty is null then 0 else f.approve_qty end) < 
							sum(case when f.qty is null then 0 else f.qty end) and sum(case when f.approve_qty is null then 0 else f.approve_qty end) > 0
							then 'Approve Sebagian'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 0 then 'Belum di Approve'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 
							sum(case when f.qty is null then 0 else f.qty end) then 'Sudah di Approve' end as notes_approve
		from trn_request_order_head a
		inner join trn_request_order_det f on f.no_request_order = a.no_request_order
		where a.no_request_order like filter
		group by a.no_request_order
		order by a.date_trn desc, a.no_request_order desc;
	elseif VAR_FIELD = 'Notes' THEN
		select a.no_request_order, a.date_trn,a.notes,
		case when sum(case when f.approve_qty is null then 0 else f.approve_qty end) < 
							sum(case when f.qty is null then 0 else f.qty end) and sum(case when f.approve_qty is null then 0 else f.approve_qty end) > 0
							then 'Approve Sebagian'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 0 then 'Belum di Approve'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 
							sum(case when f.qty is null then 0 else f.qty end) then 'Sudah di Approve' end as notes_approve
		from trn_request_order_head a
		inner join trn_request_order_det f on f.no_request_order = a.no_request_order
		where a.notes like filter
		group by a.no_request_order
		order by a.date_trn desc, a.no_request_order desc;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'Requisition No' THEN
		select a.no_request_order, a.date_trn,a.notes, 
		case when sum(case when f.approve_qty is null then 0 else f.approve_qty end) < 
							sum(case when f.qty is null then 0 else f.qty end) and sum(case when f.approve_qty is null then 0 else f.approve_qty end) <> 0 
							then 'Approve Sebagian'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 0 then 'Belum di Approve'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 
							sum(case when f.qty is null then 0 else f.qty end) then 'Sudah di Approve' end as notes_approve
		from trn_request_order_head a
		inner join trn_request_order_det f on f.no_request_order = a.no_request_order
		where a.no_request_order like filter
		and (a.date_trn between startdate and enddate)
		group by a.no_request_order
		order by a.date_trn desc, a.no_request_order desc;
	elseif VAR_FIELD = 'Notes' THEN
		select a.no_request_order, a.date_trn,a.notes, 
		case when sum(case when f.approve_qty is null then 0 else f.approve_qty end) < 
							sum(case when f.qty is null then 0 else f.qty end) and sum(case when f.approve_qty is null then 0 else f.approve_qty end) > 0 
							then 'Approve Sebagian'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 0 then 'Belum di Approve'
		when sum(case when f.approve_qty is null then 0 else f.approve_qty end) = 
							sum(case when f.qty is null then 0 else f.qty end) then 'Sudah di Approve' end as notes_approve
		from trn_request_order_head a
		inner join trn_request_order_det f on f.no_request_order = a.no_request_order
		where a.notes like filter
		and (a.date_trn between startdate and enddate)
		group by a.no_request_order
		order by a.date_trn desc, a.no_request_order desc;
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_ro_po
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_ro_po`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_ro_po`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
declare total_approve integer;
declare total_item integer;
declare notes_approve text;

select concat('%',var_criteria,'%') into filter;

select count(id_item) into total_approve from trn_request_order_det where flag_status = 1 and no_request_order = var_criteria;
select count(id_item) into total_item from trn_request_order_det where no_request_order = var_criteria;

if total_approve > 0 and total_approve < total_item THEN
	set notes_approve = 'Approve Sebagian';
elseif total_approve > 0 and total_approve = total_item THEN
	set notes_approve = 'Approve Seluruhnya';
elseif total_approve = 0 THEN
	set notes_approve = 'Belum di Approve';
end if;

if detail = 1 THEN

select a.id_supplier,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_request_order, a.date_trn,a.notes,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty,notes_approve 
 from trn_request_order_head a
inner join mst_supplier b on b.id_supplier = a.id_supplier
inner join trn_request_order_det c on c.no_request_order=a.no_request_order
inner join mst_item f on f.id_item = c.id_item
where a.no_request_order = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'No Permintaan' THEN
		select c.id_item, d.item_name, c.notes, c.approve_qty as qty, c.id_unit, 0, 0, c.no_request_order
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where a.id_supplier = var_criteria and c.flag_status=1 and case when c.flag_po is null then 0 else c.flag_po end = 0;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'No Permintaan' THEN
		select c.id_item, d.item_name, c.notes, c.approve_qty as qty, c.id_unit, 0, 0, c.no_request_order
		from trn_request_order_head a
		inner join trn_request_order_det c on c.no_request_order = a.no_request_order
		inner join mst_item d on d.id_item = c.id_item
		where a.id_supplier = var_criteria
		and (a.date_trn between startdate and enddate) and c.flag_status=1 and case when c.flag_po is null then 0 else c.flag_po end = 0;
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_sales
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_sales`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_sales`(in var_field varchar(255), in var_criteria text, in detail integer,in date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_customer,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_sales, a.date_trn, 
c.id_curr,a.notes,a.subtotal,a.tax,a.total as total_head,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty, c.price, (c.qty * c.price) as total, a.discount,a.discpay,a.termpaydisc,a.term,a.payment_method ,case when a.no_sales_order is null then a.id_customer else a.no_sales_order end no_sales_order,
a.id_account,acc.account_name,
case when a.kurs is null then 1 else a.kurs end as kurs
 from trn_sales_head a
inner join mst_customer b on b.id_customer = a.id_customer
inner join trn_sales_det c on c.no_sales=a.no_sales
inner join mst_item f on f.id_item = c.id_item
inner join mst_account acc on acc.id_account = a.id_account
where a.no_sales = var_criteria;
else

if date_filter = 0 then
IF VAR_FIELD = 'Invoice No' THEN

select a.no_sales, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, ((a.tax/100) * (a.subtotal - (a.discount/100 * a.subtotal))) as tax,
a.total,a.notes,a.id_customer,b.address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_sales_head a
inner join mst_customer b on b.id_customer = a.id_customer
where a.no_sales like filter
order by a.date_trn desc, a.no_sales desc;
elseif var_field = 'Customer' THEN
select a.no_sales, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, ((a.tax/100) * (a.subtotal - (a.discount/100 * a.subtotal))) as tax,
a.total,a.notes,a.id_customer,b.address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_sales_head a
inner join mst_customer b on b.id_customer = a.id_customer	
where concat(b.first_name,' ',b.last_name) like filter
order by a.date_trn desc, a.no_sales desc;
end if;
elseIF VAR_FIELD = 'Invoice No' THEN
select a.no_sales, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, ((a.tax/100) * (a.subtotal - (a.discount/100 * a.subtotal))) as tax,
a.total,a.notes,a.id_customer,b.address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_sales_head a
inner join mst_customer b on b.id_customer = a.id_customer
where a.no_sales like filter
and (date_trn between var_tgl_awal and var_tgl_akhir)
order by a.date_trn desc, a.no_sales desc;
elseif var_field = 'Customer' THEN
select a.no_sales, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, ((a.tax/100) * (a.subtotal - (a.discount/100 * a.subtotal))) as tax,
a.total,a.notes,a.id_customer,b.address,a.discount/100 * a.subtotal as discount,a.payment_method
from trn_sales_head a
inner join mst_customer b on b.id_customer = a.id_customer
where concat(b.first_name,' ',b.last_name) like filter
and (date_trn between var_tgl_awal and var_tgl_akhir) 
order by a.date_trn desc, a.no_sales desc;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_sales_2
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_sales_2`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_sales_2`(in var_field varchar(255), in var_criteria text, in detail integer)
BEGIN
	declare filter text;
	select concat('%',var_criteria,'%') into filter;
	IF detail = 1 THEN
		SELECT
				DISTINCT(h.no_sales), 
				CONCAT(s.first_name,' ',s.last_name) as nm_customer,			
				h.no_sales_order,
				h.date_trn, h.subtotal, h.discount, h.tax, h.total, h.notes,
				h.payment_method, h.term, h.termpaydisc,h.discount,
				CONCAT(s.address,' ',s.city) as addr_customer, p.ref_status_name as nm_payment,
				s.id_customer
			FROM
				trn_sales_head h
			INNER JOIN trn_sales_det d ON h.no_sales = d.no_sales
			INNER JOIN mst_customer s ON h.id_customer =s.id_customer
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id;
	ELSE
		IF VAR_FIELD = 'detail' THEN
			SELECT
				h.no_sales, 
				CONCAT(s.first_name,' ',s.last_name) as nm_customer,
				h.no_sales_order,
				h.date_trn, h.subtotal, h.discount, h.tax, h.total, h.notes,
				d.number_asc, d.id_item, i.item_name, d.notes as notes_detail, d.qty, d.id_unit,
				d.price, d.nominal, d.id_curr, h.payment_method, h.term, 
				h.termpaydisc,h.discpay,
				CONCAT(s.address,' ',s.city) as addr_customer, p.ref_status_name as nm_payment,
				s.id_customer
			FROM
				trn_sales_head h
			INNER JOIN trn_sales_det d ON h.no_sales = d.no_sales
			INNER JOIN mst_customer s ON h.id_customer =s.id_customer
			INNER JOIN mst_item i ON d.id_item =i.id_item
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			WHERE h.no_sales = var_criteria ;
		END IF;
		IF VAR_FIELD = 'Invoice No' THEN
			select distinct h.no_sales, 
				CONCAT(s.first_name,' ',s.last_name) as nm_customer,
				h.no_sales_order,
				h.date_trn, h.subtotal, h.discount,(h.discount/100*h.subtotal) as discount_nom, h.tax,
				h.tax/100 * (h.subtotal-(h.discount/100*h.subtotal)) as tax_nom , h.total, h.notes,
				h.payment_method, h.term, 
				h.termpaydisc,h.discpay,
				CONCAT(s.address,' ',s.city) as addr_customer, p.ref_status_name as nm_payment,
				s.id_customer,acc.account_name
			FROM
				trn_sales_head h
			INNER JOIN mst_customer s ON h.id_customer =s.id_customer
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			inner join mst_account acc on acc.id_account = h.id_account
			WHERE h.no_sales like filter ;
		ELSEIF VAR_FIELD = 'Customer' THEN
				select distinct h.no_sales, 
				CONCAT(s.first_name,' ',s.last_name) as nm_customer,
				h.no_sales_order,
				h.date_trn, h.subtotal, h.discount,(h.discount/100*h.subtotal) as discount_nom, h.tax,
				h.tax/100 * (h.subtotal-(h.discount/100*h.subtotal)) as tax_nom , h.total, h.notes,
				h.payment_method, h.term, 
				h.termpaydisc,h.discpay,
				CONCAT(s.address,' ',s.city) as addr_customer, p.ref_status_name as nm_payment,
				s.id_customer,acc.account_name
			FROM
				trn_sales_head h
			INNER JOIN mst_customer s ON h.id_customer =s.id_customer
			INNER JOIN ref_pay_method p ON h.payment_method=p.ref_status_id
			inner join mst_account acc on acc.id_account = h.id_account
			WHERE CONCAT(s.first_name,' ',s.last_name) like filter ;
		END IF;
		IF VAR_FIELD = 'A/R Payment' THEN

select a.no_sales, a.date_trn, a.sales_amount, case when a.return_amount is null then 0 else a.return_amount end as return_amount,
case 
	when DATEDIFF((select now()),a.date_trn) <= b.termpaydisc THEN round((b.discpay * a.sales_amount/100),0)
	else 0 end as disc, 
case 
	when DATEDIFF((select now()),a.date_trn) <= b.termpaydisc THEN a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end - case when a.paid_amount is null then 0 else a.paid_amount end  
	else a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.paid_amount is null then 0 else a.paid_amount end end as total, case when a.paid_amount is null then 0 else a.paid_amount end as paid_amount,
case when b.kurs is null then 1 else b.kurs end as kurs, case when a.disc_amount is null then 0 else a.disc_amount end as diskon_bayar
from ar_status a
inner join trn_sales_head b on b.no_sales = a.no_sales
where b.id_customer = var_criteria AND  b.payment_method=2
and case 
	when DATEDIFF((select now()),a.date_trn) <= b.termpaydisc THEN a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end - case when a.paid_amount is null then 0 else a.paid_amount end  
	else a.sales_amount - case when a.return_amount is null then 0 else a.return_amount end - case when a.paid_amount is null then 0 else a.paid_amount end end <> 0;

			
		END IF;
	END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_sales_order
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_sales_order`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_sales_order`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_customer,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_sales_order, a.date_trn, 
c.id_curr,a.notes,a.subtotal,a.tax,a.total as total_head,
c.number_asc,c.id_item,c.id_unit,f.item_name, c.notes as description, 
c.qty, c.price, (c.qty * c.price) as total, 
case when a.kurs is null then 1 else a.kurs end as kurs, id_employee,
case when a.discount is null then 0 else a.discount end as discount,
a.nett_total,
case when a.is_discbrand is null then 0 else a.is_discbrand end as is_discbrand,
case when a.is_disctype is null then 0 else a.is_disctype end as is_disctype,
case when a.is_disccat is null then 0 else a.is_disccat end as is_disccat,
case when a.is_discitem is null then 0 else a.is_discitem end as is_discitem,
c.id_type as id_type_disc, c.id_category as id_cat_disc, c.id_brand as id_brand_disc
 from trn_sales_order_head a
inner join mst_customer b on b.id_customer = a.id_customer
inner join trn_sales_order_det c on c.no_sales_order=a.no_sales_order
inner join mst_item f on f.id_item = c.id_item
where a.no_sales_order = var_criteria;

elseif detail = 2 THEN
select * from trn_so_discbrand_det
where no_sales_order = var_criteria;

elseif detail = 3 THEN
select * from trn_so_disctype_det
where no_sales_order = var_criteria;

elseif detail = 4 THEN
select * from trn_so_disccat_det
where no_sales_order = var_criteria;

elseif detail = 5 THEN
select * from trn_so_discitem_det
where no_sales_order = var_criteria;


elseif detail = 0 then
if var_date_filter = 0 then
	IF VAR_FIELD = 'SO No' THEN
		select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
		a.total,a.notes,a.id_customer,b.address
		from trn_sales_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.no_sales_order like filter
		order by a.date_trn desc, a.no_sales_order desc;
	elseif var_field = 'Customer' THEN
		select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
		a.total,a.notes,a.id_customer, b.address  
		from trn_sales_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where concat(b.first_name,' ',b.last_name) like filter
		order by a.date_trn desc, a.no_sales_order desc;
	end if;
elseif var_date_filter = 1 THEN
	IF VAR_FIELD = 'SO No' THEN
		select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
		a.total,a.notes,a.id_customer,b.address
		from trn_sales_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.no_sales_order like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_sales_order desc;
	elseif var_field = 'Customer' THEN
		select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
		a.total,a.notes,a.id_customer, b.address  
		from trn_sales_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where concat(b.first_name,' ',b.last_name) like filter
		and (a.date_trn between startdate and enddate)
		order by a.date_trn desc, a.no_sales_order desc;
	end if;
end if;

elseif detail = 8 THEN
IF VAR_FIELD = 'SO No' THEN
		select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
		a.total,a.notes,a.id_customer,b.address
		from trn_sales_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.no_sales_order like filter and 
		case when a.flag_status_invoice is null then 0 else a.flag_status_invoice end = 0;
	elseif var_field = 'Customer' THEN
		select a.no_sales_order, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.tax/100) * a.subtotal as tax,
		a.total,a.notes,a.id_customer, b.address  
		from trn_sales_order_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		
		where concat(b.first_name,' ',b.last_name) like filter AND
		case when a.flag_status_invoice is null then 0 else a.flag_status_invoice end = 0;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_sales_return
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_sales_return`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_sales_return`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN
	declare filter text;
	select concat('%',var_criteria,'%') into filter;
IF detail = 1 THEN
	SELECT 
	DISTINCT(prh.no_sales_return), prh.date_trn, prh.id_customer, 
	CONCAT(ms.first_name,' ',ms.last_name) as customer_name, 
	CONCAT(ms.address,' ',ms.city) AS customer_addr,
	prh.payment_method, rpm.ref_status_name, prh.`notes`,
	prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales,prh.id_warehouse
	FROM trn_sales_return_head prh INNER JOIN trn_sales_return_det prd ON
	prh.no_sales_return= prd.no_sales_return 
	INNER JOIN mst_customer ms ON prh.id_customer =ms.id_customer
	INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method;
ELSE
if var_date_filter = 0 then
	IF VAR_FIELD = 'detail' THEN
		SELECT 
		(prh.no_sales_return), prh.date_trn, prh.id_customer, 
		CONCAT(ms.first_name,' ',ms.last_name) as customer_name, 
		CONCAT(ms.address,' ',ms.city) AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total,
		prd.number_asc, prd.id_item, msi.item_name, prd.notes as notes_detail,
		prd.qty, prd.id_unit as unit, prd.price, prd.nominal, prd.no_sales,
		prd.id_curr, case when prh.kurs is null then 1 else prh.kurs end as kurs, prh.id_warehouse
		FROM trn_sales_return_head prh INNER JOIN trn_sales_return_det prd ON
		prh.no_sales_return= prd.no_sales_return 
		INNER JOIN mst_customer ms ON prh.id_customer =ms.id_customer
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		INNER JOIN mst_item msi ON prd.id_item =msi.id_item
		INNER JOIN mst_unit mu ON prd.id_unit=mu.id_unit
		WHERE prh.no_sales_return =  var_criteria ;

	ELSEIF VAR_FIELD = 'Return No' THEN
		SELECT distinct
		(prh.no_sales_return), prh.date_trn, prh.id_customer, 
		CONCAT(ms.first_name,' ',ms.last_name) as customer_name, 
		CONCAT(ms.address,' ',ms.city) AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales, prh.id_warehouse
		FROM trn_sales_return_head prh inner join trn_sales_return_det prd on prd.no_sales_return = prh.no_sales_return
		INNER JOIN mst_customer ms ON prh.id_customer =ms.id_customer
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE prh.no_sales_return like filter
		order by prh.date_trn desc, prh.no_sales_return desc;
	ELSEIF VAR_FIELD = 'Customer' THEN
		SELECT distinct
		(prh.no_sales_return), prh.date_trn, prh.id_customer, 
		CONCAT(ms.first_name,' ',ms.last_name) as customer_name, 
		CONCAT(ms.address,' ',ms.city) AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales, prh.id_warehouse
		FROM trn_sales_return_head prh inner join trn_sales_return_det prd on prd.no_sales_return = prh.no_sales_return
		INNER JOIN mst_customer ms ON prh.id_customer =ms.id_customer
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE CONCAT(ms.first_name,ms.last_name) like filter
		order by prh.date_trn desc, prh.no_sales_return desc;
	END IF;
elseif var_date_filter = 1 THEN
IF VAR_FIELD = 'Return No' THEN
		SELECT distinct
		(prh.no_sales_return), prh.date_trn, prh.id_customer, 
		CONCAT(ms.first_name,' ',ms.last_name) as customer_name, 
		CONCAT(ms.address,' ',ms.city) AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total, prd.no_sales, prh.id_warehouse
		FROM trn_sales_return_head prh inner join trn_sales_return_det prd on prd.no_sales_return = prh.no_sales_return
		INNER JOIN mst_customer ms ON prh.id_customer =ms.id_customer
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE prh.no_sales_return like filter
		and (prh.date_trn between startdate and enddate)
		order by prh.date_trn desc, prh.no_sales_return desc;
	ELSEIF VAR_FIELD = 'Customer' THEN
		SELECT 
		(prh.no_sales_return), prh.date_trn, prh.id_customer, 
		CONCAT(ms.first_name,' ',ms.last_name) as customer_name, 
		CONCAT(ms.address,' ',ms.city) AS customer_addr,
		prh.payment_method, rpm.ref_status_name, prh.`notes`,
		prh.subtotal, prh.disc, prh.tax, prh.total,prd.no_sales, prh.id_warehouse
		FROM trn_sales_return_head prh 
		INNER JOIN mst_customer ms ON prh.id_customer =ms.id_customer
		INNER JOIN ref_pay_method rpm ON rpm.ref_status_id=prh.payment_method
		WHERE CONCAT(ms.first_name,ms.last_name) like filter
		and (prh.date_trn between startdate and enddate)
		order by prh.date_trn desc, prh.no_sales_return desc;
	END IF;
end if;
END IF;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_sales_service
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_sales_service`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_sales_service`(in var_field varchar(255), in var_criteria text, in detail integer, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	
select b.id_customer,concat(b.first_name,' ',b.last_name) as nama,
b.address,a.no_service, a.date_trn, 
a.payment_method,c.id_curr,c.number_asc,c.id_service, e.service_name, 
c.qty, c.price, (c.qty * c.price) as total, c.id_employee, a.notes, 
a.subtotal, a.discount, (a.subtotal - (a.discount/100 * a.subtotal)) as netto, 
a.tax, a.total as total_head
 from trn_service_head a
inner join mst_customer b on b.id_customer = a.id_customer
inner join trn_service_det c on c.no_service=a.no_service
inner join mst_service e on e.id_service=c.id_service
where a.no_service = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'No Penjualan Jasa' THEN
		select a.no_service, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.discount/100) * a.subtotal,a.tax/100 * (a.subtotal-((a.discount/100) * a.subtotal)), a.total,a.notes  from trn_service_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.no_service like filter;
	elseif var_field = 'Customer' THEN
		select a.no_service, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.discount/100) * a.subtotal,a.tax/100 * (a.subtotal-((a.discount/100) * a.subtotal)), a.total,a.notes  from trn_service_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		
		where concat(b.first_name,' ',b.last_name) like filter;
	end if;
elseif var_date_filter = 1 THEN
	IF VAR_FIELD = 'No Penjualan Jasa' THEN
		select a.no_service, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.discount/100) * a.subtotal,a.tax/100 * (a.subtotal-((a.discount/100) * a.subtotal)), a.total,a.notes  from trn_service_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		where a.no_service like filter
		and (a.date_trn between startdate and enddate);
	elseif var_field = 'Date' THEN
		select a.no_service, concat(b.first_name,' ',b.last_name) as nama, a.date_trn, a.subtotal, (a.discount/100) * a.subtotal,a.tax/100 * (a.subtotal-((a.discount/100) * a.subtotal)), a.total,a.notes  from trn_service_head a
		inner join mst_customer b on b.id_customer = a.id_customer
		
		where concat(b.first_name,' ',b.last_name) like filter
		and (a.date_trn between startdate and enddate);
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_service
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_service`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_service`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select a.id_service,
		a.service_name,
		a.id_account,
		b.account_name,
		a.price,
		a.senior_commission,
		a.junior_commission
  from mst_service a
	inner join mst_account b on b.id_account = a.id_account 
	where id_service = var_criteria;
else
if var_date_filter = 0 then
	IF VAR_FIELD = 'ID Service' THEN
		SELECT id_service, service_name, price 
		FROM mst_service where id_service like filter;
	elseif var_field = 'Jenis Service' THEN
		SELECT id_service, service_name, price 
		FROM mst_service where service_name like filter;
	end if;
ELSEif var_date_filter = 1 THEN
IF VAR_FIELD = 'ID Service' THEN
		SELECT id_service, service_name, price 
		FROM mst_service where id_service like filter
		and (created_date between startdate and enddate);
	elseif var_field = 'Jenis Service' THEN
		SELECT id_service, service_name, price 
		FROM mst_service where service_name like filter
		and (created_date between startdate and enddate);
	end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_simulasi_penyusutan
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_simulasi_penyusutan`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_simulasi_penyusutan`(in var_id_golongan varchar(30), in var_nilai_perolehan double, in var_tgl_perolehan date)
BEGIN
declare var_masa_penyusutan double;
declare var_masa_manfaat double;
declare var_th_penyusutan double;
declare var_rate_penyusutan double;
declare var_sisa_nilai_buku double;
declare var_total_penyusutan double;
declare var_tgl_server date;
declare var_bln_server double;
declare var_th_server double;


set var_tgl_server = (select now());
set var_bln_server = month(var_tgl_server);
set var_th_server = year(var_tgl_server);

select rate_penyusutan into var_rate_penyusutan from mst_golaset where id_golongan = var_id_golongan;
select masa_manfaat into var_masa_manfaat from mst_golaset where id_golongan = var_id_golongan;

if var_th_server = year(var_tgl_perolehan) THEN
		set var_masa_penyusutan = MONTH(var_tgl_server) - month(var_tgl_perolehan);
elseif var_th_server > year(var_tgl_perolehan) THEN
		if var_bln_server > month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = (var_th_penyusutan * 12) + var_bln_server - month(var_tgl_perolehan);
		elseif var_bln_server < month(var_tgl_perolehan) then 
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan)) -1;
			set var_masa_penyusutan = (var_th_penyusutan * 12) + 12 - (month(var_tgl_perolehan)) + var_bln_server;
		elseif var_bln_server = month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = var_th_penyusutan * 12;
		end if;
ELSE
		set var_masa_penyusutan = 0;
end if;

set var_sisa_nilai_buku = var_nilai_perolehan - (var_nilai_perolehan * var_rate_penyusutan/100/12 * var_masa_penyusutan);
set var_total_penyusutan = var_nilai_perolehan * var_rate_penyusutan/100/12 * var_masa_penyusutan;

select var_nilai_perolehan as harga_perolehan, var_masa_manfaat as masa_manfaat, concat(var_rate_penyusutan,' %') as rate_depr_th, concat(var_masa_penyusutan,' Bulan') as masa_penyusutan, var_rate_penyusutan/100 * var_nilai_perolehan as depr_th,
var_total_penyusutan as akumulasi_penyusutan, var_sisa_nilai_buku as nilai_buku;



END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_so_do
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_so_do`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_so_do`(in var_field varchar(255), in var_criteria text, in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if var_date_filter = 0 then
	IF VAR_FIELD = 'No SO' THEN
		select c.id_item, d.item_name, '', c.qty, c.id_unit, 
		0, 0
		from trn_sales_order_head a
		inner join trn_sales_order_det c on c.no_sales_order = a.no_sales_order
		inner join mst_item d on d.id_item = c.id_item
		where a.no_sales_order = var_criteria;
	end if;
elseif var_date_filter = 1 then
	IF VAR_FIELD = 'No SO' THEN
		select c.id_item, d.item_name, '', c.qty, c.id_unit, 
		0, 0
		from trn_sales_order_head a
		inner join trn_sales_order_det c on c.no_sales_order = a.no_sales_order
		inner join mst_item d on d.id_item = c.id_item
		where a.no_sales_order = var_criteria
		and (a.date_trn between startdate and enddate);
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_supplier
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_supplier`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_supplier`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select * from mst_supplier where id_supplier = var_criteria;
else
if var_date_filter = 0 then 
IF VAR_FIELD = 'Supplier ID' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where id_supplier like filter;

elseif var_field = 'First Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where first_name like filter;

elseif var_field = 'Last Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where last_name like filter;

elseif var_field = 'City' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where city like filter;
end if;
elseif var_date_filter = 1 THEN
IF VAR_FIELD = 'Supplier ID' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where id_supplier like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'First Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where first_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'Last Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where last_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'City' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where city like filter
and (created_date between var_tgl_awal and var_tgl_akhir);
end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_supplier_list
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_supplier_list`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_supplier_list`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select * from mst_supplier where id_supplier = var_criteria;
else
if var_date_filter = 0 then 
IF VAR_FIELD = 'Supplier ID' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where id_supplier like filter;

elseif var_field = 'Supplier Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where concat(a.first_name, ' ', a.last_name) like filter;

elseif var_field = 'Last Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where last_name like filter;

elseif var_field = 'City' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where city like filter;
end if;
elseif var_date_filter = 1 THEN
IF VAR_FIELD = 'Supplier ID' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where id_supplier like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'First Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where first_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'Last Name' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where last_name like filter
and (created_date between var_tgl_awal and var_tgl_akhir);

elseif var_field = 'City' THEN

SELECT
	concat(a.first_name, ' ', a.last_name) AS NAME,
	a.id_supplier,
	concat(
		a.phone1,
		', ',
		a.phone2,
		', ',
		a.phone3
	) AS phone,
	a.address, 
	a.city
FROM
	mst_supplier a

where city like filter
and (created_date between var_tgl_awal and var_tgl_akhir);
end if;
end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_transfer_stock
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_transfer_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_transfer_stock`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer, in startdate date, in enddate date)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select 
		a.no_tranfer_stock,
		a.id_warehouse_from,
		a.id_warehouse_to,
		a.date_trn,a.notes,c.id_item,d.item_name,c.notes as notes_det,c.qty,c.unit,
		case when a.notes is null then '' else a.notes end notes  
	from trn_transfer_stock_head a
	inner join trn_transfer_stock_det c on c.no_tranfer_stock = a.no_tranfer_stock
	inner join mst_item d on d.id_item = c.id_item
	where a.no_tranfer_stock = var_criteria;
else
	if var_date_filter = 0 then
		IF VAR_FIELD = 'Stock Transfer No' THEN
			select 
			a.no_tranfer_stock,
			b.warehouse_name,
			a.date_trn,sum(z.qty) as qty,
			case when a.notes is null then '' else a.notes end notes  
			from trn_transfer_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse_from
			inner join trn_transfer_stock_det z on z.no_tranfer_stock = a.no_tranfer_stock
			where a.no_tranfer_stock like filter;	
		elseif var_field = 'Warehouse' THEN
			select 
			a.no_tranfer_stock,
			b.warehouse_name,
			a.date_trn,sum(z.qty) as qty,
			case when a.notes is null then '' else a.notes end notes  
			from trn_transfer_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse_from
			inner join trn_transfer_stock_det z on z.no_tranfer_stock = a.no_tranfer_stock
			where b.warehouse_name like filter;
		end if;
	elseif var_date_filter = 1 THEN
		IF VAR_FIELD = 'Stock Transfer No' THEN
			select 
			a.no_tranfer_stock,
			b.warehouse_name,
			a.date_trn,sum(z.qty) as qty,
			case when a.notes is null then '' else a.notes end notes  
			from trn_transfer_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse_from
			inner join trn_transfer_stock_det z on z.no_tranfer_stock = a.no_tranfer_stock
			where a.no_adjust_stock like filter
			and (a.date_trn between startdate and enddate);
		elseif var_field = 'Warehouse' THEN
			select 
			a.no_tranfer_stock,
			b.warehouse_name,
			a.date_trn,sum(z.qty) as qty,
			case when a.notes is null then '' else a.notes end notes  
			from trn_transfer_stock_head a
			inner join mst_warehouse b on b.id_warehouse = a.id_warehouse_from
			inner join trn_transfer_stock_det z on z.no_tranfer_stock = a.no_tranfer_stock
			where b.warehouse_name like filter	
			and (a.date_trn between startdate and enddate);
		end if;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_unit
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_unit`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_unit`(in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select id_unit, unit, notes, flag_default
  from mst_unit
	where id_unit = var_criteria;
elseif detail = 0 then
	select id_unit, unit, notes
  from mst_unit;
elseif detail = 2 then
select a.id_unit, a.unit,case when b.qty is null then 0 else b.qty end as qty, 
(select id_unit from mst_setunit where qty = 1 and id_item = var_criteria) as defunit,
a.notes, case when b.id_item is null then 'false' else 'true' end as pilih
 from mst_unit a 
left join (select * from mst_setunit where id_item = var_criteria) b on b.id_unit = a.id_unit
left join (select id_item from mst_item where id_item = var_criteria) c on c.id_item = b.id_item;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for select_warehouse
-- ----------------------------
DROP PROCEDURE IF EXISTS `select_warehouse`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_warehouse`(in var_criteria text, in detail integer)
BEGIN

declare filter text;
select concat('%',var_criteria,'%') into filter;

if detail = 1 THEN
	select id_warehouse,
warehouse_name,
case when qty_max is null then 0 else qty_max end as qty_max,
case when unit_max is null then '' else unit_max end as unit_max,
case when address is null then '' else address end as address,
case when phone is null then '' else phone end as phone,
case when city is null then '' else city end as city,
case when notes is null then '' else notes end as notes,
flag_nonactive,
created_user, case when a.is_outlet is null then 0 else a.is_outlet end as is_outlet
  from mst_warehouse a
	where id_warehouse = var_criteria;
elseif detail = 0 then
	select id_warehouse,warehouse_name,qty_max,city,phone
  from mst_warehouse;
end if;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_account
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_account`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_account`(in var_id_account varchar(25), in var_account_name varchar(60),in var_parent varchar(25),in var_flag_active integer,in var_flag_header integer, in var_is_income integer,in var_is_balance_sheet integer, in var_notes  text, in var_modified_user varchar(120),in var_created_date datetime,in var_modified_date datetime, in var_created_user varchar(120),in  transid varchar(60), in var_def_position varchar(120), in var_beg_balance double, in var_golongan integer)
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_account
SET account_name = var_account_name,
 parent = var_parent,
 flag_active = var_flag_active,
 flag_header = var_flag_header,
 is_income = var_is_income,
 is_balance_sheet = var_is_balance_sheet,
 def_position = var_def_position,
 notes = var_notes,
 modified_user = var_modified_user,
 created_date = var_created_date,
 modified_date = var_modified_date,
 created_user = var_created_user,
 beg_balance = var_beg_balance,
 golongan = var_golongan
WHERE
	id_account = var_id_account;
END;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	INSERT INTO mst_account (
		id_account,
		account_name,
		parent,
		flag_active,
		flag_header,
		is_income,
		is_balance_sheet,
		def_position,
		notes,
		modified_user,
		created_date,
		modified_date,
		created_user,
		beg_balance,
		golongan
	)
VALUES
	(
		var_id_account,
		var_account_name,
		var_parent,
		var_flag_active,
		var_flag_header,
		var_is_income,
		var_is_balance_sheet,
		var_def_position,
		var_notes,
		var_modified_user,
		var_created_date,
		var_modified_date,
		var_created_user,
		var_beg_balance,
		var_golongan
	);


END;


ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_account
WHERE
	id_account = var_id_account;


END;


END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_account_setmanufacture
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_account_setmanufacture`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_account_setmanufacture`(in var_period integer, in var_year integer, in var_created_date date, in var_lang int)
BEGIN

delete from i_set_account_def;
delete from mst_account;

if var_lang = 1 then
	insert into mst_account 
	select * from mst_account_setmanufacture_id;
end if;

if var_lang = 2 then
	insert into mst_account 
	select * from mst_account_setmanufacture_int;
end if;


insert into i_set_account_def 
select * from i_set_account_def_manufacture;


insert into i_accounting_period ( 
periode, 
year,
last_closed_date,
lock_status) 
values (
var_period,
var_year,
var_created_date,
0
);

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_account_setretail
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_account_setretail`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_account_setretail`(in var_period integer, in var_year integer, in var_created_date date,in var_lang integer)
BEGIN
delete from i_set_account_def;
delete from mst_account;

if var_lang = 1 then
	insert into mst_account 
	select * from mst_account_setretail_id;
end if;

if var_lang = 2 then
	insert into mst_account 
	select * from mst_account_setretail_int;
end if;


insert into i_set_account_def 
select * from i_set_account_def_retail;
insert into i_accounting_period ( 
periode, 
year,
last_closed_date,
lock_status) 
values (
var_period,
var_year,
var_created_date,
0
);

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_akses_setmanufacture
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_akses_setmanufacture`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_akses_setmanufacture`()
BEGIN
delete from i_hakakses;
delete from i_templatehakakses;

insert into i_templatehakakses 
select * from i_templatehakakses_setmanufacture;

insert into i_hakakses
select parentkey, childkey, 'admin' from i_templatehakakses;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_akses_setretail
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_akses_setretail`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_akses_setretail`()
BEGIN
delete from i_hakakses;
delete from i_templatehakakses;

insert into i_templatehakakses 
select * from i_templatehakakses_setretail;

insert into i_hakakses
select parentkey, childkey, 'admin' from i_templatehakakses;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_approve_ro
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_approve_ro`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approve_ro`(in var_no_request_order varchar(30), in var_id_item varchar(30), in var_date date, in var_qty int)
BEGIN
declare qty_sisa_sebelumnya INTEGER;
select case when approve_qty is null then 0 else approve_qty end into qty_sisa_sebelumnya from trn_request_order_det
where no_request_order = var_no_request_order and id_item = var_id_item;

	update trn_request_order_det set flag_status = 1, 
	approve_date = var_date, approve_qty = qty_sisa_sebelumnya + var_qty where no_request_order = var_no_request_order and id_item = var_id_item;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_ap_initbalance
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_ap_initbalance`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ap_initbalance`(in var_cutoff_date datetime, in var_invoice_no varchar(60), in var_id_supplier varchar(30), in var_amount_of double, in var_notes text, in var_modified_user varchar(120),in var_created_date datetime, in var_modified_date datetime,in var_created_user varchar(120), transid varchar(60), in amount_before double)
BEGIN
declare var_id_account varchar(30);

IF TRANSID = 'UPDATE' THEN
	BEGIN
		UPDATE mst_ap_initialbalance
		SET 
			cutoff_date= var_cutoff_date,
			invoice_no = var_invoice_no,
			amount_of = var_amount_of,
			notes= var_notes,
			modified_user = var_modified_user,
			created_date = var_created_date,
			modified_date = var_modified_date,
			created_user = var_created_user
		WHERE
			invoice_no = var_invoice_no;

		UPDATE ap_status
		SET 
			date_trn = var_cutoff_date,
			id_supplier = var_id_supplier,
			purchase_amount = var_amount_of,
			return_amount = 0,
			disc_amount = 0,
			paid_amount = 0,
			balance = 0,
			notes = var_notes
		WHERE
			no_purchase = var_invoice_no;


		update mst_supplier set ap_balance = ap_balance-amount_before + var_amount_of where id_supplier = var_id_supplier;

		

	END;
ELSEIF TRANSID = 'INSERT' THEN
BEGIN
	INSERT INTO mst_ap_initialbalance (
		cutoff_date,
		invoice_no,
		id_supplier,
		amount_of,
		notes,
		modified_user,
		created_date,
		modified_date,
		created_user
	)
VALUES
	(
		var_cutoff_date,
		var_invoice_no,
		var_id_supplier,
		var_amount_of,
		var_notes,
		var_modified_user,
		var_created_date,
		var_modified_date,
		var_created_user
	);

insert into ap_status (
	no_purchase,
	date_trn,
	id_supplier,
	purchase_amount,
	return_amount,
	disc_amount,
	paid_amount,
	balance,
	notes
)
values (
	var_invoice_no,
	var_cutoff_date,
	var_id_supplier,
	var_amount_of,
	0,
	0,
	0,	
	0,
	var_notes
);

	update mst_supplier set ap_balance = ap_balance + var_amount_of where id_supplier = var_id_supplier;

	


END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_ap_initialbalance
WHERE
	invoice_no = var_invoice_no;

	DELETE
FROM
	ap_status
WHERE
	no_purchase = var_invoice_no;

update mst_supplier set ap_balance = ap_balance - amount_before where id_supplier = var_id_supplier;



END;



END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_ar_initbalance
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_ar_initbalance`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ar_initbalance`(in var_cutoff_date datetime, in var_invoice_no varchar(60), in var_id_customer varchar(30), in var_amount_of double, in var_notes text, in var_modified_user varchar(120),in var_created_date datetime, in var_modified_date datetime,in var_created_user varchar(120), transid varchar(60), in amount_before double)
BEGIN
declare var_id_account varchar(30);

IF TRANSID = 'UPDATE' THEN
	BEGIN
		UPDATE mst_ar_initialbalance
		SET 
			cutoff_date= var_cutoff_date,
			invoice_no = var_invoice_no,
			amount_of = var_amount_of,
			notes= var_notes,
			modified_user = var_modified_user,
			created_date = var_created_date,
			modified_date = var_modified_date,
			created_user = var_created_user
		WHERE
			invoice_no = var_invoice_no;

		UPDATE ar_status
		SET 
			date_trn = var_cutoff_date,
			id_customer = var_id_customer,
			sales_amount = var_amount_of,
			return_amount = 0,
			disc_amount = 0,
			paid_amount = 0,
			balance = 0,
			notes = var_notes
		WHERE
			no_sales = var_invoice_no;

update mst_customer set ar_balance = ar_balance - amount_before + var_amount_of where id_customer = var_id_customer;

	

	END;
ELSEIF TRANSID = 'INSERT' THEN
BEGIN
	INSERT INTO mst_ar_initialbalance (
		cutoff_date,
		invoice_no,
		id_customer,
		amount_of,
		notes,
		modified_user,
		created_date,
		modified_date,
		created_user
	)
VALUES
	(
		var_cutoff_date,
		var_invoice_no,
		var_id_customer,
		var_amount_of,
		var_notes,
		var_modified_user,
		var_created_date,
		var_modified_date,
		var_created_user
	);

insert into ar_status (
	no_sales,
	date_trn,
	id_customer,
	sales_amount,
	return_amount,
	disc_amount,
	paid_amount,
	balance,
	notes
)
values (
	var_invoice_no,
	var_cutoff_date,
	var_id_customer,
	var_amount_of,
	0,
	0,
	0,	
	0,
	var_notes
);

update mst_customer set ar_balance = ar_balance + var_amount_of where id_customer = var_id_customer;

	
END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_ar_initialbalance
WHERE
	invoice_no = var_invoice_no;

	DELETE
FROM
	ar_status
WHERE
	no_sales = var_invoice_no;

update mst_customer set ar_balance = ar_balance - amount_before where id_customer = var_id_customer;




END;



END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_aset_beli
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_aset_beli`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_aset_beli`(in var_id_asetmasuk varchar(60), in var_date_trn date, in var_notes text, in var_created_date date, in var_modified_date date, in var_created_user varchar(30),in var_modified_user varchar(30), in var_id_aset varchar(30), in var_qty double, in var_id_satuan varchar(30), in var_ket text, in varloop integer, in transid varchar(120))
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_asetmasuk_det where id_asetmasuk = var_id_asetmasuk;
		delete from trn_asetmasuk_head where id_asetmasuk = var_id_asetmasuk;
		
		insert into trn_asetmasuk_head(
			 id_asetmasuk,
			 date_trn,
			 notes,
			 created_date,
			 modified_date,
			 created_user,
			 modified_user
			)
		values(
			 var_id_asetmasuk,
			 var_date_trn,
			 var_notes,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_modified_user
			);

	elseif var_detail = 1 THEN
		
		insert into trn_asetmasuk_det 
			(id_asetmasuk,
			 id_aset,
			 qty,
			 id_satuan,
			 ket
			)
		values (
			 var_id_asetmasuk,
			 var_id_aset,
			 var_qty,
			 var_id_satuan,
			 var_ket
			);
		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_asetmasuk_head(
			 id_asetmasuk,
			 date_trn,
			 notes,
			 created_date,
			 modified_date,
			 created_user,
			 modified_user
			)
		values(
			 var_id_asetmasuk,
			 var_date_trn,
			 var_notes,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_modified_user
			);
	elseif var_detail = 1 THEN
		insert into trn_asetmasuk_det 
			(id_asetmasuk,
			 id_aset,
			 qty,
			 id_satuan,
			 ket
			)
		values (
			 var_id_asetmasuk,
			 var_id_aset,
			 var_qty,
			 var_id_satuan,
			 var_ket
			);
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_asetmasuk_det where id_asetmasuk = var_id_asetmasuk;
		delete from trn_asetmasuk_head where id_asetmasuk = var_id_asetmasuk;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_aset_keluar
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_aset_keluar`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_aset_keluar`(in var_id_asetkeluar varchar(60), in var_date_trn date, in var_notes text, in var_created_date date, in var_modified_date date, in var_created_user varchar(30),in var_modified_user varchar(30), in var_id_aset varchar(30), in var_qty double, in var_id_satuan varchar(30), in var_ket text, in varloop integer, in transid varchar(120))
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_asetkeluar_det where id_asetkeluar = var_id_asetkeluar;
		delete from trn_asetkeluar_head where id_asetkeluar = var_id_asetkeluar;
		
		insert into trn_asetkeluar_head(
			 id_asetkeluar,
			 date_trn,
			 notes,
			 created_date,
			 modified_date,
			 created_user,
			 modified_user
			)
		values(
			 var_id_asetkeluar,
			 var_date_trn,
			 var_notes,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_modified_user
			);

	elseif var_detail = 1 THEN
		
		insert into trn_asetkeluar_det 
			(id_asetkeluar,
			 id_aset,
			 qty,
			 id_satuan,
			 ket
			)
		values (
			 var_id_asetkeluar,
			 var_id_aset,
			 var_qty,
			 var_id_satuan,
			 var_ket
			);
		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_asetkeluar_head(
			 id_asetkeluar,
			 date_trn,
			 notes,
			 created_date,
			 modified_date,
			 created_user,
			 modified_user
			)
		values(
			 var_id_asetkeluar,
			 var_date_trn,
			 var_notes,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_modified_user
			);
	elseif var_detail = 1 THEN
		insert into trn_asetkeluar_det 
			(id_asetkeluar,
			 id_aset,
			 qty,
			 id_satuan,
			 ket
			)
		values (
			 var_id_asetkeluar,
			 var_id_aset,
			 var_qty,
			 var_id_satuan,
			 var_ket
			);
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_asetkeluar_det where id_asetkeluar = var_id_asetkeluar;
		delete from trn_asetkeluar_head where id_asetkeluar = var_id_asetkeluar;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_aset_masuk
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_aset_masuk`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_aset_masuk`(in var_id_asetmasuk varchar(60), in var_date_trn date, in var_notes text, in var_created_date date, in var_modified_date date, in var_created_user varchar(30),in var_modified_user varchar(30), in var_id_aset varchar(30), in var_qty double, in var_id_satuan varchar(30), in var_ket text, in varloop integer, in transid varchar(120))
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_asetmasuk_det where id_asetmasuk = var_id_asetmasuk;
		delete from trn_asetmasuk_head where id_asetmasuk = var_id_asetmasuk;
		
		insert into trn_asetmasuk_head(
			 id_asetmasuk,
			 date_trn,
			 notes,
			 created_date,
			 modified_date,
			 created_user,
			 modified_user
			)
		values(
			 var_id_asetmasuk,
			 var_date_trn,
			 var_notes,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_modified_user
			);

	elseif var_detail = 1 THEN
		
		insert into trn_asetmasuk_det 
			(id_asetmasuk,
			 id_aset,
			 qty,
			 id_satuan,
			 ket
			)
		values (
			 var_id_asetmasuk,
			 var_id_aset,
			 var_qty,
			 var_id_satuan,
			 var_ket
			);
		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_asetmasuk_head(
			 id_asetmasuk,
			 date_trn,
			 notes,
			 created_date,
			 modified_date,
			 created_user,
			 modified_user
			)
		values(
			 var_id_asetmasuk,
			 var_date_trn,
			 var_notes,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_modified_user
			);
	elseif var_detail = 1 THEN
		insert into trn_asetmasuk_det 
			(id_asetmasuk,
			 id_aset,
			 qty,
			 id_satuan,
			 ket
			)
		values (
			 var_id_asetmasuk,
			 var_id_aset,
			 var_qty,
			 var_id_satuan,
			 var_ket
			);
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_asetmasuk_det where id_asetmasuk = var_id_asetmasuk;
		delete from trn_asetmasuk_head where id_asetmasuk = var_id_asetmasuk;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_asset
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_asset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_asset`(in var_id_aset varchar(30), in var_id_golongan varchar(30),in var_nama varchar(250), in var_notes text,in var_tanggal_perolehan date,in var_nilai_perolehan double,in var_sawal_nilai_buku double,in var_created_date datetime, in var_modified_date datetime,in var_created_user varchar(120),in var_modified_user varchar(120), transid varchar(60), in var_id_department integer)
BEGIN

IF TRANSID = 'UPDATE' THEN
	BEGIN
		UPDATE mst_aset
		SET 
			id_aset = var_id_aset,
			id_golongan = var_id_golongan,
			nama = var_nama,
			notes = var_notes,
			tanggal_perolehan = var_tanggal_perolehan,
			nilai_perolehan = var_nilai_perolehan,
			sawal_nilai_buku = var_sawal_nilai_buku,
			id_department = var_id_department, 
			created_date = var_created_date,
			modified_date = var_modified_date,
			created_user = var_created_user,
			modified_user = var_modified_user
		WHERE
			id_aset = var_id_aset;
	END;
ELSEIF TRANSID = 'INSERT' THEN
BEGIN
	INSERT INTO mst_aset (
		id_aset,
		id_golongan,
		nama,
		notes,
		tanggal_perolehan,
		nilai_perolehan,
		sawal_nilai_buku,
		id_department,
		created_date,
		modified_date,
		created_user,
		modified_user
	)
VALUES
	(
		var_id_aset,
		var_id_golongan,
		var_nama,
		var_notes,
		var_tanggal_perolehan,
		var_nilai_perolehan,
		var_sawal_nilai_buku,
		var_id_department,
		var_created_date,
		var_modified_date,
		var_created_user,
		var_modified_user
	);

END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_aset
WHERE
	id_aset = var_id_aset;
END;

END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_begbalance
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_begbalance`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_begbalance`(in var_id_item varchar(30), in var_nm_item varchar(250),in var_balance double, in var_notes text, in var_price double, in var_loop integer)
BEGIN
declare var_date_trn date;
declare var_status_update int;
declare var_jml int;
declare var_unit varchar(30);
declare var_company varchar(120);
declare var_id_account varchar(30);

select now() into var_date_trn;
select count(id_item) into var_jml from i_item_beg_balance where id_item = var_id_item and balance <>0;
select main_unit into var_unit from mst_item where id_item = var_id_item;
select company_name into var_company from mst_company where flag_active = 1;

if var_jml = 0 then
	set var_status_update = 0;
ELSEIF var_jml > 0 then
	set var_status_update = 1;
end if;

if var_balance > 0 then 
	UPDATE i_item_beg_balance 
SET 
balance = replace(var_balance,',',''),
price = replace(var_price,',',''),
notes = var_notes,
status_update = 1
WHERE
	id_item  = var_id_item;
elseif var_balance = 0 THEN
	UPDATE i_item_beg_balance 
SET 
balance = 0,
price = 0,
notes = '',
status_update = 0
WHERE
	id_item  = var_id_item;
end if;

select id_account into var_id_account from mst_item where id_item = var_id_item;
if var_loop = 0 then
	update mst_account set beg_balance = 0 where id_account = var_id_account;
end if;
update mst_account set beg_balance = beg_balance + (replace(var_balance,',','') * replace(var_price,',',''))  where id_account = var_id_account;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_calculate_cogs
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_calculate_cogs`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_calculate_cogs`(in var_date_trn date, in var_id_item varchar(60))
BEGIN

		declare temp_no int;
		declare totalRow int;
		declare i int;
		declare firstdate date;
		declare cogsawal double;
		declare var_akum_qty_awal int;
		declare var_cogs_awal double;
		declare var_akum_qty_akhir int;
		declare var_cogs_akhir double;
		declare currentRec integer;
		declare rowPosition integer;

		set i = 1;
		
		
	
			
				
				insert into i_cogs(no_bukti,id_item,date_trn,qty,price,akum_qty,cogs)
				select 'Stock Awal', id_item, '1900-01-01', balance, case when price is null then 0 else price end as price,balance,case when price is null then 0 else price end as cogs from i_item_beg_balance where id_item = var_id_item;
				
			
				  
						
						
							select no_urut into currentRec from i_cogs where id_item = var_id_item order by no_urut desc limit 1;

							select case when akum_qty is null then 0 else akum_qty end into var_akum_qty_awal from i_cogs where no_urut = currentRec-1 and id_item = var_id_item;		
							select case when cogs is null then 0 else cogs end into var_cogs_awal from i_cogs where no_urut = currentRec-1 and id_item = var_id_item;
				
						IF var_akum_qty_awal is null then 
							set var_akum_qty_awal = 0; 
						end if;

						if var_cogs_awal is null THEN
							set var_cogs_awal = 0;
						end if;

						insert into i_cogs(no_bukti,id_item,date_trn,qty,price,akum_qty,cogs) 
							select x.no_stock_in, x.id_item, x.date_trn, x.qty, x.price,(x.qty + var_akum_qty_awal),((x.qty*x.price)+(var_akum_qty_awal*var_cogs_awal))/(x.qty+var_akum_qty_awal) from (
							select no_stock_in, id_item, date_trn, qty, price from i_stock_in where  id_item = var_id_item
							union all 
							select no_stock_out, id_item, date_trn, -1*qty, cogs from i_stock_out where  id_item = var_id_item
							order by date_trn asc) 
						x;
					
					
			



END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_cashier
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_cashier`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_cashier`(in var_no_sales varchar(30), in var_date_trn date, in var_customer varchar(30),in var_cust_address text,in var_cust_phone varchar(250), in var_payment_method integer, in var_subtotal double, in var_discount double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date, in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(25), in var_price double, in var_nominal double,in var_disc_nom double,in var_nominal_net double,  in var_id_curr varchar(25), in var_detail integer, in varloop integer, in transid varchar(120),  in var_cogs double, in var_chk_so integer, in var_term integer, in var_termpaydisc integer, in var_discpay integer,in var_flag_member integer, in var_cust_id varchar(30), in var_paid double)
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_cogs varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_sales varchar(30);
declare var_cogs double;
declare maks_record_cogs integer;
declare var_convert_nom double;
declare var_gudang_outlet varchar(60);

select func_get_convert_curr(func_get_defcurr()) into var_convert_nom;
		if var_convert_nom is null THEN
			set var_convert_nom = 1;
		end if;

select id_warehouse into var_gudang_outlet from mst_warehouse where is_outlet = 1 limit 1;
	
IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		DELETE FROM i_stock_out WHERE NO_stock_out = var_no_sales;
		if var_payment_method = 2 then
			delete from ar_status where no_sales = var_no_sales;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_sales;
		delete from trn_ledger_head where no_ledger = var_no_sales;
		delete from trn_cashier_det where no_sales = var_no_sales;
		delete from trn_cashier_head where no_sales = var_no_sales;
		
			if var_payment_method  = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_cashier';
			end if;


		if var_chk_so = 1 then
		insert into trn_cashier_head(
			 no_sales,
			 date_trn,
			 customer,
			 cust_address,
			 cust_phone,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 paid
			)
		values(var_no_sales,
			 var_date_trn,
			 var_customer,
			 var_cust_address,
			 var_cust_phone,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
       var_paid
			);
		elseif var_chk_so = 0 THEN
			insert into trn_cashier_head(
			 no_sales,
			 date_trn,
			 customer,
			 cust_address,
			 cust_phone,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 paid
			)
		values(var_no_sales,
			 var_date_trn,
			 var_customer,
			 var_cust_address,
			 var_cust_phone,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
			 var_paid
			);
		end IF;


		if var_payment_method = 2 then
			insert into ar_status (
				no_sales,
				date_trn,
				id_customer,
				sales_amount,
				notes
			)
			values (
				var_no_sales,
				var_date_trn,
				var_customer,
				var_total,
				var_notes
			);
		end if;

		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Form',
						var_total*var_convert_nom);

		select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
		select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

		if var_discount > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales),
						var_discount/100 * var_subtotal*var_convert_nom);
		end if;

		if var_tax > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales),
						-1*var_tax/100 * (var_subtotal-(var_discount/100 * var_subtotal)) * var_convert_nom);
		end if;

		if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales),
						var_total*var_convert_nom);
		end if;

		if var_subtotal > 0 THEN
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_sales,
						concat('Penjualan - ',var_no_sales),
						-1*var_subtotal*var_convert_nom);
		end if;


	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_cashier_det where no_sales = var_no_sales;			
		end if;
		insert into trn_cashier_det 
			(no_sales,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 disc_nom,
			 nominal_net,
			 id_curr
			)
		values (var_no_sales,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_disc_nom,
			 var_nominal_net,
			 var_id_curr
			);

		if varloop = 0 THEN
			delete from i_stock_out where no_stock_out = var_no_sales;
		end if;
		insert into i_stock_out 
			(no_stock_out,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
		   id_warehouse
			)
		values (var_no_sales,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_price,
       var_gudang_outlet
			);

		call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		
		select case when max(nmb_asc) is null then 0 else max(nmb_asc) end into maks_record_cogs from lap_mutasi_hpp where id_item = var_id_item;
		if maks_record_cogs > 0 THEN
			set maks_record_cogs = maks_record_cogs -1;
		ELSE
			set maks_record_cogs = 0;
		end if;

		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item and nmb_asc = maks_record_cogs;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales and id_account in (var_id_account_cogs);
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						var_cogs*var_qty*var_convert_nom);
	end if;

		if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales and id_account =  var_id_account_det;
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						-1*var_cogs*var_qty*var_convert_nom);
	end if;
	
end if;


	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 then
			if var_payment_method  = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_cashier';
			end if;
		if var_chk_so = 1 then
		insert into trn_cashier_head(
			 no_sales,
			 date_trn,
			 customer,
			 cust_address,
			 cust_phone,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 flag_member,
			 id_customer,
			 paid
			)
		values(var_no_sales,
			 var_date_trn,
			 var_customer,
			 var_cust_address,
			 var_cust_phone,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
			 var_flag_member,
			 var_cust_id,
			 var_paid
			);
		elseif var_chk_so = 0 THEN
			insert into trn_cashier_head(
			 no_sales,
			 date_trn,
			 customer,
			 cust_address,
			 cust_phone,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 flag_member,
			 id_customer,
			 paid
			)
		values(var_no_sales,
			 var_date_trn,
			 var_customer,
			 var_cust_address,
       var_cust_phone,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
			 var_flag_member,
			 var_cust_id,
			 var_paid
			);
		end IF;

		if var_payment_method = 2 then
			insert into ar_status (
				no_sales,
				date_trn,
				id_customer,
				sales_amount,
				notes
			)
			values (
				var_no_sales,
				var_date_trn,
				var_customer,
				var_total,
				var_notes
			);
		end if;

		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Form',
						var_total*var_convert_nom);

		select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
		

		if var_discount > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales),
						var_discount/100 * var_subtotal*var_convert_nom);
		end if;

		if var_tax > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales),
						-1*var_tax/100 * (var_subtotal-(var_discount/100 * var_subtotal))*var_convert_nom);
		end if;


		if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales),
						var_total*var_convert_nom);
		end if;

	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_cashier_det where no_sales = var_no_sales;			
		end if;
		insert into trn_cashier_det 
			(no_sales,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 disc_nom,
			 nominal_net,
			 id_curr
			)
		values (var_no_sales,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
       var_disc_nom,
			 var_nominal_net,
			 var_id_curr
			);

		if varloop = 0 THEN
			delete from i_stock_out where no_stock_out = var_no_sales;
		end if;
		insert into i_stock_out 
			(no_stock_out,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
       id_warehouse
			)
		values (var_no_sales,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_price,
			 var_gudang_outlet
			);

		select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

		

	
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_sales,
						concat('Penjualan Produk- ',var_id_item),
						-1*var_nominal_net*var_convert_nom);
		


		call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		select case when max(nmb_asc) is null then 0 else max(nmb_asc) end into maks_record_cogs from lap_mutasi_hpp where id_item = var_id_item;
		if maks_record_cogs > 0 THEN
			set maks_record_cogs = maks_record_cogs -1;
		ELSE
			set maks_record_cogs = 0;
		end if;

		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item and nmb_asc = maks_record_cogs;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						var_cogs*var_qty*var_convert_nom);
	end if;

	

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						-1*var_cogs*var_qty*var_convert_nom);
	end if;

	elseif var_detail = 2 THEN
			insert into trn_cashier_service_det 
				(no_sales,
				number_asc,
				id_service,
				notes,
				qty,
				id_unit,
				price,
				nominal,
				disc_nom,
				nominal_net,
				id_curr
				)
		values (var_no_sales,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
       var_disc_nom,
			 var_nominal_net,
			 var_id_curr
					 );

			select id_account into var_id_account_det from mst_service where id_service = var_id_item;

			

		
		select id_account into var_id_account_det from mst_service where id_service = var_id_item;
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_det,
						concat('Penjualan Jasa - ',var_id_item),
						-1*var_nominal_net*var_convert_nom);


end if;

	ELSEIF TRANSID = 'DELETE' THEN
		DELETE FROM i_stock_out WHERE NO_stock_out = VAR_NO_sales;
		if var_payment_method = 2 then
			delete from ar_status where no_sales = var_no_sales;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_sales;
		delete from trn_ledger_head where no_ledger = var_no_sales;
		delete from trn_cashier_service_det  where no_sales = var_no_sales;
		delete from trn_cashier_det where no_sales = var_no_sales;
		delete from trn_cashier_head where no_sales = var_no_sales;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_cashier_return
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_cashier_return`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_cashier_return`(in var_no_sales_return varchar(30), in var_date_trn date, in var_id_customer varchar(180), in var_payment_method integer, in var_subtotal double, in var_disc double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date, in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(25), in var_price double, in var_nominal double,  in var_id_curr varchar(25),in var_no_sales varchar(60), in var_detail integer, in varloop integer, in transid varchar(120), in nilai_retur_lalu double,in var_kurs double, in warehouse varchar(60), in var_disc_nom double, in var_nominal_net double, in var_cust_addr text)
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_cogs varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_sales varchar(30);
declare var_cogs double;
declare var_convert_nom double;
declare var_rnd_subtotal double;
declare var_rnd_freight double;
declare var_rnd_diskon double;
declare var_rnd_total double;
declare var_rnd_ppn double;

		set var_convert_nom = var_kurs;
		if var_convert_nom is null THEN
			set var_convert_nom = 1;
		end if;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_cashier_return_det where no_sales_return = var_no_sales_return;
		delete from trn_cashier_return_head where no_sales_return = var_no_sales_return;
		delete from i_stock_in where no_stock_in = var_no_sales_return;
		delete from trn_ledger_det where no_ledger = var_no_sales_return;
		delete from trn_ledger_head where no_ledger = var_no_sales_return;
	end if;

if var_detail = 0 THEN
		insert into trn_cashier_return_head(
			 no_sales_return,
			 date_trn,
			 customer,
			 payment_method,
			 subtotal,
			 disc,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 kurs,
			 id_warehouse,
			 customer_addr
			)
		values(var_no_sales_return,
			 var_date_trn,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
			 var_disc,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_kurs,
			 warehouse,
			 var_cust_addr
			);

if var_payment_method = 2 then
	
	
	update ar_status set return_amount = case when return_amount is null then 0 else return_amount end - round(nilai_retur_lalu * var_convert_nom,0) where no_sales = var_no_sales;
	update ar_status set return_amount = case when return_amount is null then 0 else return_amount end + round(var_total * var_convert_nom,0) where no_sales = var_no_sales;
	
end if;


		set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;

insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales_return,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Return Form',
						var_rnd_total);

select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
			

			select payment_method into var_pay_method from trn_cashier_return_head where no_sales_return = var_no_sales_return;
			if var_pay_method = 1 THEN
				
					select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_cashier';
			elseif var_pay_method = 2 THEN
				
					select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_cashier';
			end if;

select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

	if var_disc > 0 then
	set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom); 
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales_return),
						var_rnd_diskon);
			end if;

		if var_tax > 0 then
		set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales_return),
						var_rnd_ppn);
			end if;

if var_total > 0 then
			set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales_return),
						round(-1*var_rnd_total,0));
end if;


	insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_sales,
						concat('Penjualan - ',var_no_sales_return),
						round(var_subtotal * var_convert_nom,0));



	elseif var_detail = 1 THEN

		insert into trn_cashier_return_det 
			(no_sales_return,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_sales,
			 disc_nom,
			 nominal_net
			)
		values (var_no_sales_return,
			 var_number_asc,
			 var_id_item,
			 var_notes,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_sales,
			 var_disc_nom,
			 var_nominal_net
			);
		

call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item order by date_trn desc limit 1;

		select id_account into var_id_account_det from mst_item where id_item = var_id_item;


		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_cogs;
end if;

if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						-1*var_cogs*var_qty);
end if;



		insert into i_stock_in 
			(no_stock_in,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
			 id_warehouse
			)
		values (var_no_sales_return,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 0,
			 round(var_price * var_convert_nom, 0),
			 warehouse
			);


	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_det;
end if;

		
if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						var_cogs*var_qty);
end if;


		end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_cashier_return_head(
			 no_sales_return,
			 date_trn,
			 customer,
			 payment_method,
			 subtotal,
			 disc,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 kurs,
		   id_warehouse,
			 customer_addr
			)
		values(var_no_sales_return,
			 var_date_trn,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
			 var_disc,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_kurs,
			 warehouse,
			 var_cust_addr
			);

if var_payment_method = 2 then
	
	
	
	update ar_status set return_amount = case when return_amount is null then 0 else return_amount end + round(var_total*var_convert_nom,0) where no_sales = var_no_sales;
	
end if;

		set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;

insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales_return,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Return Form',
						var_rnd_total);

select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
			

			select payment_method into var_pay_method from trn_cashier_return_head where no_sales_return = var_no_sales_return;
			if var_pay_method = 1 THEN
				
					select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_cashier';
			elseif var_pay_method = 2 THEN
				
					select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_cashier';
			end if;

select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

	if var_disc > 0 then
			set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales_return),
						var_rnd_diskon);
			end if;

		if var_tax > 0 then
			set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales_return),
						var_rnd_ppn);
			end if;

if var_total > 0 then
			set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales_return),
						round(-1*var_rnd_total,0));
end if;


	insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_sales,
						concat('Penjualan - ',var_no_sales_return),
						round(var_subtotal * var_convert_nom,0));



	elseif var_detail = 1 THEN

		insert into trn_cashier_return_det 
			(no_sales_return,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_sales,
			 disc_nom,
			 nominal_net
			)
		values (var_no_sales_return,
			 var_number_asc,
			 var_id_item,
			 var_notes,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_sales,
			 var_disc_nom,
			 var_nominal_net
			);
		

call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item order by date_trn desc limit 1;

		select id_account into var_id_account_det from mst_item where id_item = var_id_item;


		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_cogs;
end if;

if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						-1*var_cogs*var_qty);
end if;



		insert into i_stock_in 
			(no_stock_in,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
       id_warehouse
			)
		values (var_no_sales_return,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 0,
			 round(var_price * var_convert_nom),
			 warehouse
			);


	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_det;
end if;

		
if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						var_cogs*var_qty);
end if;


		end if;

	ELSEIF TRANSID = 'DELETE' THEN
			delete from trn_cashier_return_det where no_sales_return = var_no_sales_return;
			delete from trn_cashier_return_head where no_sales_return = var_no_sales_return;
			if var_payment_method = 2 then
				
				
				update ar_status set return_amount = case when return_amount is null then 0 else return_amount end - round(nilai_retur_lalu*var_convert_nom,0) where no_sales = var_no_sales;
				
			end if;
			delete from i_stock_in where no_stock_in = var_no_sales_return;
			delete from trn_ledger_det where no_ledger = var_no_sales_return;
			delete from trn_ledger_head where no_ledger = var_no_sales_return;
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_cash_bank
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_cash_bank`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_cash_bank`(in var_cashbank_no varchar(30), in var_cash_account varchar(30), in var_date_trn date, in var_total double, in var_notes text, in var_flag_trans varchar(2), in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date, in var_id_account varchar(30), in var_notes_detail text, in var_amount double, in var_detail integer, in varloop integer,in transid varchar(120), in var_nobukti varchar(60),in id_curr varchar(30), in var_kurs double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_ledger_det where no_ledger = var_cashbank_no;
			delete from trn_cashbank_det where cashbank_no = var_cashbank_no;
			delete from trn_ledger_head where no_ledger = var_cashbank_no;
			delete from trn_cashbank_head where cashbank_no = var_cashbank_no;
			

		
		insert into trn_cashbank_head(
			 cashbank_no,
			 id_account,
			 date_trn,
			 total,
			 notes,
			 flag_trans,
			 evidence_no,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 id_currency,
			 kurs
			)
		values(var_cashbank_no,
			 var_cash_account,
			 var_date_trn,
			 var_total,
			 var_notes,
			 var_flag_trans,
			 var_nobukti,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 id_curr,
			 var_kurs);

		if var_flag_trans = 'KM' or var_flag_trans = 'BM' then
		
		insert into trn_ledger_head(
			 no_ledger,
			 date_trn,
			 description,
			 total,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 post_from
			)
		values(var_cashbank_no,
			 var_date_trn,
			 var_notes,
			 round(var_total * var_kurs,0),
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 'Received Cash/Bank');
		elseif var_flag_trans = 'KK' or var_flag_trans = 'BK' then
			insert into trn_ledger_head(
			 no_ledger,
			 date_trn,
			 description,
			 total,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 post_from
			)
		values(var_cashbank_no,
			 var_date_trn,
			 var_notes,
			 round(var_total * var_kurs,0),
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 'Spend Cash/Bank');
		end if;

		 if var_flag_trans = 'KM' or var_flag_trans = 'BM' then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_cashbank_no,
					var_cash_account,
					var_notes,
					round(var_total * var_kurs,0)
				);
			end if;
			if var_flag_trans = 'KK' or var_flag_trans = 'BK' then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_cashbank_no,
					var_cash_account,
					var_notes,
					-1 * round(var_total * var_kurs,0)
				);
			end if;

	elseif var_detail = 1 THEN
		
		
			insert into trn_cashbank_det 
				(cashbank_no,
				id_account,
				notes,
				amount
				)
			values (var_cashbank_no,
				var_id_account,
				var_notes_detail,
				round(var_amount,0)
			);

		

		if var_flag_trans = 'KM' or var_flag_trans = 'BM' then
			insert into trn_ledger_det 
				(no_ledger,
				id_account,
				notes,
				nominal
				)
			values (
				var_cashbank_no,
				var_id_account,
				var_notes_detail,
				-1 * round(var_amount * var_kurs,0));
		end if;

		if var_flag_trans = 'KK' or var_flag_trans = 'BK' then
			insert into trn_ledger_det 
				(no_ledger,
				id_account,
				notes,
				nominal
				)
			values (
				var_cashbank_no,
				var_id_account,
				var_notes_detail,
				round(var_amount * var_kurs,0));
		end if;

	end if;

	ELSEIF TRANSID = 'INSERT' THEN
	if var_detail = 0 then
		
		insert into trn_cashbank_head(
			 cashbank_no,
			 id_account,
			 date_trn,
			 total,
			 notes,
			 flag_trans,
			 evidence_no,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 id_currency,
			 kurs
			)
		values(var_cashbank_no,
			 var_cash_account,
			 var_date_trn,
			 var_total,
			 var_notes,
			 var_flag_trans,
			 var_nobukti,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 id_curr,
			 var_kurs);

		
		if var_flag_trans = 'KM' or var_flag_trans = 'BM' then
		
		insert into trn_ledger_head(
			 no_ledger,
			 date_trn,
			 description,
			 total,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 post_from
			)
		values(var_cashbank_no,
			 var_date_trn,
			 var_notes,
			 round(var_total * var_kurs,0),
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 'Received Cash/Bank');
		elseif var_flag_trans = 'KK' or var_flag_trans = 'BK' then
			insert into trn_ledger_head(
			 no_ledger,
			 date_trn,
			 description,
			 total,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 post_from
			)
		values(var_cashbank_no,
			 var_date_trn,
			 var_notes,
			 round(var_total * var_kurs,0),
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 'Spend Cash/Bank');
		end if;

		 if var_flag_trans = 'KM' or var_flag_trans = 'BM' then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_cashbank_no,
					var_cash_account,
					var_notes,
					round(var_total * var_kurs,0)
				);
			end if;
			if var_flag_trans = 'KK' or var_flag_trans = 'BK' then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_cashbank_no,
					var_cash_account,
					var_notes,
					-1 * round(var_total * var_kurs,0)
				);
			end if;

	elseif var_detail = 1 THEN
	
		
			insert into trn_cashbank_det 
				(cashbank_no,
				id_account,
				notes,
				amount
				)
			values (var_cashbank_no,
				var_id_account,
				var_notes_detail,
				round(var_amount,0)
			);

		

		if var_flag_trans = 'KM' or var_flag_trans = 'BM' then
			insert into trn_ledger_det 
				(no_ledger,
				id_account,
				notes,
				nominal
				)
			values (
				var_cashbank_no,
				var_id_account,
				var_notes_detail,
				-1 * round(var_amount * var_kurs,0));
		end if;

		if var_flag_trans = 'KK' or var_flag_trans = 'BK' then
			insert into trn_ledger_det 
				(no_ledger,
				id_account,
				notes,
				nominal
				)
			values (
				var_cashbank_no,
				var_id_account,
				var_notes_detail,
				round(var_amount * var_kurs,0));
		end if;

	end if;


	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_ledger_det where no_ledger = var_cashbank_no;
			delete from trn_cashbank_det where cashbank_no = var_cashbank_no;
			delete from trn_ledger_head where no_ledger = var_cashbank_no;
			delete from trn_cashbank_head where cashbank_no = var_cashbank_no;
		  
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_cek_nilaibuku_aset
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_cek_nilaibuku_aset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_cek_nilaibuku_aset`(in var_id_golongan varchar(30), in var_nilai_perolehan double, in var_tgl_perolehan date)
BEGIN
declare var_masa_penyusutan double;
declare var_th_penyusutan double;
declare var_rate_penyusutan double;
declare var_sisa_nilai_buku double;
declare var_tgl_server date;
declare var_bln_server double;
declare var_th_server double;


set var_tgl_server = (select now());
set var_bln_server = month(var_tgl_server);
set var_th_server = year(var_tgl_server);

select rate_penyusutan into var_rate_penyusutan from mst_golaset where id_golongan = var_id_golongan;

if var_th_server = year(var_tgl_perolehan) THEN
		set var_masa_penyusutan = MONTH(var_tgl_server) - month(var_tgl_perolehan);
elseif var_th_server > year(var_tgl_perolehan) THEN
		if var_bln_server > month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = (var_th_penyusutan * 12) + var_bln_server - month(var_tgl_perolehan);
		elseif var_bln_server < month(var_tgl_perolehan) then 
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan)) -1;
			set var_masa_penyusutan = (var_th_penyusutan * 12) + 12 - (month(var_tgl_perolehan)) + var_bln_server;
		elseif var_bln_server = month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = var_th_penyusutan * 12;
		end if;
ELSE
		set var_masa_penyusutan = 0;
end if;

set var_sisa_nilai_buku = var_nilai_perolehan - (var_nilai_perolehan * var_rate_penyusutan/100/12 * var_masa_penyusutan);

select var_sisa_nilai_buku; 



END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_clean_i_cogs
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_clean_i_cogs`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_clean_i_cogs`()
BEGIN

delete from i_cogs;
	ALTER TABLE i_cogs AUTO_INCREMENT = 1;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_closed_journal
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_closed_journal`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_closed_journal`(in var_created_date date, in var_id_acc_income varchar(30), in var_start_date date, in var_end_date date, in var_periode integer, in var_year integer)
BEGIN
	

DECLARE done INT DEFAULT FALSE;
DECLARE t_id varchar(30);
DECLARE t_nominal double;
DECLARE var_def varchar(1);
DECLARE var_laba_rugi double;
DECLARE is_closed INTEGER;
DECLARE cur1 CURSOR FOR select a.id_account,a.nominal,b.def_position from tbl_close_income a inner join mst_account b on b.id_account = a.id_account 
												where b.is_income = 1;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	insert into trn_ledger_head (
			no_ledger,
			date_trn,	
			description,
			created_user,
			created_date,
			modified_user,
			modified_date,
			post_from
		)
			values(
			concat('FRM/CLS-',var_periode,var_year),
			var_created_date,
			concat('Penutupan Periode Akuntansi - ',var_periode,var_year),
			'Admin',
			var_created_date,
			'Admin',
			var_created_date,
			'Close Period'
		);


	OPEN cur1;
  REPEAT
  FETCH cur1 INTO t_id,t_nominal,var_def;
  IF NOT done THEN
		if var_def = 'K' then
		insert into trn_ledger_det (
			no_ledger,
			id_account,
			notes,
			nominal
		)
		values(
			concat('FRM/CLS-',var_periode,var_year),
			t_id, 
			concat('Penutupan Periode Akuntansi - ',var_periode,var_year),
			t_nominal);

		insert into trn_ledger_det (
			no_ledger,
			id_account,
			notes,
			nominal
		)
		values(
			concat('FRM/CLS-',var_periode,var_year),
			var_id_acc_income, 
			concat('Penutupan Periode Akuntansi - ',var_periode,var_year),
			-1*t_nominal);

		elseif var_def = 'D' THEN

		insert into trn_ledger_det (
			no_ledger,
			id_account,
			notes,
			nominal
		)
		values(
			concat('FRM/CLS-',var_periode,var_year),
			t_id, 
			concat('Penutupan Periode Akuntansi - ',var_periode,var_year),
			-1*t_nominal);

		insert into trn_ledger_det (
			no_ledger,
			id_account,
			notes,
			nominal
		)
		values(
			concat('FRM/CLS-',var_periode,var_year),
			var_id_acc_income, 
			concat('Penutupan Periode Akuntansi - ',var_periode,var_year),
			t_nominal);
		end if;
	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

	select sum(case when a.nominal is null then 0 else a.nominal end) into var_laba_rugi from trn_ledger_det a 
	inner join trn_ledger_head b on b.no_ledger = a.no_ledger where b.date_trn between (var_start_date and var_end_date)
	and b.post_from = 'Close Period';
	
	select count(period) into is_closed from temp_income_period where period = var_periode and years = var_year;

	if is_closed = 0 then
		insert into temp_income_period (
			period,
			years,	
			nominal,
			created_date)
		values (
			var_periode,
			var_year,
			var_laba_rugi,
			var_created_date);
	ELSE
		update temp_income set nominal = var_laba_rugi where period = var_periode and years = var_year;
	end if;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_cogs_avg
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_cogs_avg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_cogs_avg`(in var_criteria text,in date_filter integer, in tgl_awal date, in tgl_akhir date,in nmb integer)
BEGIN
	declare filter text;
	declare sawal double;
	declare sawal_periodeD double;
	declare sawal_periodeK double;
	declare def varchar(3);
	declare tglsawal date;
	declare item_nm varchar(300);
	declare company text;
	declare price_awal double;
	declare var_unit varchar(30);
	declare var_unit_terkecil varchar(30);

	select company_name into company from mst_company limit 1;
	select item_name into item_nm from mst_item where id_item = var_criteria;
	select id_unit into var_unit from i_item_beg_balance where id_item = var_criteria;
	select main_unit into var_unit_terkecil from mst_item where id_item = var_criteria;

	select cast(a.date_trn as date) into tglsawal from 
	(select date_trn from i_stock_in union select date_trn from i_stock_out) a order by a.date_trn asc limit 1;
	if date_filter = 1 then
		if tglsawal < tgl_awal then
			set tglsawal = tgl_awal;
		end if;
	end if;

	if date_filter = 1 then
	
		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeD
		from i_stock_in
		where date_trn < tgl_awal and id_item = var_criteria;

		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeK
		from i_stock_out
		where date_trn < tgl_awal and id_item = var_criteria;
  elseif date_filter = 0 THEN
	
		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeD
		from i_stock_in
		where date_trn < tglsawal and id_item = var_criteria;

		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeK
		from i_stock_out
		where date_trn < tglsawal and id_item = var_criteria;
  end if;

	
	select case when sum(balance) is null then 0 else sum(balance) end into sawal from i_item_beg_balance where id_item = var_criteria;
	select price into price_awal from i_item_beg_balance where id_item = var_criteria limit 1;
	set sawal_periodeD = sawal_periodeD + sawal;

	IF sawal_periodeD IS NULL THEN 
		 SET sawal_periodeD=0;
	END IF;


	IF sawal_periodeK IS NULL THEN 
		 SET sawal_periodeK=0;
	END IF;

	


	

	if date_filter = 1 then
	insert into lap_mutasi_hpp
	select * from (
			select 'Saldo Awal' as no_bukti,tglsawal as date_trn,var_criteria as id_item,item_nm as item_name,sawal_periodeD AS DEBET,sawal_periodeK AS KREDIT,
			var_unit,price_awal,case when (sawal_periodeD - sawal_periodeK) is null then 0 else (sawal_periodeD - sawal_periodeK) end as saldo, company as company,
			'Saldo Awal Barang',0,price_awal as price2,price_awal as price3
		union ALL
			select a.no_stock_in, a.date_trn,a.id_item,b.item_name,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as debet,
			0,a.id_unit,price/c.qty,
			sawal_periodeD + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_in,5,2) = 'PU' then 'Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_in,5,2) = 'SA' then 'Penjualan'
					 when SUBSTR(a.no_stock_in,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_in,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_in,5,3) = 'TRF' then 'Pindah Gudang'
					 when SUBSTR(a.no_stock_in,5,3) = 'CSH' then 'Penjualan Kasir'
					 when SUBSTR(a.no_stock_in,5,3) = 'REV' then 'Pembelian'
			else '' end as notes,nmb,price/c.qty,price/c.qty
			from i_stock_in a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = var_criteria
			WHERE (a.date_trn between tgl_awal and tgl_akhir) and a.id_item = var_criteria
		union ALL
			select a.no_stock_out, a.date_trn,a.id_item,b.item_name,
			0,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as kredit,a.id_unit,price/c.qty,
			sawal_periodeK + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_out,5,2) = 'PU' then 'Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_out,5,2) = 'SA' then 'Penjualan'
					 when SUBSTR(a.no_stock_out,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_out,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_out,5,3) = 'TRF' then 'Pindah Gudang'
					 when SUBSTR(a.no_stock_out,5,3) = 'CSH' then 'Penjualan Kasir'
					 when SUBSTR(a.no_stock_out,5,3) = 'REV' then 'Pembelian'
			else '' end as notes,nmb+1,price/c.qty,price/c.qty
			from i_stock_out a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = var_criteria
			WHERE (a.date_trn between tgl_awal and tgl_akhir) and a.id_item = var_criteria
	) x order by x.date_trn asc;
	elseif date_filter = 0 THEN
		insert into lap_mutasi_hpp
	select * from (
			select 'Saldo Awal' as no_bukti,tglsawal as date_trn,var_criteria as id_item,item_nm as item_name,sawal_periodeD AS DEBET,sawal_periodeK AS KREDIT,
			var_unit,price_awal,case when (sawal_periodeD - sawal_periodeK) is null then 0 else (sawal_periodeD - sawal_periodeK) end as saldo, company as company,
			'Saldo Awal Barang',0,price_awal as price2,price_awal as price3
		union ALL
			select a.no_stock_in, a.date_trn,a.id_item,b.item_name,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as debet,
			0,a.id_unit,price/c.qty,
			sawal_periodeD + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_in,5,2) = 'PU' then 'Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_in,5,2) = 'SA' then 'Penjualan'
					 when SUBSTR(a.no_stock_in,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_in,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_in,5,3) = 'TRF' then 'Pindah Gudang'
					 when SUBSTR(a.no_stock_in,5,3) = 'CSH' then 'Penjualan Kasir'
					 when SUBSTR(a.no_stock_in,5,3) = 'REV' then 'Pembelian'
			else '' end as notes,nmb,price/c.qty,price/c.qty
			from i_stock_in a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = var_criteria
			WHERE a.id_item = var_criteria
		union ALL
			select a.no_stock_out, a.date_trn,a.id_item,b.item_name,
			0,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as kredit,a.id_unit,price/c.qty,
			sawal_periodeK + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_out,5,2) = 'PU' then 'Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_out,5,2) = 'SA' then 'Penjualan'
					 when SUBSTR(a.no_stock_out,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_out,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_out,5,3) = 'TRF' then 'Pindah Gudang'
					 when SUBSTR(a.no_stock_out,5,3) = 'CSH' then 'Penjualan Kasir'
					 when SUBSTR(a.no_stock_out,5,3) = 'REV' then 'Pembelian'
			else '' end as notes,nmb+1,price/c.qty,price/c.qty
			from i_stock_out a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = var_criteria
			WHERE a.id_item = var_criteria
	) x order by x.date_trn asc;
	end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_company
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_company`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company`(in var_company_code varchar(30), in var_company_name varchar(250), in var_address text, in var_city varchar(120), in var_phone varchar(60), in var_email varchar(120), in var_website varchar(120),in transid varchar(60), in var_flag_status integer,in var_flag_type integer,in var_serial1 varchar(250),in var_serial2 varchar(250),in var_serial3 varchar(250),in var_serial4 varchar(250))
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_company
SET company_code = var_company_code,
company_name = var_company_name,
address = var_address,
city = var_city,
phone = var_phone,
email = var_email,
website = var_website,
flag_active = 1,
flag_status = var_flag_status,
flag_type = var_flag_type
WHERE
	company_code = var_company_code;
END;


if var_flag_type = 1 THEN
	call sp_akses_setretail();
elseif var_flag_type = 2 THEN
  call sp_akses_setmanufacture();
end if;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	delete from mst_company;
	INSERT INTO mst_company (
		company_code,
		company_name,
		address,
		city,
		phone,
		email,
		website,	
		flag_active,
    flag_status,
		flag_type,
		serial1,
		serial2,
		serial3,
		serial4
	)
VALUES
	(
		var_company_code,
		var_company_name,
		var_address,
		var_city,
		var_phone,
		var_email,
		var_website,
		1,
		var_flag_status,
		var_flag_type,
		var_serial1,
		var_serial2,
		var_serial3,
		var_serial4
	);


END;

if var_flag_type = 1 THEN
	call sp_akses_setretail();
elseif var_flag_type = 2 THEN
  call sp_akses_setmanufacture();
end if;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_company
WHERE
	company_code = var_company_code;


END;


END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_currency
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_currency`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_currency`(in var_id_currency varchar(25), in var_currency varchar(60), in var_nation varchar(120), in var_notes varchar(255), in var_created_user varchar(120), in var_created_date datetime, in var_modified_user varchar(120), in var_modified_date datetime, in transid varchar(60), in var_flag_default integer)
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_currency
SET 
	id_currency = var_id_currency,
	currency = var_currency,
	nation = var_nation,
	flag_default = var_flag_default,
	notes = var_notes,
	modified_user = var_modified_user,
	modified_date = var_modified_date
WHERE	
	id_currency = var_id_currency;
if var_flag_default = 1 THEN
	update mst_setcurrency set id_currencydef = var_id_currency;
end if;
END;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	INSERT INTO mst_currency (
		id_currency,
		currency,
		nation,
		flag_default,
		notes,
		created_user,
		created_date,
		modified_user,
		modified_date
	)
VALUES
	(
		var_id_currency,
		var_currency,
		var_nation,
		var_flag_default,
		var_notes,
		var_created_user,
		var_created_date,
		var_modified_user,
		var_modified_date
	);

	insert into mst_setcurrency(
		id_currency,
		id_currencydef,
		notes,
		created_user,
		created_date,
		modified_user,
		modified_date
	)
	values (
		var_id_currency,
		(select id_currency from mst_currency where flag_default = 1 limit 1),
		var_notes,
		var_created_user,
		var_created_date,
		var_modified_user,
		var_modified_date
	);

END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN

DELETE
FROM
	mst_setcurrency
WHERE
	id_currency = var_id_currency;
END;

	DELETE
FROM
	mst_currency
WHERE
	id_currency = var_id_currency;


END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_curr_konversi
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_curr_konversi`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_curr_konversi`(in var_id_currency varchar(60), in var_qty double)
BEGIN
	update mst_setcurrency set convert_value = var_qty where id_currency = var_id_currency;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_customer
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_customer`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_customer`(in var_id_customer varchar(25),in var_first_name varchar(60),in var_last_name varchar(60),in var_address varchar(255),in var_city  varchar(120),in var_state varchar(255),in var_postal_code  varchar(25),in  var_country varchar(120),in var_phone1  varchar(60),in  var_phone2  varchar(60),in  var_phone3  varchar(60),in var_fax varchar(60),in var_email varchar(120),in var_website varchar(120),in  var_photo text,in var_credit_limit double,in var_id_account varchar(25),in var_def_due_date date,in var_def_payment_method   int,in  var_modified_user varchar(120),in var_created_date date,in var_modified_date date,in var_created_user varchar(120),in transid varchar(60), var_status integer, in var_notes text, in var_ar_balance double,in var_id_barcode varchar(200), in var_flag_credit_limit integer)
BEGIN
declare ar_balance_before double;
	
	IF TRANSID = 'UPDATE' THEN
	BEGIN
			

			UPDATE mst_customer
				SET first_name = var_first_name,
				last_name = var_last_name,
				address = var_address,
				city = var_city,
				state = var_state,
				postal_code = var_postal_code,
				country = var_country,
				phone1 = var_phone1,
				phone2 = var_phone2,
				phone3 = var_phone3,
				fax = var_fax,
				email = var_email,
				website = var_website,
				credit_limit = var_credit_limit,
				id_account = var_id_account,
				notes=var_notes,
				photo=var_photo,
				def_due_date = var_def_due_date,
				def_payment_method = var_def_payment_method,
				`status` = var_status,
				modified_user = var_modified_user,
				modified_date = var_modified_date,
				ar_balance = var_ar_balance,
				id_barcode = var_id_barcode,
				flag_credit_limit = var_flag_credit_limit
			WHERE
				id_customer = var_id_customer;

			
		
	END;

	ELSEIF TRANSID = 'INSERT' THEN
	BEGIN
	
			INSERT INTO mst_customer (
				id_customer,
				first_name,
				last_name,
				address,
				city,
				state,
				postal_code,
				country,
				phone1,
				phone2,
				phone3,
				fax,
				email,
				website,
				photo,
				credit_limit,
				id_account,
				notes,
				def_due_date,
				def_payment_method,
				status,
				modified_user,
				created_date,
				modified_date,
				created_user,
				ar_balance,
				id_barcode,
				flag_credit_limit
			)
			VALUES
			(
				var_id_customer,
				var_first_name,
				var_last_name,
				var_address,
				var_city,
				var_state,
				var_postal_code,
				var_country,
				var_phone1,
				var_phone2,
				var_phone3,
				var_fax,
				var_email,
				var_website,
				var_photo,
				var_credit_limit,
				var_id_account,
				var_notes,
				var_def_due_date,
				var_def_payment_method,
				var_status,
				var_modified_user,
				var_created_date,
				var_modified_date,
				var_created_user,
				var_ar_balance,
				var_id_barcode,
				var_flag_credit_limit
			);
			
			

	END;

	ELSEIF TRANSID = 'DELETE' THEN
	BEGIN





		DELETE
		FROM
			mst_customer
		WHERE
			id_customer = var_id_customer;

			
	END;

	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_delivered_item
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_delivered_item`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_delivered_item`(in var_no_delivery_order varchar(30),in var_no_sales_order varchar(30),in var_id_customer varchar(30), in var_date_trn date, in var_notes text, in var_modified_user varchar(30), in var_created_date date, in var_modified_date date, in var_created_user varchar(30), in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(30), in var_detail integer, in varloop integer, in transid varchar(120), in var_sent_qty integer, in var_qty_before integer, in warehouse varchar(60), in var_id_itemdisc varchar(60), in var_item_namedisc varchar(250), in var_qty_discitem double, in var_id_unitdisc varchar(30))
BEGIN
declare var_price DOUBLE;
declare var_convert_nom double;
select case when kurs is null then 1 else kurs end into var_convert_nom from trn_sales_order_head where no_sales_order = var_no_sales_order;

IF TRANSID = 'UPDATE' THEN
	if var_detail = 0 then
		DELETE FROM i_stock_out WHERE NO_stock_out = VAR_NO_delivery_order;
		delete from trn_do_discitem_det where no_do = var_no_delivery_order;
		delete from trn_delivery_order_det where no_delivery_order = var_no_delivery_order;
		delete from trn_delivery_order_head where no_delivery_order = var_no_delivery_order;
		
		insert into trn_delivery_order_head(
			 no_delivery_order,
			 no_sales_order,
			 id_customer,
			 date_trn,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 id_warehouse
			)
		values(var_no_delivery_order,
			 var_no_sales_order,
			 var_id_customer,
			 var_date_trn,
			 var_notes,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 warehouse
			);

	elseif var_detail = 1 THEN
		
		update trn_sales_order_det set sent_qty = 
		case when sent_qty is null then 0 else sent_qty end - var_qty_before where no_sales_order = var_no_sales_order
		and id_item = var_id_item;
 
		select case when price is null then 0 else price end into var_price from trn_sales_order_det where no_sales_order = var_no_sales_order and id_item = var_id_item;

		insert into trn_delivery_order_det 
			(no_delivery_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 sent_qty
			)
		values (var_no_delivery_order,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_sent_qty
			);

			update trn_sales_order_det set sent_qty = 
			case when sent_qty is null then 0 else sent_qty end + var_sent_qty where no_sales_order = var_no_sales_order and id_item = var_id_item;
		
		if varloop = 0 THEN
			delete from i_stock_out where no_stock_out = var_no_delivery_order;
		end if;
		insert into i_stock_out 
			(no_stock_out,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
       id_warehouse
			)
		values (var_no_delivery_order,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 round(var_price * var_convert_nom),
			 round(var_price * var_convert_nom),
			 warehouse
			);

		elseif var_detail = 5 THEN
			insert into trn_do_discitem_det (
				no_do,
				id_item,
				item_name,
				qty,
				id_unit
			) values (
				var_no_delivery_order,
				var_id_itemdisc,
				var_item_namedisc,
				var_qty_discitem,
				var_id_unitdisc);

			insert into i_stock_out 
			(no_stock_out,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
       id_warehouse
			)
		values (var_no_delivery_order,
			 var_date_trn,
			 var_id_itemdisc,
			 var_qty_discitem,
			 var_id_unitdisc,
			 0,
			 0,
			 warehouse
			);

		end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_delivery_order_head(
			 no_delivery_order,
			 no_sales_order,
			 id_customer,
			 date_trn,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 id_warehouse
			)
		values(var_no_delivery_order,
					 var_no_sales_order,
					 var_id_customer,
				   var_date_trn,
					 var_notes,
					 var_modified_user,
					 var_created_date,
					 var_modified_date,
					 var_created_user,
			     warehouse
			);
	elseif var_detail = 1 THEN
		insert into trn_delivery_order_det 
			(no_delivery_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 sent_qty
			)
		values (var_no_delivery_order,
					  var_number_asc,
						var_id_item,
						var_notes,
					  var_qty,
						var_id_unit,
					  var_sent_qty
			);

			update trn_sales_order_det set sent_qty = 
			case when sent_qty is null then 0 else sent_qty end + var_sent_qty where no_sales_order = var_no_sales_order and id_item = var_id_item;

			select case when price is null then 0 else price end into var_price from trn_sales_order_det where no_sales_order = var_no_sales_order and id_item = var_id_item;

		if varloop = 0 THEN
			delete from i_stock_out where no_stock_out = var_no_delivery_order;
		end if;
		insert into i_stock_out 
			(no_stock_out,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
			 id_warehouse
			)
		values (var_no_delivery_order,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 round(var_price * var_convert_nom),
			 round(var_price * var_convert_nom),
			 warehouse
			);
			elseif var_detail = 5 THEN
			insert into trn_do_discitem_det (
				no_do,
				id_item,
				item_name,
				qty,
				id_unit
			) values (
				var_no_delivery_order,
				var_id_itemdisc,
				var_item_namedisc,
				var_qty_discitem,
				var_id_unitdisc);

			insert into i_stock_out 
			(no_stock_out,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
       id_warehouse
			)
		values (var_no_delivery_order,
			 var_date_trn,
			 var_id_itemdisc,
			 var_qty_discitem,
			 var_id_unitdisc,
			 0,
			 0,
			 warehouse
			);

	end if;

	ELSEIF TRANSID = 'DELETE' THEN
			if var_detail = 0 THEN
				DELETE FROM i_stock_out WHERE NO_stock_out = VAR_NO_delivery_order;
				delete from trn_do_discitem_det where no_do = var_no_delivery_order;
				delete from trn_delivery_order_det where no_delivery_order = var_no_delivery_order;
				delete from trn_delivery_order_head where no_delivery_order = var_no_delivery_order;
			elseif var_detail = 1 then
				update trn_sales_order_det set sent_qty = 
				case when sent_qty is null then 0 else sent_qty end - var_sent_qty where no_sales_order = var_no_sales_order and id_item = var_id_item;
			end if;
END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_end_balance_acc
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_end_balance_acc`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_end_balance_acc`(in var_id_account varchar(25))
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;
	declare var_saldo DOUBLE;
	
	

 select case when b.def_position = 'D' then 
(case when b.beg_balance >0 then b.beg_balance else 0 end + case when sum(a.nominal) >0 then sum(a.nominal) else 0 end) -
(case when b.beg_balance <0 then -1*b.beg_balance else 0 end + case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end)  
when b.def_position = 'K' then 
(case when b.beg_balance <0 then -1*b.beg_balance else 0 end + case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end)  - 
(case when b.beg_balance >0 then b.beg_balance else 0 end + case when sum(a.nominal) >0 then sum(a.nominal) else 0 end)
end as saldo into var_saldo
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where a.id_account=var_id_account;


if var_saldo is null THEN
	set var_saldo = 0;
end if;

select var_saldo;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_expedition
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_expedition`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_expedition`(in var_id_expedition varchar(30), in var_expedition_name varchar(60), in var_expedition_rate double,in var_from_city varchar(120), in var_to_city varchar(120),in var_qty_perunit double, in var_notes text, in var_modified_user varchar(120),in var_created_date datetime, in var_modified_date datetime,in var_created_user varchar(120), transid varchar(60))
BEGIN

IF TRANSID = 'UPDATE' THEN
	BEGIN
		UPDATE mst_expedition
		SET 
			id_expedition = var_id_expedition,
			expedition_name=var_expedition_name,
			expedition_rate=var_expedition_rate,
			from_city = var_from_city,
			to_city = var_to_city,
			qty_perunit = var_qty_perunit,
			notes = var_notes,
			created_date=var_created_date,
			modified_date=var_modified_date,
			created_user=var_created_user,
			modified_user=var_modified_user
		WHERE
			id_expedition = var_id_expedition;
	END;
ELSEIF TRANSID = 'INSERT' THEN
BEGIN
	INSERT INTO mst_expedition (
		id_expedition,
		expedition_name,
		expedition_rate,
		from_city,
		to_city,
		qty_perunit,
		notes,
		created_date,
		modified_date,
		created_user,
		modified_user
	)
VALUES
	(
		var_id_expedition,
		var_expedition_name,
		var_expedition_rate,
		var_from_city,
		var_to_city,
		var_qty_perunit,
		var_notes,
		var_created_date,
		var_modified_date,
		var_created_user,
		var_modified_user
	);

END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_expedition
WHERE
	id_expedition = var_id_expedition;
END;

END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_gol_asset
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_gol_asset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_gol_asset`(in var_id_golongan varchar(30), in var_masa_manfaat double, in var_rate_penyusutan double, in var_type varchar(200), in var_modified_user varchar(120), in var_created_date datetime, in var_modified_date datetime, in var_created_user varchar(120), in TRANSID text)
BEGIN

IF TRANSID = 'UPDATE' THEN
	BEGIN
		UPDATE mst_golaset
		SET 
			id_golongan = var_id_golongan,
			masa_manfaat = var_masa_manfaat,
			rate_penyusutan = var_rate_penyusutan,
			type = var_type,
			modified_user = var_modified_user,
			created_date = var_created_date,
			modified_date = var_modified_date,
			created_user = var_created_user
		WHERE
			id_golongan = var_id_golongan;
	END;
ELSEIF TRANSID = 'INSERT' THEN
BEGIN
	INSERT INTO mst_golaset (
		id_golongan,
		masa_manfaat,	
		rate_penyusutan,
		type,
		modified_user,
		created_date,
		modified_date,
		created_user
	)
VALUES
	(
		var_id_golongan,
		var_masa_manfaat,
		var_rate_penyusutan,
		var_type,
		var_modified_user,
		var_created_date,
		var_modified_date,
		var_created_user
	);

END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_golaset
WHERE
	id_golongan = var_id_golongan;
END;

END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_hak_akses
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_hak_akses`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hak_akses`(in var_username varchar(60), in var_parentkey varchar(250), in var_childkey varchar(250))
BEGIN
	insert into i_hakakses values (var_parentkey,var_childkey,var_username);
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_hitung_21
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_hitung_21`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hitung_21`(in var_id_pegawai int)
BEGIN

	declare gaji_setahun double;
	declare ptkp double;
	declare pkp double;
	declare progresif_1 double;
	declare progresif_2 double;
	declare progresif_3 double;
	declare progresif_4 double;
	declare temp_progresif double;
	declare total_pph double;

	set progresif_1 = 0;
	set progresif_2 = 0;
	set progresif_3 = 0;
	set progresif_4 = 0;
	

	select (gaji_pokok * 12) into gaji_setahun from mst_pegawai 
	where id_pegawai = var_id_pegawai;

	select b.ptkp into ptkp from mst_pegawai a inner join mst_status_ptkp b on b.id_status = a.id_status
	where a.id_pegawai = var_id_pegawai;

	set pkp = gaji_setahun-ptkp;
	if pkp >= 50000000 then 
		set progresif_1 = 5/100 * 50000000;
		set temp_progresif = pkp - 50000000;
	ELSE
		set progresif_1 = 5/100 * pkp;
	end if; 

	if temp_progresif >= 200000000 THEN
		set progresif_2 = 15/100 * 200000000;
		set temp_progresif = temp_progresif - 200000000;
	ELSE
		set progresif_2 = 15/100 * temp_progresif;
		set temp_progresif = 0;
	end if;

	if temp_progresif >= 250000000 THEN
		set progresif_3 = 25/100 * 250000000;
		set temp_progresif = temp_progresif - 250000000;
	ELSE
		set progresif_3 = 25/100 * temp_progresif;
		set temp_progresif = 0;
	end if;

	if temp_progresif >= 500000000 THEN
		set progresif_4 = 30/100 * temp_progresif;
		set temp_progresif = 0;
	ELSE
		set progresif_4 = 0;
		set temp_progresif = 0;
	end if;

set total_pph = progresif_1 + progresif_2 + progresif_3 + progresif_4;
select progresif_1, progresif_2, progresif_3, progresif_4,total_pph;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_init_period
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_init_period`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_init_period`(in var_period integer, in var_year integer, in var_created_date date)
BEGIN
delete from i_set_account_def;
delete from mst_account;

update i_accounting_period set 
periode = var_period,
year = var_year,
last_closed_date = var_created_date,
lock_status = 0;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_input_nobukti
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_input_nobukti`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_input_nobukti`(in var_form varchar(120), in var_bulan integer, in var_tahun integer)
BEGIN
	declare var_available integer;
	declare var_prefix varchar(120);
	declare var_ket varchar(250);
	if var_form = 'JOURNAL' THEN
		set var_prefix = 'JU';
		set var_ket = 'GENERAL JOURNAL FORM NUMBER';
	end if;
	if var_form = 'OPNAME' THEN
		set var_prefix = 'OPN';
		set var_ket = 'STOCK OPNAME FORM NUMBER';
	end if;
if var_form = 'ADJUSTSTOCK' THEN
		set var_prefix = 'ADS';
		set var_ket = 'ADJUST STOCK FORM NUMBER';
	end if;
if var_form = 'SPENDMONEY' THEN
		set var_prefix = 'SPM';
		set var_ket = 'SPEND MONEY FORM NUMBER';
	end if;
if var_form = 'RECEIVEMONEY' THEN
		set var_prefix = 'RCM';
		set var_ket = 'RECEIVE MONEY FORM NUMBER';
	end if;
if var_form = 'PAYAP' THEN
		set var_prefix = 'PAP';
		set var_ket = 'PAY AP FORM NUMBER';
	end if;
if var_form = 'PAYAR' THEN
		set var_prefix = 'PAR';
		set var_ket = 'PAY AR FORM NUMBER';
	end if;
if var_form = 'SALES_RETURN' THEN
		set var_prefix = 'SRU';
		set var_ket = 'SALES_RETURN FORM NUMBER';
	end if;
if var_form = 'PURCHASE_RETURN' THEN
		set var_prefix = 'PRU';
		set var_ket = 'PURCHASE_RETURN FORM NUMBER';
	end if;
if var_form = 'PO' THEN
		set var_prefix = 'PO';
		set var_ket = 'PURCHASE ORDER FORM NUMBER';
	end if;
if var_form = 'PURCHASE' THEN
		set var_prefix = 'PU';
		set var_ket = 'PURCHASE FORM NUMBER';
	end if;
if var_form = 'SALES' THEN
		set var_prefix = 'SA';
		set var_ket = 'SALES FORM NUMBER';
	end if;
if var_form = 'SALES_ORDER' THEN
		set var_prefix = 'SO';
		set var_ket = 'SALES ORDER FORM NUMBER';
	end if;
if var_form = 'SALES_SERVICE' THEN
		set var_prefix = 'SVC';
		set var_ket = 'SALES SERVICE FORM NUMBER';
	end if;
if var_form = 'RECONCILE' THEN
		set var_prefix = 'REC';
		set var_ket = 'RECONCILE BANK FORM NUMBER';
	end if;
if var_form = 'RO' THEN
		set var_prefix = 'RO';
		set var_ket = 'REQUEST ORDER FORM NUMBER';
	end if;
if var_form = 'RECEIVED_ORDER' THEN
		set var_prefix = 'REV';
		set var_ket = 'RECEIVED ORDER FORM NUMBER';
	end if;
if var_form = 'DELIVERED_ITEM' THEN
		set var_prefix = 'DO';
		set var_ket = 'DELIVERED ITEM FORM NUMBER';
	end if;
if var_form = 'CASHIER' THEN
		set var_prefix = 'CSH';
		set var_ket = 'CASHIER FORM NUMBER';
	end if;
if var_form = 'CASHIER_RETURN' THEN
		set var_prefix = 'CSU';
		set var_ket = 'CASHIER RETURN FORM NUMBER';
	end if;
if var_form = 'TRFSTOCK' THEN
		set var_prefix = 'TRF';
		set var_ket = 'WAREHOUSE TRANSFER FORM NUMBER';
	end if;
if var_form = 'DIRECT_PURCHASE' THEN
		set var_prefix = 'DPC';
		set var_ket = 'DIRECT PURCHASE FORM NUMBER';
	end if;
if var_form = 'PINJAMAN' THEN
		set var_prefix = 'PNJ';
		set var_ket = 'PINJAMAN FORM NUMBER';
	end if;
if var_form = 'BAYAR_PINJAMAN' THEN
		set var_prefix = 'BNJ';
		set var_ket = 'PINJAMAN FORM NUMBER';
	end if;
if var_form = 'MASTER_ITEM' THEN
		set var_prefix = '';
		set var_ket = 'MASTER ITEM';
	end if;
if var_form = 'MASTER_CUSTOMER' THEN
		set var_prefix = 'C';
		set var_ket = 'MASTER CUSTOMER';
	end if;
if var_form = 'REDEMPTION' THEN
		set var_prefix = 'RDM';
		set var_ket = 'REDEMPTION';
	end if;
if var_form = 'SERVICE' THEN
		set var_prefix = 'SVC';
		set var_ket = 'SERVICE';
	end if;
if var_form = 'SERVICEPAY' THEN
		set var_prefix = 'SVP';
		set var_ket = 'SERVICEPAY';
	end if;
if var_form = 'PESANAN' THEN
		set var_prefix = 'PSN';
		set var_ket = 'PESANAN';
	end if;
if var_form = 'PESANANPAY' THEN
		set var_prefix = 'PSP';
		set var_ket = 'PESANANPAY';
	end if;
if var_form = 'TANPANOTA' THEN
		set var_prefix = 'TNP';
		set var_ket = 'TANPANOTA';
	end if;
if var_form = 'MASTER_EXPEDITION' THEN
		set var_prefix = 'EXP';
		set var_ket = 'MASTER ITEM';
	end if;
if var_form = 'MASTER_GOLASET' THEN
		set var_prefix = 'GOL';
		set var_ket = 'MASTER GOLONGAN ASET';
	end if;
if var_form = 'MASTER_ASET' THEN
		set var_prefix = 'AST';
		set var_ket = 'MASTER ASET';
	end if;
if var_form = 'ADJUST_JOURNAL' THEN
		set var_prefix = 'ADJ';
		set var_ket = 'ADJUSTMENT JOURNAL';
	end if;
if var_form = 'DEPR_JOURNAL' THEN
		set var_prefix = 'DEP';
		set var_ket = 'DEPRECIATION JOURNAL';
	end if;

	select count(nourut) into var_available from control_no_trans where form = var_form and bulan = var_bulan and tahun = var_tahun;


	if var_available = 0 and (var_form = 'MASTER_ITEM') THEN
		insert into control_no_trans (
		form,
		prefix,
		bulan,
		tahun,
		nourut,
		keterangan)
		values (
		var_form,
		var_prefix,
		var_bulan,
		var_tahun,
		'000000',
		var_ket
		);
	end if;

	if var_available = 0 and (var_form = 'MASTER_EXPEDITION') THEN
		insert into control_no_trans (
		form,
		prefix,
		bulan,
		tahun,
		nourut,
		keterangan)
		values (
		var_form,
		var_prefix,
		var_bulan,
		var_tahun,
		'000000',
		var_ket
		);
	end if;

	if var_available = 0 and (var_form = 'MASTER_GOLASET') THEN
		insert into control_no_trans (
		form,
		prefix,
		bulan,
		tahun,
		nourut,
		keterangan)
		values (
		var_form,
		var_prefix,
		var_bulan,
		var_tahun,
		'000000',
		var_ket
		);
	end if;
if var_available = 0 and (var_form = 'MASTER_ASET') THEN
		insert into control_no_trans (
		form,
		prefix,
		bulan,
		tahun,
		nourut,
		keterangan)
		values (
		var_form,
		var_prefix,
		var_bulan,
		var_tahun,
		'000000',
		var_ket
		);
	end if;

if var_available = 0 and var_form <> 'MASTER_ITEM' AND var_form <> 'MASTER_EXPEDITION' AND var_form <> 'MASTER_GOLASET' and var_form <> 'MASTER_ASET' THEN
		insert into control_no_trans (
		form,
		prefix,
		bulan,
		tahun,
		nourut,
		keterangan)
		values (
		var_form,
		var_prefix,
		var_bulan,
		var_tahun,
		'00000',
		var_ket
		);
	end if;



END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_insert_closed_tbl
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_insert_closed_tbl`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_insert_closed_tbl`(in var_created_date date, in var_id_acc_income varchar(30), in var_start_date date, in var_end_date date, in var_periode integer, in var_year integer, in var_lock_status integer)
BEGIN

insert into tbl_close_income(
id_account,
nominal,
closed_date,
closed_period,
closed_year,
id_account_income
)
select b.id_account, sum(b.nominal),var_created_date, var_periode, var_year, var_id_acc_income 
from trn_ledger_det b 
inner JOIN mst_account a on a.id_account=b.id_account 
inner join trn_ledger_head c on c.no_ledger = b.no_ledger
where (c.date_trn between var_start_date and var_end_date)
group by b.id_account
having sum(b.nominal) <> 0;

update i_accounting_period set 
periode = var_periode,
year = var_year,
last_closed_date = var_created_date,
lock_status = var_lock_status;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_item
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_item`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_item`(in var_id_item  varchar(25), in var_item_name varchar(60),in  var_id_category varchar(25),in var_id_brand varchar(25), in var_id_account varchar(25), in var_main_unit varchar(25), in var_buy_unit varchar(25), in var_sell_unit varchar(25), in var_flag_buy integer, in var_flag_sell integer,in var_flag_inv integer , in var_blob_image text,in var_modified_user varchar(120), in var_created_date datetime, in var_modified_date datetime, in var_created_user varchar(120), in transid varchar(60),in var_wh varchar(120), in var_price double, in var_id_warehouse varchar(120), in var_max_qty integer, in var_min_qty integer, in var_notes text,in var_length float, in var_width float, in var_height float, in var_weight float, in var_id_account_cogs varchar(60), in var_account_cogs varchar(250), in var_min_qty_unit varchar(30), in var_id_itembrand varchar(60), in var_item_disc_qty double, in var_id_itemdisc varchar(60), in var_qty_disc double, in var_detail integer, in var_id_unitdisc varchar(30), in var_item_disc_unit varchar(30))
BEGIN

IF TRANSID = 'UPDATE' THEN

	BEGIN

	if var_detail = 0 then
		UPDATE mst_item
		SET item_name = var_item_name,
				id_category = var_id_category,
				id_jenis = var_id_brand,
				id_account = var_id_account,
				main_unit = var_main_unit,
				buy_unit = var_buy_unit,
				sell_unit = var_sell_unit,
				flag_buy =var_flag_buy,
				flag_sell =var_flag_sell,
				flag_inv = var_flag_inv,
				blob_image = var_blob_image,
				modified_user = var_modified_user,
			  created_date = var_created_date,
				modified_date=var_modified_date,
				created_user = var_created_user,
				sell_price=var_price,
				id_warehouse = var_id_warehouse,
				max_qty = var_max_qty,
				min_qty = var_min_qty,
				notes = var_notes,
				length = var_length,
				width = var_width,
				height = var_height,
				weight = var_weight,
			  id_account_cogs = var_id_account_cogs,
				account_cogs = var_account_cogs,
				min_qty_unit = var_min_qty_unit,
				id_brand = var_id_itembrand,
				item_disc_qty = var_item_disc_qty,
				item_disc_unit=var_item_disc_unit
		WHERE
				id_item = var_id_item;

		delete from mst_setunit where id_item = var_id_item and qty =1; 
		insert into mst_setunit(
			id_item,
			id_unit,
			qty,
			notes,
			modified_user,
			modified_date
		)
		values (
			var_id_item,
			var_main_unit,
			1,	
			var_notes,
			var_modified_user,
			var_modified_date
		);

	delete from mst_item_disc where id_item = var_id_item;
	elseif var_detail = 1 then
		call sp_set_itemdisc_det(var_id_item,var_id_itemdisc, var_qty_disc, TRANSID, var_id_unitdisc);
	end if;

	END;

ELSEIF TRANSID = 'INSERT' THEN

	BEGIN
	if var_detail =  0 then
		INSERT INTO mst_item (
		id_item,
		item_name,
		id_category,
		id_jenis,
		id_account,
		main_unit,
		buy_unit,
		sell_unit,
		flag_buy,
		flag_sell,
		flag_inv,
		blob_image,
		modified_user,
		created_date,
		modified_date,
		created_user,
		sell_price,
		id_warehouse,
		max_qty,
		min_qty,
		notes,
		length,
		width,
		height,
		weight,
		id_account_cogs,
		account_cogs,
		min_qty_unit,
		id_brand,
		item_disc_qty,
		item_disc_unit
	)
	VALUES
	(
		var_id_item,
		var_item_name,
		var_id_category,
		var_id_brand,
		var_id_account,
		var_main_unit,
		var_buy_unit,
		var_sell_unit,
		var_flag_buy,
		var_flag_sell,
		var_flag_inv,
		var_blob_image,
		var_modified_user,
		var_created_date,
		var_modified_date,
		var_created_user,
		var_price,
		var_id_warehouse,
		var_max_qty,
		var_min_qty,
		var_notes,
		var_length,
		var_width,
		var_height,
		var_weight,
		var_id_account_cogs,
		var_account_cogs,
		var_min_qty_unit,
		var_id_itembrand,
		var_item_disc_qty,
		var_item_disc_unit
	);
	INSERT INTO i_item_beg_balance (
		id_warehouse,
		id_item,
		id_unit,
		balance,
		notes )
	VALUES (
		var_wh,
		var_id_item,
		var_main_unit,
		0,
		''
	);

	insert into mst_setunit(
		id_item,
		id_unit,
		qty,
		notes,
		modified_user,
		modified_date
	)
	values (
		var_id_item,
		var_main_unit,
		1,	
		var_notes,
		var_modified_user,
		var_modified_date
	);

	elseif var_detail = 1 THEN
		call sp_set_itemdisc_det(var_id_item,var_id_itemdisc, var_qty_disc, TRANSID, var_id_unitdisc);
	end if;

END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	delete from mst_item_disc where id_item = var_id_item;
	delete from mst_setunit where id_item = var_id_item and qty =1; 
	DELETE FROM i_item_beg_balance where id_item = var_id_item;
	DELETE FROM mst_item
	WHERE id_item = var_id_item;

		

	
END;

END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_itembrand
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_itembrand`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_itembrand`(in var_itembrand_id varchar(60), in var_itembrand_nm varchar(200), in description text, in transid varchar(60), in var_disc double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	BEGIN
		UPDATE mst_itembrand
		SET mst_itembrand_id = var_itembrand_id,
				mst_itembrand_nm = var_itembrand_nm,
				description = description,
				disc = var_disc
		WHERE
				mst_itembrand_id = var_itembrand_id;
	END;

ELSEIF TRANSID = 'INSERT' THEN

	BEGIN
		INSERT INTO mst_itembrand (
		mst_itembrand_id,
		mst_itembrand_nm,
		description,
		disc
	)
	VALUES
	(
		var_itembrand_id,
		var_itembrand_nm,
		description,
		var_disc
	);
	end;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	
	DELETE FROM mst_itembrand
	WHERE mst_itembrand_id = var_itembrand_id;
	
END;

END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_itemcat
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_itemcat`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_itemcat`(in var_itemjenis_id varchar(60),in var_itemcat_id varchar(60), in var_itemcat_nm varchar(200), in description text, in transid varchar(60),in var_disc double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	BEGIN
		UPDATE mst_itemcat
		SET mst_itemjenis_id = var_itemjenis_id,
				mst_itemcat_id = var_itemcat_id,
				mst_itemcat_nm = var_itemcat_nm,
				description = description,
				discount = var_disc
		WHERE
				mst_itemcat_id = var_itemcat_id;
	END;

ELSEIF TRANSID = 'INSERT' THEN

	BEGIN
		INSERT INTO mst_itemcat (
		mst_itemjenis_id,
		mst_itemcat_id,
		mst_itemcat_nm,
		description,
		discount
	)
	VALUES
	(
		var_itemjenis_id,
		var_itemcat_id,
		var_itemcat_nm,
		description,
		var_disc
	);
	end;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	
	DELETE FROM mst_itemcat
	WHERE mst_itemcat_id = var_itemcat_id;
	
END;

END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_itemjenis
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_itemjenis`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_itemjenis`(in var_itemjenis_id varchar(60), in var_itemjenis_nm varchar(200), in description text, in transid varchar(60),in var_disc double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	BEGIN
		UPDATE mst_itemjenis
		SET mst_itemjenis_id = var_itemjenis_id,
				mst_itemjenis_nm = var_itemjenis_nm,
				description = description,
				discount = var_disc
		WHERE
				mst_itemjenis_id = var_itemjenis_id;
	END;

ELSEIF TRANSID = 'INSERT' THEN

	BEGIN
		INSERT INTO mst_itemjenis (
		mst_itemjenis_id,
		mst_itemjenis_nm,
		description,
		discount
	)
	VALUES
	(
		var_itemjenis_id,
		var_itemjenis_nm,
		description,
		var_disc
	);
	end;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	
	DELETE FROM mst_itemjenis
	WHERE mst_itemjenis_id = var_itemjenis_id;
	
END;

END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_journal
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_journal`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_journal`(in var_no_journal varchar(30),in var_date_trn date,in var_comment text, in var_created_user varchar(120),in var_created_date date,in var_modified_user varchar(120),in var_modified_date date, in var_id_account varchar(30), in var_notes text, in var_amount double, in var_detail integer, in transid varchar(60), in varloop integer,in var_total double, in id_curr varchar(30), in var_kurs double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_journal_det where journal_no = var_no_journal;
		delete from trn_journal_head where journal_no = var_no_journal;
		
		insert into trn_journal_head(
			 journal_no,
			 date_trn,
			 description,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 total,
			 id_currency,
			 kurs
			)
		values(var_no_journal,
					 var_date_trn,
					 var_comment,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 var_total,
					 id_curr,
					 var_kurs);

		delete from trn_ledger_det where no_ledger = var_no_journal;
		delete from trn_ledger_head where no_ledger = var_no_journal;
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_journal,
					 var_date_trn,
					 var_comment,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'General Journal',
						var_total);
	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_journal_det where journal_no = var_no_journal;			
		end if;

		insert into trn_journal_det 
			(journal_no,
			id_account,
			notes,
			amount
			)
		values (var_no_journal,
						var_id_account,
						var_notes,
						round(var_amount*var_kurs,0));

		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_journal;			
		end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_journal,
						var_id_account,
						var_notes,
						round(var_amount*var_kurs,0));
		end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_journal_head
			(
			 journal_no,
			 date_trn,
			 description,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 total,
			 id_currency,
			 kurs
			)
			values(
					 var_no_journal,
					 var_date_trn,
					 var_comment,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
						var_total,
						id_curr,
						var_kurs);
		insert into trn_ledger_head (
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values (
				var_no_journal,
				var_date_trn,
				var_comment,
				var_created_user,
				var_created_date,
				var_modified_user,
				var_modified_date,
				'General Journal',
				round(var_total * var_kurs,0)
			);

	elseif var_detail = 1 THEN
		insert into trn_journal_det 
			(journal_no,
			id_account,	
			notes,
			amount
			)
		values (var_no_journal,
						var_id_account,
						var_notes,
						round(var_amount*var_kurs,0));
		insert into trn_ledger_det (
				no_ledger,
				id_account,
				notes,
				nominal
			) values (
				var_no_journal,
				var_id_account,
				var_notes,
				round(var_amount*var_kurs)
			);
	end if;


	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_ledger_det where no_ledger = var_no_journal;
			delete from trn_journal_det where journal_no = var_no_journal;
			delete from trn_ledger_head where no_ledger = var_no_journal;
			delete from trn_journal_head where journal_no = var_no_journal;
		  

	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_journal_adjust
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_journal_adjust`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_journal_adjust`(in var_no_journal varchar(30),in var_date_trn date,in var_comment text, in var_created_user varchar(120),in var_created_date date,in var_modified_user varchar(120),in var_modified_date date, in var_id_account varchar(30), in var_notes text, in var_amount double, in var_detail integer, in transid varchar(60), in varloop integer,in var_total double, in id_curr varchar(30), in var_kurs double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_adjustjournal_det where journal_no = var_no_journal;
		delete from trn_adjustjournal_head where journal_no = var_no_journal;
		
		insert into trn_adjustjournal_head(
			 journal_no,
			 date_trn,
			 description,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 total,
			 id_currency,
			 kurs
			)
		values(var_no_journal,
					 var_date_trn,
					 var_comment,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 var_total,
					 id_curr,
					 var_kurs);

		delete from trn_ledger_det where no_ledger = var_no_journal;
		delete from trn_ledger_head where no_ledger = var_no_journal;
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_journal,
					 var_date_trn,
					 var_comment,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'General Journal',
						var_total);
	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_adjustjournal_det where journal_no = var_no_journal;			
		end if;

		insert into trn_adjustjournal_det 
			(journal_no,
			id_account,
			notes,
			amount
			)
		values (var_no_journal,
						var_id_account,
						var_notes,
						round(var_amount*var_kurs,0));

		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_journal;			
		end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_journal,
						var_id_account,
						var_notes,
						round(var_amount*var_kurs,0));
		end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_adjustjournal_head
			(
			 journal_no,
			 date_trn,
			 description,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 total,
			 id_currency,
			 kurs
			)
			values(
					 var_no_journal,
					 var_date_trn,
					 var_comment,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
						var_total,
						id_curr,
						var_kurs);
		insert into trn_ledger_head (
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values (
				var_no_journal,
				var_date_trn,
				var_comment,
				var_created_user,
				var_created_date,
				var_modified_user,
				var_modified_date,
				'General Journal',
				round(var_total * var_kurs,0)
			);

	elseif var_detail = 1 THEN
		insert into trn_adjustjournal_det 
			(journal_no,
			id_account,	
			notes,
			amount
			)
		values (var_no_journal,
						var_id_account,
						var_notes,
						round(var_amount*var_kurs,0));
		insert into trn_ledger_det (
				no_ledger,
				id_account,
				notes,
				nominal
			) values (
				var_no_journal,
				var_id_account,
				var_notes,
				round(var_amount*var_kurs)
			);
	end if;


	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_ledger_det where no_ledger = var_no_journal;
			delete from trn_adjustjournal_det where journal_no = var_no_journal;
			delete from trn_ledger_head where no_ledger = var_no_journal;
			delete from trn_adjustjournal_head where journal_no = var_no_journal;
		  

	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_journal_depreciation
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_journal_depreciation`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_journal_depreciation`(in var_no_journal varchar(30),in var_date_trn date, in var_created_user varchar(120),in var_created_date date,in var_modified_user varchar(120),in var_modified_date date,in var_id_aset varchar(30),in var_id_account_depr varchar(30),in var_id_account_akum varchar(30) , in var_notes text, in var_amount double, in var_detail integer, in transid varchar(60), in varloop integer,in var_total double, in id_curr varchar(30), in var_kurs double, in var_period double, in var_years double)
BEGIN

IF TRANSID = 'UPDATE' THEN
		if var_detail = 0 THEN
	
		delete from trn_ledger_det where no_ledger = var_no_journal;
		delete from trn_ledger_head where no_ledger = var_no_journal;
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_journal,
					 var_date_trn,
					 'Jurnal Penyusutan Aset',
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Aset Depreciation',
						var_total);
	elseif var_detail = 1 THEN
		
		delete from i_aset_depreciation where id_accasetdep = var_no_journal and id_aset = var_id_aset and period=var_period and years=var_years ;
	
		insert into i_aset_depreciation 
		(id_accasetdep,
		 id_aset,
		 nominal,
		 date_trn,
		 notes,
		 period,
		 years,
		 created_date,
		 modified_date,
		 created_user,
		 modified_user
		) values 
		(var_no_journal,
		 var_id_aset,
		 round(var_amount*var_kurs,0),
		 var_date_trn,
		 var_notes,
		 var_period,
		 var_years,
		 var_created_date,
		 var_modified_date,
		 var_created_user,
		 var_modified_user);
	
		/*biaya penyusutan*/
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_journal,
						var_id_account_depr,
						concat('Biaya Penyusutan Aset ',var_id_aset),
						round(var_amount*var_kurs,0));

		
		/*akumulasi penyusutan*/
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_journal,
						var_id_account_akum,
						concat('Akumulasi Penyusutan Aset ',var_id_aset),
						-1*round(var_amount*var_kurs,0));
		
		end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		
		insert into trn_ledger_head (
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values (
				var_no_journal,
				var_date_trn,
				'Jurnal Penyusutan Aset',
				var_created_user,
				var_created_date,
				var_modified_user,
				var_modified_date,
				'Aset Depreciation',
				round(var_total * var_kurs,0)
			);

	elseif var_detail = 1 THEN
			
			if varloop = 0 THEN
				insert into trn_ledger_head (
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values (
				var_no_journal,
				var_date_trn,
				'Jurnal Penyusutan Aset',
				var_created_user,
				var_created_date,
				var_modified_user,
				var_modified_date,
				'Aset Depreciation',
				round(var_total * var_kurs,0)
			);
			end if;
			delete from i_aset_depreciation where id_accasetdep = var_no_journal and id_aset = var_id_aset and period=var_period and years=var_years ; 
	
		insert into i_aset_depreciation 
		(id_accasetdep,
		 id_aset,
		 nominal,
		 date_trn,
		 notes,
		 period,
		 years,
		 created_date,
		 modified_date,
		 created_user,
		 modified_user
		) values 
		(var_no_journal,
		 var_id_aset,
		 round(var_amount*var_kurs,0),
		 var_date_trn,
		 var_notes,
		 var_period,
		 var_years,
		 var_created_date,
		 var_modified_date,
		 var_created_user,
		 var_modified_user);

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_journal,
						var_id_account_depr,
						concat('Biaya Penyusutan Aset ',var_id_aset),
						round(var_amount*var_kurs,0));

	
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_journal,
						var_id_account_akum,
						concat('Akumulasi Penyusutan Aset ',var_id_aset),
						-1*round(var_amount*var_kurs,0));

	end if;


	ELSEIF TRANSID = 'DELETE' THEN
			delete from i_aset_depreciation where id_accasetdep = var_no_journal;
			delete from trn_ledger_det where no_ledger = var_no_journal;
			delete from trn_ledger_head where no_ledger = var_no_journal;
		  

	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_list_opname
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_list_opname`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_list_opname`(in var_field varchar(255), in var_criteria text, in detail integer,in var_date_filter integer,in var_tgl_awal date,in var_tgl_akhir date)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

	declare filter text;
	select concat('%',var_criteria,'%') into filter;
	
	
if var_date_filter = 0 then 
	if var_field = 'Stock Opname No' then
		select a.no_opname,a.date_trn,a.id_warehouse,
		sum(b.qty_onhand) balance, 
		sum(b.qty_opname) opname from i_opname_head a 
		inner join i_opname_det b on b.no_opname = a.no_opname
		where a.no_opname like filter
		group by a.no_opname, a.date_trn
		order by a.no_opname;
	elseif var_field = 'Warehouse ID' then
		select a.no_opname,a.date_trn,a.id_warehouse,
		sum(b.qty_onhand) balance, 
		sum(b.qty_opname) opname from i_opname_head a 
		inner join i_opname_det b on b.no_opname = a.no_opname
		where a.id_warehouse like filter
		group by a.no_opname, a.date_trn
		order by a.id_warehouse;
	end if;
elseif var_date_filter = 1 then 
	if var_field = 'Stock Opname No' then
		select a.no_opname,a.date_trn,a.id_warehouse,
		sum(b.qty_onhand) balance, 
		sum(b.qty_opname) opname from i_opname_head a 
		inner join i_opname_det b on b.no_opname = a.no_opname
		where a.no_opname like filter and (a.date_trn between var_tgl_awal and var_tgl_akhir)
		group by a.no_opname, a.date_trn
		order by a.no_opname;
	elseif var_field = 'Warehouse ID' then
		select a.no_opname,a.date_trn,a.id_warehouse,
		sum(b.qty_onhand) balance, 
		sum(b.qty_opname) opname from i_opname_head a 
		inner join i_opname_det b on b.no_opname = a.no_opname
		where a.id_warehouse like filter and (a.date_trn between var_tgl_awal and var_tgl_akhir)
		group by a.no_opname, a.date_trn
		order by a.id_warehouse;
	end if;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_marketing
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_marketing`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_marketing`(in var_id_employee varchar(25),in var_first_name varchar(60),in var_last_name varchar(60),in var_address varchar(255),in var_city  varchar(120),in var_state varchar(255),in var_postal_code  varchar(25),in  var_country varchar(120),in var_phone1  varchar(60),in  var_phone2  varchar(60),in  var_phone3  varchar(60),in var_fax varchar(60),in var_email varchar(120),in var_website varchar(120),in  var_photo text,in var_target double,in var_id_account varchar(25),in  var_modified_user varchar(120),in var_created_date date,in var_modified_date date,in var_created_user varchar(120),in transid varchar(60), in var_status integer, in var_notes text, in var_grade varchar(120), in var_position_id int, var_department_id int)
BEGIN

IF TRANSID = 'UPDATE' THEN

	BEGIN
		UPDATE mst_employee
			SET first_name = var_first_name,
			last_name = var_last_name,
			address = var_address,
			city = var_city,
			state = var_state,
			postal_code = var_postal_code,
			country = var_country,
			phone1 = var_phone1,
			phone2 = var_phone2,
			phone3 = var_phone3,
			fax = var_fax,
			email = var_email,
			website = var_website,
			photo = var_photo,
			target = var_target,
			id_account = var_id_account,
			notes=var_notes,
			`status` = var_status,
			modified_user = var_modified_user,
			created_date = var_created_date,
			modified_date = var_modified_date,
			created_user = var_created_user,
			grade=var_grade,
			position_id=var_position_id,
			department_id = var_department_id
		WHERE
			id_employee = var_id_employee;
	
	END;

ELSEIF TRANSID = 'INSERT' THEN

	BEGIN
		INSERT INTO mst_employee (
			id_employee,
			first_name,
			last_name,
			address,
			city,
			state,
			postal_code,
			country,
			phone1,
			phone2,
			phone3,
			fax,
			email,
			website,
			photo,
			target,
			id_account,
			notes,
			`status`,
			modified_user,
			created_date,
			modified_date,
			created_user,
			grade,
			position_id,
			department_id
		)
		VALUES
		(
			var_id_employee,
			var_first_name,
			var_last_name,
			var_address,
			var_city,
			var_state,
			var_postal_code,
			var_country,
			var_phone1,
			var_phone2,
			var_phone3,
			var_fax,
			var_email,
			var_website,
			var_photo,
			var_target,
			var_id_account,
			var_notes,
			var_status,
			var_modified_user,
			var_created_date,
			var_modified_date,
			var_created_user,
			var_grade,
			var_position_id,
			var_department_id
		);
	
END;

ELSEIF TRANSID = 'DELETE' THEN
	BEGIN
		DELETE
		FROM
			mst_employee
	WHERE
		id_employee = var_id_employee;
END;


END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_new_user
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_new_user`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_new_user`(in var_username varchar(25), in var_password varchar(25), in var_id_employee varchar(25), in var_create_user varchar(120), in var_create_date datetime, in var_modified_user varchar(120), in var_modified_date datetime, in var_flag_active int)
BEGIN
	INSERT INTO mst_user (
	username,
	password,
	id_employee,
	created_user,
	created_date,
	modified_user,
	modified_date,
	flag_active
	)
VALUES
	(
		var_username,
		var_password,
		var_id_employee,
		var_create_user,
		var_create_date,
		var_modified_user,
		var_modified_date,
		var_flag_active
	);
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_notif_piutangjt
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_notif_piutangjt`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_notif_piutangjt`()
BEGIN
declare tgl_sekarang date;


select now() into tgl_sekarang;
select no_sales,customer,jatuh_tempo,balance from view_piutang_jt
where `MONTH`(date_trn) = `MONTH`(tgl_sekarang);



END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_payment_ap
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_payment_ap`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payment_ap`(in var_no_payment_ap varchar(30), in var_id_supplier varchar(30), in var_date_trn date, in var_notes text, in var_total double, in var_id_account varchar(30), in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date,in var_number_asc integer, in var_no_purchase varchar(60),in var_invoice_date date, in var_ap_amount double,in var_ap_return double, in var_discount double, in var_ap_amount_net double, in  var_paid_amount double, in var_detail integer, in varloop integer, in transid varchar(120), in var_curr varchar(30),in var_kurs double, in var_flag_kurs_pu integer, in var_paid_org double, in var_total_disc double)
BEGIN
declare var_acc_piutang varchar(120);
declare var_acc_pay_disc varchar(120);
declare var_acc_selisih_kurs varchar(120);
declare var_curr_def varchar(30);
declare var_curr_pu varchar(30);

DECLARE ap_disc_before DOUBLE;
DECLARE ap_balance_before DOUBLE;
declare ap_payment_before DOUBLE;
declare jml_piutang DOUBLE;
declare jml_retur DOUBLE;
declare jml_disc double;
declare var_kurs_pu double;
declare var_total_selisih_kurs_rugi double;
declare var_total_selisih_kurs_laba double;


select func_get_defcurr() into var_curr_def;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_payment_ap_det where no_payment_ap = var_no_payment_ap;
		delete from trn_payment_ap_head where no_payment_ap = var_no_payment_ap;
		delete from trn_ledger_det where no_ledger = var_no_payment_ap;
		delete from trn_ledger_head where no_ledger = var_no_payment_ap;
		
		
		insert into trn_payment_ap_head(
			 no_payment_ap,
			 id_supplier,
			 date_trn,
			 notes,
			 total,
			 id_account,
		   created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 id_currency,
			 flag_kurs_pu
			)
		values(var_no_payment_ap,
			 var_id_supplier,
			 var_date_trn,
			 var_notes,
			 var_total,
			 var_id_account,
		   var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_curr,
			 var_flag_kurs_pu
			);

		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_payment_ap,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'AP Payment Form',
						var_total);

	elseif var_detail = 1 THEN

		if varloop = 0 then
			delete from trn_payment_ap_det where no_payment_ap = var_no_payment_ap;			
		end if;
		insert into trn_payment_ap_det 
			(no_payment_ap,
			 number_asc,
			 no_purchase,
			 invoice_date,
			 ap_amount,
			 ap_return,
			 discount,
			 ap_amount_net,
			 paid_amount,
			 kurs
			)
		values (var_no_payment_ap,
			 var_number_asc,
			 var_no_purchase,
			 var_invoice_date,
			 var_ap_amount,
			 var_ap_return,
			 var_discount,
			 var_ap_amount_net,
			 var_paid_amount,
			 var_kurs
			);
		

				
		
				
			
		
		select disc_amount into ap_disc_before from ap_status where no_purchase = var_no_purchase;
		select balance into ap_balance_before from ap_status where no_purchase = var_no_purchase;
		select paid_amount into ap_payment_before from ap_status where no_purchase = var_no_purchase;
		if ap_balance_before is null then 
			set ap_balance_before = 0;
		end if;
		if ap_disc_before is null THEN
			set ap_disc_before = 0;
		end if;
		if ap_payment_before is null THEN
			set ap_payment_before = 0;
		end if;
		update ap_status set disc_amount = case when disc_amount is null then 0 else disc_amount end  - ap_disc_before, balance = case when balance is null then 0 else balance end - ap_balance_before, paid_amount = case when paid_amount is null then 0 else paid_amount end - ap_payment_before where no_purchase = var_no_purchase;
		update ap_status set disc_amount = case when disc_amount is null then 0 else disc_amount end + var_discount, balance = case when balance is null then 0 else balance end + ((var_ap_amount - var_ap_return) - var_discount - var_paid_amount),paid_amount = case when paid_amount is null then 0 else paid_amount end + var_paid_amount where no_purchase = var_no_purchase;
		
	end if;

	
if var_detail = 0 then

	
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_id_account,
						var_notes,
						round(-1*var_total,0));

		

		


		select id_account into var_acc_piutang from i_set_account_def where acc_parameter = 'acc_credit_purchase';
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_piutang,
						var_notes,
						round(var_total+var_total_disc,0));



		select id_account into var_acc_pay_disc from i_set_account_def where acc_parameter = 'acc_pay_purchase_disc';
if var_total_disc > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_pay_disc,
						var_notes,
						round((-1*var_total_disc),0));
end if;
end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_payment_ap_head(
			 no_payment_ap,
			 id_supplier,
			 date_trn,
			 notes,
			 total,
			 id_account,
		   created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 id_currency,
       flag_kurs_pu
			)
		values(var_no_payment_ap,
			 var_id_supplier,
			 var_date_trn,
			 var_notes,
			 var_total,
			 var_id_account,
		   var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_curr,
			 var_flag_kurs_pu
			);

			insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_payment_ap,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'AP Payment Form',
						var_total);

	elseif var_detail = 1 THEN
		insert into trn_payment_ap_det 
			(no_payment_ap,
			 number_asc,
			 no_purchase,
			 invoice_date,
			 ap_amount,
			 ap_return,
			 discount,
			 ap_amount_net,
			 paid_amount,
			 kurs
			)
		values (var_no_payment_ap,
			 var_number_asc,
			 var_no_purchase,
			 var_invoice_date,
			 var_ap_amount,
			 var_ap_return,
			 var_discount,
			 var_ap_amount_net,
			 var_paid_amount,
			 var_kurs
			);


				
				
				
				

		update ap_status set disc_amount = case when disc_amount is null then 0 else disc_amount end + var_discount, balance = case when balance is null then 0 else balance end + ((var_ap_amount - var_ap_return) - var_discount - var_paid_amount),paid_amount = case when paid_amount is null then 0 else paid_amount end + var_paid_amount 
		where no_purchase = var_no_purchase;

	
	end if;

if var_detail = 0 then
	
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_id_account,
						var_notes,
						round(-1 * var_total,0));

		




		select id_account into var_acc_piutang from i_set_account_def where acc_parameter = 'acc_credit_purchase';
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_piutang,
						var_notes,
						round(var_total+var_total_disc,0));


		select id_account into var_acc_pay_disc from i_set_account_def where acc_parameter = 'acc_pay_purchase_disc';
if var_total_disc > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_pay_disc,
						var_notes,
						round(-1 * var_total_disc,0));
end if;
end if; 

	ELSEIF TRANSID = 'DELETE' THEN

			
		

if var_detail = 1 then
		update ap_status 
			set disc_amount = case when disc_amount is null then 0 else disc_amount end  - var_discount, 
					balance = case when balance is null then 0 else balance end + var_paid_amount, 
					paid_amount = case when paid_amount is null then 0 else paid_amount end - var_paid_amount 
		where no_purchase = var_no_purchase;
elseif var_detail = 0 then
			delete from trn_payment_ap_det where no_payment_ap = var_no_payment_ap;
			delete from trn_payment_ap_head where no_payment_ap = var_no_payment_ap;
			delete from trn_ledger_det where no_ledger = var_no_payment_ap;
			delete from trn_ledger_head where no_ledger = var_no_payment_ap;
			
end if;
			
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_payment_ar
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_payment_ar`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payment_ar`(in var_no_payment_ap varchar(30), in var_id_supplier varchar(30), in var_date_trn date, in var_notes text, in var_total double, in var_id_account varchar(30), in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date,in var_number_asc integer, in var_no_purchase varchar(60),in var_invoice_date date, in var_ap_amount double,in var_ap_return double, in var_discount double, in var_ap_amount_net double, in  var_paid_amount double, in var_detail integer, in varloop integer, in transid varchar(120), in var_curr varchar(30),in var_kurs double, in var_flag_kurs_pu integer, in var_paid_org double, in var_total_disc double)
BEGIN
declare var_acc_piutang varchar(120);
declare var_acc_pay_disc varchar(120);
declare var_acc_selisih_kurs varchar(120);
declare var_curr_def varchar(30);
declare var_curr_pu varchar(30);

DECLARE ap_disc_before DOUBLE;
DECLARE ap_balance_before DOUBLE;
declare ap_payment_before DOUBLE;
declare jml_piutang DOUBLE;
declare jml_retur DOUBLE;
declare jml_disc double;
declare var_paid double;
declare var_kurs_pu double;
declare var_total_selisih_kurs_rugi double;
declare var_total_selisih_kurs_laba double;

set var_paid = 0;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_payment_ar_det where no_payment_ar = var_no_payment_ap;
		delete from trn_payment_ar_head where no_payment_ar = var_no_payment_ap;
		delete from trn_ledger_det where no_ledger = var_no_payment_ap;
		delete from trn_ledger_head where no_ledger = var_no_payment_ap;
		
		
		insert into trn_payment_ar_head(
			 no_payment_ar,
			 id_customer,
			 date_trn,
			 notes,
			 total,
			 id_account,
		   created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 id_currency,
			 flag_kurs_pu
			)
		values(var_no_payment_ap,
			 var_id_supplier,
			 var_date_trn,
			 var_notes,
			 var_total,
			 var_id_account,
		   var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_curr,
			 var_flag_kurs_pu
			);

		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_payment_ap,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'AR Payment Form',
						var_total);

	elseif var_detail = 1 THEN

		if varloop = 0 then
			delete from trn_payment_ar_det where no_payment_ar = var_no_payment_ap;			
		end if;
		insert into trn_payment_ar_det 
			(no_payment_ar,
			 number_asc,
			 no_invoice,
			 invoice_date,
			 ap_amount,
			 ap_return,
			 discount,
			 ap_amount_net,
			 paid_amount,
			 kurs
			)
		values (var_no_payment_ap,
			 var_number_asc,
			 var_no_purchase,
			 var_invoice_date,
			 var_ap_amount,
			 var_ap_return,
			 var_discount,
			 var_ap_amount_net,
			 var_paid_amount,
			 var_kurs
			);
		
		
		select disc_amount into ap_disc_before from ar_status where no_sales = var_no_purchase;
		select balance into ap_balance_before from ar_status where no_sales = var_no_purchase;
		select paid_amount into ap_payment_before from ar_status where no_sales = var_no_purchase;
		if ap_balance_before is null then 
			set ap_balance_before = 0;
		end if;
		if ap_disc_before is null THEN
			set ap_disc_before = 0;
		end if;
		if ap_payment_before is null THEN
			set ap_payment_before = 0;
		end if;
		update ar_status set disc_amount = case when disc_amount is null then 0 else disc_amount end  - ap_disc_before, balance = case when balance is null then 0 else balance end - ap_balance_before, paid_amount = case when paid_amount is null then 0 else paid_amount end - ap_payment_before where no_sales = var_no_purchase;
		update ar_status set disc_amount = case when disc_amount is null then 0 else disc_amount end + var_discount, balance = case when balance is null then 0 else balance end + ((var_ap_amount - var_ap_return) - var_discount - var_paid_amount),paid_amount = case when paid_amount is null then 0 else paid_amount end + var_paid_amount where no_sales = var_no_purchase;
		
	end if;

if var_detail = 0 then
	select total into var_paid from trn_payment_ar_head where no_payment_ar = var_no_payment_ap;
	
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_id_account,
						var_notes,
						-1*var_total);

		


		select id_account into var_acc_piutang from i_set_account_def where acc_parameter = 'acc_credit_sales';
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_piutang,
						var_notes,
						round(var_total+var_total_disc,0));


		select id_account into var_acc_pay_disc from i_set_account_def where acc_parameter = 'acc_pay_sales_disc';
if var_total_disc > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_pay_disc,
						var_notes,
						-1*var_total_disc);
end if;
end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_payment_ar_head(
			 no_payment_ar,
			 id_customer,
			 date_trn,
			 notes,
			 total,
			 id_account,
		   created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 id_currency,
       flag_kurs_pu
			)
		values(var_no_payment_ap,
			 var_id_supplier,
			 var_date_trn,
			 var_notes,
			 var_total,
			 var_id_account,
		   var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_curr,
			 var_flag_kurs_pu
			);

			insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_payment_ap,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'AR Payment Form',
						var_total);

	elseif var_detail = 1 THEN
		insert into trn_payment_ar_det 
			(no_payment_ar,
			 number_asc,
			 no_invoice,
			 invoice_date,
			 ap_amount,
			 ap_return,
			 discount,
			 ap_amount_net,
			 paid_amount,
			 kurs
			)
		values (var_no_payment_ap,
			 var_number_asc,
			 var_no_purchase,
			 var_invoice_date,
			 var_ap_amount,
			 var_ap_return,
			 var_discount,
			 var_ap_amount_net,
			 var_paid_amount,
			 var_kurs
			);

		update ar_status set disc_amount = case when disc_amount is null then 0 else disc_amount end + var_discount, balance = case when balance is null then 0 else balance end + ((var_ap_amount - var_ap_return) - var_discount - var_paid_amount),paid_amount = case when paid_amount is null then 0 else paid_amount end + var_paid_amount 
		where no_sales = var_no_purchase;
		
	end if;

if var_detail = 0 then
		select total into var_paid from trn_payment_ar_head where no_payment_ar = var_no_payment_ap;
	
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_id_account,
						var_notes,
						-1 * var_total);

		



		select id_account into var_acc_piutang from i_set_account_def where acc_parameter = 'acc_credit_sales';
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_piutang,
						var_notes,
						round(var_total+var_total_disc,0));



		select id_account into var_acc_pay_disc from i_set_account_def where acc_parameter = 'acc_pay_sales_disc';
if var_total_disc > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_payment_ap,
						var_acc_pay_disc,
						var_notes,
						-1 * var_total_disc);
end if;
end if; 

	ELSEIF TRANSID = 'DELETE' THEN

			
		

if var_detail = 1 then
		update ar_status 
			set disc_amount = case when disc_amount is null then 0 else disc_amount end  - var_discount, 
					balance = case when balance is null then 0 else balance end + var_paid_amount, 
					paid_amount = case when paid_amount is null then 0 else paid_amount end - var_paid_amount 
		where no_sales = var_no_purchase;
elseif var_detail = 0 then
			delete from trn_ledger_det where no_ledger = var_no_payment_ap;
			delete from trn_ledger_head where no_ledger = var_no_payment_ap;
			delete from trn_payment_ar_det where no_payment_ar = var_no_payment_ap;
			delete from trn_payment_ar_head where no_payment_ar = var_no_payment_ap;
end if;
			
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_po
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_po`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_po`(in var_no_purchase_order varchar(30), in var_id_supplier varchar(30), in var_date_trn date, in var_notes text, in var_subtotal double, in var_freight double, in var_tax double, in var_total double, in var_modified_user varchar(30), in var_created_date date, in var_modified_date date, in var_created_user varchar(30), in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(30), in var_price double, in var_nominal double, in var_id_curr varchar(30), in var_detail integer, in varloop integer, in transid varchar(120), in var_no_request_order varchar(60),in var_kurs double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_purchase_order_det where no_purchase_order = var_no_purchase_order;
		delete from trn_purchase_order_head where no_purchase_order = var_no_purchase_order;
		
		insert into trn_purchase_order_head(
			 no_purchase_order,
			 id_supplier,
			 date_trn,
			 notes,
			 subtotal,
			 freight,
			 tax,
			 total,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 kurs
			)
		values(var_no_purchase_order,
			 var_id_supplier,
			 var_date_trn,
			 var_notes,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
       var_kurs
			);

	elseif var_detail = 1 THEN
		
		insert into trn_purchase_order_det 
			(no_purchase_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_request_order
			)
		values (var_no_purchase_order,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_request_order
			);
		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_purchase_order_head(
			 no_purchase_order,
			 id_supplier,
			 date_trn,
			 notes,
			 subtotal,
			 freight,
			 tax,
			 total,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 flag_status_invoice,
			 kurs
			)
		values(var_no_purchase_order,
			 var_id_supplier,
			 var_date_trn,
			 var_notes,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 0,
			 var_kurs
			);
	elseif var_detail = 1 THEN
		insert into trn_purchase_order_det 
			(no_purchase_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_request_order
			)
		values (var_no_purchase_order,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_request_order
			);
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_purchase_order_det where no_purchase_order = var_no_purchase_order;
			delete from trn_purchase_order_head where no_purchase_order = var_no_purchase_order;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_purchase
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_purchase`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_purchase`(in var_no_purchase varchar(30), in var_date_trn date, in var_no_purchase_order varchar(30), in var_id_supplier varchar(30), in var_payment_method varchar(30), in var_payment_term_days integer, in var_disc_term_days integer, in var_disc_term_nominal double,  in var_subtotal double, in var_freight double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(30), in var_created_date date,  in var_modified_user varchar(30), in var_modified_date date, in var_number_asc integer, in var_id_item varchar(30),in var_item_name varchar(250), in var_notes_det text, in  var_qty integer, in var_id_unit varchar(30), in var_price double,  in var_nominal double, in var_id_curr varchar(30),in var_detail integer, in varloop integer, in transid varchar(120), in var_cogs double, in var_chk_so integer,in var_disc  double)
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_freight varchar(30);
declare var_nmb_asc integer;



IF TRANSID = 'UPDATE' THEN
	
	if var_detail = 0 then

		
		if var_payment_method = 2 then
			delete from ap_status where no_purchase = var_no_purchase;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_purchase;
		delete from trn_ledger_head where no_ledger = var_no_purchase;
		delete from trn_purchase_det where no_purchase = var_no_purchase;
		delete from trn_purchase_head where no_purchase = var_no_purchase;

		
	if var_chk_so = 1 then
		insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 no_purchase_order,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_no_purchase_order,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc
			);
		elseif var_chk_so = 0 THEN
			insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc
			);
	end if;
	


	if var_payment_method = 2 then
		insert into ap_status (
			no_purchase,
			date_trn,
			id_supplier,
			purchase_amount,
			notes
		)
		values (
			var_no_purchase,
			var_date_trn,
			var_id_supplier,
			var_total,
			var_notes
		);
	end if;

	
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_purchase,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Purchase Form',
						var_total);

select id_account into var_id_account_freight from i_set_account_def where acc_parameter = 'acc_freight';
			if var_freight > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_freight,
						concat('Biaya Angkut Pembelian - ',var_no_purchase),
						var_freight);
			end if;


select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_beli';
			if var_disc > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_disc,
						concat('Diskon Pembelian - ',var_no_purchase),
						-1*var_disc/100 * (var_subtotal+var_freight));
			end if;

select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_in';
			if var_tax > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_tax,
						concat('Pajak Pembelian - ',var_no_purchase),
						var_tax/100 * (var_subtotal+var_freight-(var_disc/100 * (var_subtotal+var_freight))));
			end if;

				
			select payment_method into var_pay_method from trn_purchase_head where no_purchase = var_no_purchase;
			if var_pay_method = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_purchase';
			elseif var_pay_method = 2 THEN
				select id_account into var_id_account_head from mst_supplier where id_supplier = var_id_supplier;
			end if;

if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_head,
						concat('Pembelian - ',var_no_purchase),
						-1*var_total);
		end if;



	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_purchase_det where no_purchase = var_no_purchase;			
		end if;
		insert into trn_purchase_det 
			(no_purchase,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr
			)
		values (var_no_purchase,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr
			);


		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_purchase  and (id_account <> var_id_account_disc or id_account <> var_id_account_tax or id_account <> var_id_account_head or id_account <> var_id_account_freight);
		end if;

		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_det,
						concat('Pembelian - ',var_id_item),
						var_nominal);
	end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 then

		
	if var_chk_so = 1 then
		insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 no_purchase_order,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_no_purchase_order,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc
			);
		elseif var_chk_so = 0 THEN
			insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc
			);
	end if;
	


	update trn_purchase_order_head set flag_status_invoice = 1 where no_purchase_order = var_no_purchase_order;
	if var_payment_method = 2 then
		insert into ap_status (
			no_purchase,
			date_trn,
			id_supplier,
			purchase_amount,
			notes
		)
		values (
			var_no_purchase,
			var_date_trn,
			var_id_supplier,
			var_total,
			var_notes
		);
	end if;

	
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_purchase,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Purchase Form',
						var_total);

select id_account into var_id_account_freight from i_set_account_def where acc_parameter = 'acc_freight';
			if var_freight > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_freight,
						concat('Biaya Angkut Pembelian - ',var_no_purchase),
						var_freight);
			end if;


select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_beli';
			if var_disc > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_disc,
						concat('Diskon Pembelian - ',var_no_purchase),
						-1*var_disc/100 * (var_subtotal+var_freight));
			end if;

select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_in';
			if var_tax > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_tax,
						concat('Pajak Pembelian - ',var_no_purchase),
						var_tax/100 * (var_subtotal+var_freight-(var_disc/100 * (var_subtotal+var_freight))));
			end if;

				
			select payment_method into var_pay_method from trn_purchase_head where no_purchase = var_no_purchase;
			if var_pay_method = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_purchase';
			elseif var_pay_method = 2 THEN
				select id_account into var_id_account_head from mst_supplier where id_supplier = var_id_supplier;
			end if;

if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_head,
						concat('Pembelian - ',var_no_purchase),
						-1*var_total);
		end if;



	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_purchase_det where no_purchase = var_no_purchase;			
		end if;
		insert into trn_purchase_det 
			(no_purchase,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr
			)
		values (var_no_purchase,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr
			);


		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_purchase  and (id_account <> var_id_account_disc or id_account <> var_id_account_tax or id_account <> var_id_account_head or id_account <> var_id_account_freight);
		end if;

		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_det,
						concat('Pembelian - ',var_id_item),
						var_nominal);
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

	
		if var_payment_method = 2 then
			delete from ap_status where no_purchase = var_no_purchase;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_purchase;
		delete from trn_ledger_head where no_ledger = var_no_purchase;
		delete from trn_purchase_det where no_purchase = var_no_purchase;
		delete from trn_purchase_head where no_purchase = var_no_purchase;
		update trn_purchase_order_head set flag_status_invoice = 0 where no_purchase_order = var_no_purchase_order;
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_purchase2
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_purchase2`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_purchase2`(in var_no_purchase varchar(30), in var_date_trn date, in var_no_purchase_order varchar(30), in var_id_supplier varchar(30), in var_payment_method varchar(30), in var_payment_term_days integer, in var_disc_term_days integer, in var_disc_term_nominal double,  in var_subtotal double, in var_freight double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(30), in var_created_date date,  in var_modified_user varchar(30), in var_modified_date date, in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in  var_qty integer, in var_id_unit varchar(30), in var_price double,  in var_nominal double, in var_id_curr varchar(30),in var_detail integer, in varloop integer, in transid varchar(120), in var_cogs double, in var_chk_so integer,in var_disc  double, in var_id_account varchar(30), in var_item_name varchar(250), in var_kurs double)
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_freight varchar(30);
declare var_nmb_asc integer;
declare var_convert_nom double;
declare var_rnd_subtotal double;
declare var_rnd_freight double;
declare var_rnd_diskon double;
declare var_rnd_total double;
declare var_rnd_ppn double;

		set var_convert_nom = var_kurs;
		if var_convert_nom is null THEN
			set var_convert_nom = 1;
		end if;


IF TRANSID = 'UPDATE' THEN


	if var_detail = 0 then

		
		if var_payment_method = 2 then
			delete from ap_status where no_purchase = var_no_purchase;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_purchase;
		delete from trn_ledger_head where no_ledger = var_no_purchase;
		delete from trn_purchase_det where no_purchase = var_no_purchase;
		delete from trn_purchase_head where no_purchase = var_no_purchase;

		
			
			if var_payment_method = 1 THEN
				
				set var_id_account_head = var_id_account;
			elseif var_payment_method = 2 THEN
				select id_account into var_id_account_head from mst_supplier where id_supplier = var_id_supplier;
			end if;

		
	if var_chk_so = 1 then
		insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 no_purchase_order,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc,
			 id_account,
			 kurs
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_no_purchase_order,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc,
			 var_id_account_head,
			 var_kurs
			);
		elseif var_chk_so = 0 THEN
			insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc,
			 id_account,
			 kurs
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc,
			 var_id_account_head,
			 var_kurs
			);
	end if;
	

	set var_rnd_freight = round((var_freight * var_convert_nom),0);
		if var_rnd_freight is null then 
			set var_rnd_freight = 0;
		end if;
		set var_rnd_diskon = round((-1*var_disc/100 * (var_subtotal) * var_convert_nom),0);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_freight + var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;


	if var_payment_method = 2 then
		insert into ap_status (
			no_purchase,
			date_trn,
			id_supplier,
			purchase_amount,
			notes
		)
		values (
			var_no_purchase,
			var_date_trn,
			var_id_supplier,
			round(var_rnd_total,0),
			var_notes
		);
	end if;


		
		
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_purchase,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Purchase Form',
						round(var_rnd_total,0));
		
		
		select id_account into var_id_account_freight from i_set_account_def where acc_parameter = 'acc_freight';
	
			if var_freight > 0 then
			set var_rnd_freight = round((var_freight * var_convert_nom),0);

			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_freight,
						concat('Biaya Angkut Pembelian - ',var_no_purchase),
						var_rnd_freight);
			end if;
		


			select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_beli';
			
			if var_disc > 0 then
			set var_rnd_diskon = round((-1*var_disc/100 * (var_subtotal) * var_convert_nom),0);

			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_purchase,
						var_id_account_disc,
						concat('Diskon Pembelian - ',var_no_purchase),
						var_rnd_diskon);
			end if;
			

		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_in';
		
		if var_tax > 0 then
		set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);

			insert into trn_ledger_det 
				(no_ledger,
				id_account,
				notes,
				nominal
				)
			values (var_no_purchase,
						var_id_account_tax,
						concat('Pajak Pembelian - ',var_no_purchase),
						var_rnd_ppn);
			end if;
			

		if var_total > 0 then
		set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_freight + var_rnd_diskon + var_rnd_ppn;

			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_head,
						concat('Pembelian - ',var_no_purchase),
						round(-1*var_rnd_total,0));
		end if;
		


	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_purchase_det where no_purchase = var_no_purchase;			
		end if;
		insert into trn_purchase_det 
			(no_purchase,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 item_name
			)
		values (var_no_purchase,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_item_name
			);


		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_purchase  and (id_account <> var_id_account_disc or id_account <> var_id_account_tax or id_account <> var_id_account_head or id_account <> var_id_account_freight);
		end if;

		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_det,
						concat('Pembelian - ',var_id_item),
						round((var_nominal*var_convert_nom),0));
	end if;

	ELSEIF TRANSID = 'INSERT' THEN

		if var_detail = 0 then
		
			
			if var_payment_method = 1 THEN
				
				set var_id_account_head = var_id_account;
			elseif var_payment_method = 2 THEN
				select id_account into var_id_account_head from mst_supplier where id_supplier = var_id_supplier;
			end if;
		
	if var_chk_so = 1 then
		insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 no_purchase_order,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc,
			 id_account,
			 kurs
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_no_purchase_order,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc,
			 var_id_account_head,
			 var_kurs
			);
		elseif var_chk_so = 0 THEN
			insert into trn_purchase_head(
			 no_purchase,
			 date_trn,
			 id_supplier,
			 payment_method,
			 payment_term_days,
			 disc_term_days,
			 disc_term_nominal,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc,
			 id_account,
			 kurs
			)
		values(var_no_purchase,
			 var_date_trn,
			 var_id_supplier,
			 var_payment_method,
			 var_payment_term_days,
			 var_disc_term_days,
			 var_disc_term_nominal,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc,
			 var_id_account_head,
			 var_kurs
			);
	end if;
	
	set var_rnd_freight = round((var_freight * var_convert_nom),0);
		if var_rnd_freight is null then 
			set var_rnd_freight = 0;
		end if;
		set var_rnd_diskon = round((-1*var_disc/100 * (var_subtotal) * var_convert_nom),0);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_freight + var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;


	update trn_purchase_order_head set flag_status_invoice = 1 where no_purchase_order = var_no_purchase_order;
	if var_payment_method = 2 then
		insert into ap_status (
			no_purchase,
			date_trn,
			id_supplier,
			purchase_amount,
			notes
		)
		values (
			var_no_purchase,
			var_date_trn,
			var_id_supplier,
			round(var_rnd_total,0),
			var_notes
		);
	end if;

	
		
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_purchase,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Purchase Form',
						round(var_rnd_total,0));

select id_account into var_id_account_freight from i_set_account_def where acc_parameter = 'acc_freight';
			if var_freight > 0 then
			set var_rnd_freight = round((var_freight * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_freight,
						concat('Biaya Angkut Pembelian - ',var_no_purchase),
						var_rnd_freight);
			end if;


select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_beli';
			if var_disc > 0 then
			set var_rnd_diskon = round((-1*var_disc/100 * (var_subtotal) * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_disc,
						concat('Diskon Pembelian - ',var_no_purchase),
						var_rnd_diskon);
			end if;

select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_in';
			if var_tax > 0 then
			set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_tax,
						concat('Pajak Pembelian - ',var_no_purchase),
						var_rnd_ppn);
			end if;

		if var_total > 0 then
			set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_freight + var_rnd_diskon + var_rnd_ppn;
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_head,
						concat('Pembelian - ',var_no_purchase),
						round(-1*var_rnd_total,0));
		end if;



	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_purchase_det where no_purchase = var_no_purchase;			
		end if;
		insert into trn_purchase_det 
			(no_purchase,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 item_name
			)
		values (var_no_purchase,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_item_name
			);


		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_purchase  and (id_account <> var_id_account_disc or id_account <> var_id_account_tax or id_account <> var_id_account_head or id_account <> var_id_account_freight);
		end if;

		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase,
						var_id_account_det,
						concat('Pembelian - ',var_id_item),
						round((var_nominal*var_convert_nom),0));
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

	
		if var_payment_method = 2 then
			delete from ap_status where no_purchase = var_no_purchase;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_purchase;
		delete from trn_ledger_head where no_ledger = var_no_purchase;
		delete from trn_purchase_det where no_purchase = var_no_purchase;
		delete from trn_purchase_head where no_purchase = var_no_purchase;
		update trn_purchase_order_head set flag_status_invoice = 0 where no_purchase_order = var_no_purchase_order;
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_purchase_return
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_purchase_return`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_purchase_return`(in var_no_purchase_return varchar(30), in var_date_trn date,  in var_id_supplier varchar(30), in var_paymethod integer, in var_subtotal double, in var_freight double,in var_disc double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date , in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(25), in  var_price double, in  var_nominal double, in var_id_curr varchar(25), in var_no_purchase varchar(30),  in var_detail integer, in varloop integer, in transid varchar(120),in var_cogs double, in nilai_retur_lalu double,in var_qty_purch int, in var_kurs double, in warehouse varchar(60))
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_freight varchar(30);
declare var_convert_nom double;
declare var_rnd_subtotal double;
declare var_rnd_freight double;
declare var_rnd_diskon double;
declare var_rnd_total double;
declare var_rnd_ppn double;

		set var_convert_nom = var_kurs;
		if var_convert_nom is null THEN
			set var_convert_nom = 1;
		end if;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_purchase_return_det where no_purchase_return = var_no_purchase_return;
		delete from trn_purchase_return_head where no_purchase_return = var_no_purchase_return;
		delete from i_stock_out where no_stock_out = var_no_purchase_return;
		delete from trn_ledger_det where no_ledger = var_no_purchase_return;
		delete from trn_ledger_head where no_ledger = var_no_purchase_return;
		
		
		insert into trn_purchase_return_head(
			 no_purchase_return,
			 date_trn,
			 id_supplier,
			 payment_method,
			 subtotal,
			 freight,		
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc,
			 kurs,
			 id_warehouse
			)
		values(var_no_purchase_return,
			 var_date_trn,
			 var_id_supplier,
			 var_paymethod,
			 var_subtotal,
			 var_freight,		
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc,
			 var_kurs,
			 warehouse
			);


		set var_rnd_freight = round((var_freight * var_convert_nom),0);
		if var_rnd_freight is null then 
			set var_rnd_freight = 0;
		end if;
		set var_rnd_diskon = round((var_disc/100 * (var_subtotal) * var_convert_nom),0);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round((-1*var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) - var_rnd_diskon - var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;

if var_paymethod = 2 then
	
	
	update ap_status set return_amount = case when return_amount is null then 0 else return_amount end - nilai_retur_lalu where no_purchase = var_no_purchase;
	update ap_status set return_amount = case when return_amount is null then 0 else return_amount end + round(var_rnd_total,0) where no_purchase = var_no_purchase;
	
end if;


insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_purchase_return,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Purchase Return Form',
						round(var_rnd_total,0));




select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_beli';

			if var_disc > 0 then
			set var_rnd_diskon = round((var_disc/100 * (var_subtotal) * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_disc,
						concat('Diskon Pembelian - ',var_no_purchase_return),
						var_rnd_diskon);
			end if;

select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_in';
			if var_tax > 0 then
			set var_rnd_ppn = round((-1*var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_tax,
						concat('Pajak Pembelian - ',var_no_purchase_return),
						var_rnd_ppn);
			end if;

				
			select payment_method into var_pay_method from trn_purchase_return_head where no_purchase_return = var_no_purchase_return;
			if var_pay_method = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_purchase';
			elseif var_pay_method = 2 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_credit_purchase';
			end if;

if var_total > 0 then
			set var_rnd_total = (var_subtotal * var_convert_nom) - var_rnd_diskon - var_rnd_ppn;
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_head,
						concat('Retur Pembelian - ',var_no_purchase_return),
						round(var_rnd_total,0));
		end if;


	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_purchase_return_det where no_purchase_return = var_no_purchase_return;
		end if;
		insert into trn_purchase_return_det 
			(no_purchase_return,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_purchase,
			 qty_purch
			)
		values (var_no_purchase_return,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_purchase,
			 var_qty_purch
			);
		
		if varloop = 0 then
			delete from i_stock_out where no_stock_out = var_no_purchase_return;			
		end if;
		insert into i_stock_out (
			no_stock_out,
			date_trn,
			id_item,
			qty,
			id_unit,
			cogs,
			price,
      id_warehouse
		)
		values (
			var_no_purchase_return,
			var_date_trn,
			var_id_item,
			var_qty,
			var_id_unit,
			round((var_cogs * var_convert_nom),0),
			round((var_price * var_convert_nom),0),
      warehouse
		);
		

			
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;
		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_purchase_return  and id_account = var_id_account_det;
		end if;
		
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_det,
						concat('Retur Pembelian - ',var_id_item),
						round((-1*var_nominal*var_convert_nom),0));
		end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_purchase_return_head(
			 no_purchase_return,
			 date_trn,
			 id_supplier,
			 payment_method,
			 subtotal,
			 freight,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 disc,
			 kurs,
			 id_warehouse
			)
		values(var_no_purchase_return,
			 var_date_trn,
			 var_id_supplier,
			 var_paymethod,
			 var_subtotal,
			 var_freight,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_disc,
			 var_kurs,
			 warehouse
			);

		
		set var_rnd_freight = round((var_freight * var_convert_nom),0);
		if var_rnd_freight is null then 
			set var_rnd_freight = 0;
		end if;
		set var_rnd_diskon = round((var_disc/100 * (var_subtotal) * var_convert_nom),0);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round((-1*var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) - var_rnd_diskon - var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;


		if var_paymethod = 2 then
			
			
			
			update ap_status set return_amount = case when return_amount is null then 0 else return_amount end + round(var_rnd_total,0) where no_purchase = var_no_purchase;
	end if;


		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_purchase_return,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Purchase Return Form',
						round(var_rnd_total,0));




select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_beli';
			if var_disc > 0 then
			set var_rnd_diskon = round((var_disc/100 * (var_subtotal) * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_disc,
						concat('Diskon Pembelian - ',var_no_purchase_return),
						var_rnd_diskon);
			end if;

select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_in';
			if var_tax > 0 then
			set var_rnd_ppn = round((-1*var_tax/100 * (var_subtotal-(var_disc/100 * (var_subtotal))) * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_tax,
						concat('Pajak Pembelian - ',var_no_purchase_return),
						var_rnd_ppn);
			end if;

				
			select payment_method into var_pay_method from trn_purchase_return_head where no_purchase_return = var_no_purchase_return;
			if var_pay_method = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_purchase';
			elseif var_pay_method = 2 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_credit_purchase';
			end if;

if var_total > 0 then
			set var_rnd_total = (var_subtotal * var_convert_nom) - var_rnd_diskon - var_rnd_ppn;
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_head,
						concat('Retur Pembelian - ',var_no_purchase_return),
						round(var_rnd_total,0));
		end if;


	elseif var_detail = 1 THEN
		insert into trn_purchase_return_det 
			(no_purchase_return,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_purchase,
			 qty_purch
			)
		values (var_no_purchase_return,
			 var_number_asc,
			 var_id_item,
			 var_notes,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_purchase,
			 var_qty_purch
			);

		insert into i_stock_out (
			no_stock_out,
			date_trn,
			id_item,
			qty,
			id_unit,
			cogs,
			price,
      id_warehouse
		)
		values (
			var_no_purchase_return,
			var_date_trn,
			var_id_item,
			var_qty,
			var_id_unit,
			round(var_cogs*var_convert_nom,0),
			round(var_price*var_convert_nom,0),
			warehouse
		);


		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;
		if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_purchase_return  and id_account = var_id_account_det;
		end if;

		
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_purchase_return,
						var_id_account_det,
						concat('Retur Pembelian - ',var_id_item),
						round((-1*var_nominal*var_convert_nom),0));



	end if;

	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_purchase_return_det where no_purchase_return = var_no_purchase_return;
			delete from trn_purchase_return_head where no_purchase_return = var_no_purchase_return;
			if var_paymethod = 2 then
				
				
				update ap_status set return_amount = case when return_amount is null then 0 else return_amount end - nilai_retur_lalu where no_purchase=var_no_purchase;
				
			end if;
			delete from i_stock_out where no_stock_out = var_no_purchase_return;
			delete from trn_ledger_det where no_ledger = var_no_purchase_return;
			delete from trn_ledger_head where no_ledger = var_no_purchase_return;

	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_recalculate_cogs_avg
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_recalculate_cogs_avg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_recalculate_cogs_avg`(in var_akun1 varchar(30), in var_akun2 varchar(30),in var_tgl_awal date, in var_tgl_akhir date, in var_date_filter integer)
BEGIN
	DECLARE done INT DEFAULT FALSE;
	DECLARE var_item varchar(30);
	DECLARE var_notes text;
	declare i integer;
	DECLARE cur1 CURSOR FOR select id_item from mst_item where (id_item between var_akun1 and var_akun2) order by id_item asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;


	delete from lap_mutasi_hpp;
	set i = 0;
	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_item;
  IF done = 0 THEN
		call sp_cogs_avg(var_item,var_date_filter,var_tgl_awal,var_tgl_akhir,i);
		set i = i+1;
	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

	call sp_update_i_cogs();
	call sp_update_i_cogs3();
	call sp_update_i_cogs2();

		

	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_received_order
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_received_order`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_received_order`(in var_no_received_order varchar(30),in var_no_purchase_order varchar(30),in var_id_supplier varchar(30), in var_date_trn date, in var_notes text, in var_modified_user varchar(30), in var_created_date date, in var_modified_date date, in var_created_user varchar(30), in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(30), in var_detail integer, in varloop integer, in transid varchar(120), in var_received_qty integer, in var_qty_before integer, in var_warehouse_name varchar(250),in var_id_warehouse varchar(30))
BEGIN

declare var_price double;


declare var_convert_nom double;
select case when kurs is null then 1 else kurs end into var_convert_nom from trn_purchase_order_head where no_purchase_order = var_no_purchase_order;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_received_order_det where no_received_order = var_no_received_order;
		delete from trn_received_order_head where no_received_order = var_no_received_order;
		
		insert into trn_received_order_head(
			 no_received_order,
			 no_purchase_order,
			 id_supplier,
			 date_trn,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user
			)
		values(var_no_received_order,
			 var_no_purchase_order,
			 var_id_supplier,
			 var_date_trn,
			 var_notes,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user
			);

	elseif var_detail = 1 THEN
		
		if varloop = 0 THEN
			delete from trn_received_order_det where no_received_order = var_no_received_order;
		end if;

		update trn_purchase_order_det set qty_received = 
		case when qty_received is null then 0 else qty_received end - var_qty_before where no_purchase_order = var_no_purchase_order
		and id_item = var_id_item;
 
		insert into trn_received_order_det 
			(no_received_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 received_qty,
			 id_warehouse,
			 warehouse_name
			)
		values (var_no_received_order,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_received_qty,
			 var_id_warehouse,
			 var_warehouse_name
			);

		update trn_purchase_order_det set qty_received = 
		case when qty_received is null then 0 else qty_received end + var_received_qty where no_purchase_order = var_no_purchase_order and id_item = var_id_item;
		
		
		if varloop = 0 THEN
			delete from i_stock_in where no_stock_in = var_no_received_order;
		end if;

		select price into var_price from trn_purchase_order_det where no_purchase_order = var_no_purchase_order and id_item = var_id_item;
		
		
		
		
		


		insert into i_stock_in 
			(no_stock_in,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
			 id_warehouse
			)
		values (var_no_received_order,
			 var_date_trn,
			 var_id_item,
			 var_received_qty,
			 var_id_unit,
			 round(var_price * var_convert_nom,0),
			 round(var_price * var_convert_nom,0),
			 var_id_warehouse
			);

		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_received_order_head(
			 no_received_order,
			 no_purchase_order,
			 id_supplier,
			 date_trn,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user
			)
		values(var_no_received_order,
					 var_no_purchase_order,
					 var_id_supplier,
				   var_date_trn,
					 var_notes,
					 var_modified_user,
					 var_created_date,
					 var_modified_date,
					 var_created_user
			);
	elseif var_detail = 1 THEN
		insert into trn_received_order_det 
			(no_received_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 received_qty,
			 id_warehouse,
			 warehouse_name
			)
		values (var_no_received_order,
					  var_number_asc,
						var_id_item,
						var_notes_det,
					  var_qty,
						var_id_unit,
					  var_received_qty,
						var_id_warehouse,
						var_warehouse_name
			);

			update trn_purchase_order_det set qty_received = 
			case when qty_received is null then 0 else qty_received end + var_received_qty where no_purchase_order = var_no_purchase_order and id_item = var_id_item;
			
		select price into var_price from trn_purchase_order_det where no_purchase_order = var_no_purchase_order and id_item = var_id_item;
		
		
		
		
		


		insert into i_stock_in 
			(no_stock_in,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
			 id_warehouse
			)
		values (var_no_received_order,
			 var_date_trn,
			 var_id_item,
			 var_received_qty,
			 var_id_unit,
			 round(var_price * var_convert_nom,0),
			 round(var_price * var_convert_nom,0),
			 var_id_warehouse
			);

	end if;

	ELSEIF TRANSID = 'DELETE' THEN
			if var_detail = 0 THEN
				delete from i_stock_in where no_stock_in = var_no_received_order;
				delete from trn_received_order_det where no_received_order = var_no_received_order;
				delete from trn_received_order_head where no_received_order = var_no_received_order;
			end if;
			if var_detail = 1 then
					update trn_purchase_order_det set qty_received = 
					case when qty_received is null then 0 else qty_received end - var_received_qty where no_purchase_order = var_no_purchase_order
					and id_item = var_id_item;
				end if;
END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_reconcile
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_reconcile`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_reconcile`(in var_no_reconcile varchar(60), in var_date_trn date, in var_id_account_head varchar(30), in var_balance_before double, in var_reconcile double, in var_balance_after double, in var_created_user varchar(120), in var_created_date date, in var_modified_user varchar(120), in var_modified_date date, in var_id_account_det varchar(30),  in var_notes text, in var_amount_in double, in var_amount_out double, in var_detail integer, in var_loop integer,in transid varchar(60),in var_notes_head text,in id_curr varchar(30), in var_kurs double)
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_reconcile_det where no_reconcile = var_no_reconcile;
		delete from trn_reconcile_head where no_reconcile = var_no_reconcile;
		delete from trn_ledger_det where no_ledger = var_no_reconcile;
		delete from trn_ledger_head where no_ledger = var_no_reconcile;

		
		insert into trn_reconcile_head (
			no_reconcile,
			date_trn,
			id_account_bank,
			balance_before,
			reconcile,
			balance_after,
			notes,
			created_user,
			created_date,
			modified_user,
			modified_date,
			id_currency,
			kurs
		)
		values(
			var_no_reconcile, 
			var_date_trn, 
			var_id_account_head,
			var_balance_before, 
			var_reconcile,
			var_balance_after,
			var_notes_head,
			var_created_user, 
			var_created_date, 
			var_modified_user, 
			var_modified_date,
			id_curr,
			var_kurs
		);

		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_reconcile,
					 var_date_trn,
					 concat('Reconcile ',var_id_account_head),
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Reconcile Cash/Bank',
						round(var_reconcile * var_kurs,0));
	
			if var_reconcile > 0 then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_head,
					concat('Reconcile ',var_id_account_head),
					round(var_reconcile * var_kurs,0)
				);	
			elseif var_reconcile < 0 THEN
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_head,
					concat('reconcile',var_id_account_head),
					round(-1 * var_reconcile * var_kurs,0)
				);	

			end if;

	elseif var_detail = 1 THEN
			insert into trn_reconcile_det (
				no_reconcile,
				id_account,
				notes,
				amount_in,
				amount_out
			)
			values (
				var_no_reconcile,
				var_id_account_det,
				var_notes,
				var_amount_in,
				var_amount_out
			);
			
			if var_amount_in > 0 then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_det,
					var_notes,
					round(-1 * var_amount_in * var_kurs,0)
				);
			elseif var_amount_out > 0 THEN
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_det,
					var_notes,
					round(var_amount_out * var_kurs,0)
				);
			end if;

	end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 then

		
		insert into trn_reconcile_head (
			no_reconcile,
			date_trn,
			id_account_bank,
			balance_before,
			reconcile,
			balance_after,
			notes,
			created_user,
			created_date,
			modified_user,
			modified_date,
		  id_currency,
			kurs
		)
		values(
			var_no_reconcile, 
			var_date_trn, 
			var_id_account_head,
			var_balance_before, 
			var_reconcile,
			var_balance_after,
			var_notes_head,
			var_created_user, 
			var_created_date, 
			var_modified_user, 
			var_modified_date,
			id_curr,
			var_kurs
		);

		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_reconcile,
					 var_date_trn,
					 concat('Reconcile',var_id_account_head),
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Reconcile Cash/Bank',
						round(var_reconcile * var_kurs,0));
	
			if var_reconcile > 0 then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_head,
					concat('reconcile',var_id_account_head),
					round(var_reconcile * var_kurs,0)
				);	
			elseif var_reconcile < 0 THEN
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_head,
					concat('reconcile',var_id_account_head),
					round(-1 * var_reconcile* var_kurs,0)
				);	

			end if;

	elseif var_detail = 1 THEN
			insert into trn_reconcile_det (
				no_reconcile,
				id_account,
				notes,
				amount_in,
				amount_out
			)
			values (
				var_no_reconcile,
				var_id_account_det,
				var_notes,
				var_amount_in,
				var_amount_out
			);
			
			if var_amount_in > 0 then
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_det,
					var_notes,
					round(-1 * var_amount_in * var_kurs,0)
				);
			elseif var_amount_out > 0 THEN
				insert into trn_ledger_det (
					no_ledger,
					id_account,
					notes,
					nominal
				)
				values (
					var_no_reconcile,
					var_id_account_det,
					var_notes,
					round(var_amount_out * var_kurs,0)
				);
			end if;

	end if;

	ELSEIF TRANSID = 'DELETE' THEN

		delete from trn_reconcile_det where no_reconcile = var_no_reconcile;
		delete from trn_reconcile_head where no_reconcile = var_no_reconcile;
		delete from trn_ledger_det where no_ledger = var_no_reconcile;
		delete from trn_ledger_head where no_ledger = var_no_reconcile;

	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_ro
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_ro`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ro`(in var_no_request_order varchar(30), in var_date_trn date, in var_notes text, in var_modified_user varchar(30), in var_created_date date, in var_modified_date date, in var_created_user varchar(30), in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(30), in var_detail integer, in varloop integer, in transid varchar(120), in var_flag_status int4, in var_id_warehouse varchar(60), in var_date_required date)
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_request_order_det where no_request_order = var_no_request_order;
		delete from trn_request_order_head where no_request_order = var_no_request_order;
		
		insert into trn_request_order_head(
			 no_request_order,
			 date_trn,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 id_warehouse,
			 date_required
			)
		values(var_no_request_order,
			 var_date_trn,
			 var_notes,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_id_warehouse,
			 var_date_required
			);

	elseif var_detail = 1 THEN
		
		insert into trn_request_order_det 
			(no_request_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 flag_status
			)
		values (var_no_request_order,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_flag_status
			);
		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_request_order_head(
			 no_request_order,
			 date_trn,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 id_warehouse,
			 date_required
			)
		values(var_no_request_order,
			 var_date_trn,
			 var_notes,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_id_warehouse,
			 var_date_required
			);
	elseif var_detail = 1 THEN
		insert into trn_request_order_det 
			(no_request_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 flag_status
			)
		values (var_no_request_order,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_flag_status
			);
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

			delete from trn_request_order_det where no_request_order = var_no_request_order;
			delete from trn_request_order_head where no_request_order = var_no_request_order;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_all_ledger
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_all_ledger`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_all_ledger`(in var_akun1 varchar(30), in var_akun2 varchar(30),in var_tgl_awal date, in var_tgl_akhir date, in var_date_filter integer)
BEGIN
	DECLARE done INT DEFAULT FALSE;
	DECLARE var_akun varchar(30);
	DECLARE cur1 CURSOR FOR select id_account from mst_account where (id_account between var_akun1 and var_akun2) and flag_header = 0 order by id_account asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	
	create temporary table if not exists lap_ledger(
		no_ledger varchar(60),
		date_trn date,
		id_account varchar(50),
		account_name varchar(120),
		notes text,
		debet double,
		credit double,
		saldo double,
		company text,
		flag_default varchar(3)
	);

	delete from lap_ledger;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_akun;
  IF NOT done THEN
		call sp_rpt_ledger(var_akun,var_date_filter,var_tgl_awal,var_tgl_akhir);
	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

		select * from lap_ledger;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_all_mutasi_stock
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_all_mutasi_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_all_mutasi_stock`(in var_akun1 varchar(30), in var_akun2 varchar(30),in var_tgl_awal date, in var_tgl_akhir date, in var_date_filter integer, in warehouse varchar(60))
BEGIN
	DECLARE done INT DEFAULT FALSE;
	DECLARE var_item varchar(30);
	DECLARE var_notes text;
	DECLARE cur1 CURSOR FOR select id_item from mst_item where (id_item between var_akun1 and var_akun2) order by id_item asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	
	create temporary table if not exists lap_mutasi_stock(
		no_bukti varchar(60),
		date_trn date,
		id_item varchar(50),
		item_name varchar(120),
		masuk double,
		keluar double,
		saldo double,
		company text,
		notes text,
		unit varchar(30),
		id_warehouse varchar(60)
	);

	delete from lap_mutasi_stock;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_item;
  IF NOT done THEN
		call sp_rpt_mutasi_stock(var_item,var_date_filter,var_tgl_awal,var_tgl_akhir,warehouse);
	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

		select no_bukti,
		date_trn date,
		id_item,
		item_name,
		masuk,
		keluar,
		saldo,
		company,
		notes,unit,id_warehouse from lap_mutasi_stock;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_apbalance_bln_supp
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_apbalance_bln_supp`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_apbalance_bln_supp`(in var_year integer)
BEGIN

declare convertmonth integer;
declare jml_bln,i integer;
declare jml_jan,jml_feb,jml_mar,jml_apr,jml_mei,jml_juni,jml_juli,jml_agust,jml_sept,jml_okt,jml_nov,jml_des double;


	drop temporary table if EXISTS lap_apbalance_bln_supp;
	create temporary table if not EXISTS lap_apbalance_bln_supp(
		id_supplier varchar(30),
		nama_supplier varchar(250),
		Jan double,
		Feb double,
		Mar double,
		Apr double,
		May double,
		June double,
		July double,
		August double,
		Sept double,
		Oct double,
		Nov double,
		Des double,
		Tahun double
	);
	
delete from lap_apbalance_bln_supp;
insert into lap_apbalance_bln_supp (id_supplier, nama_supplier)
select distinct a.id_supplier, concat(b.first_name,' ',b.last_name) as nama from ap_status a 
inner join mst_supplier b on b.id_supplier = a.id_supplier;
 
UPDATE lap_apbalance_bln_supp 
				set Tahun = var_year;

	
				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 1 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Jan = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 2 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Feb = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 3 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Mar = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 4 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Apr = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 5 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set May = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 6 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set June = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 7 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set July = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 8 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set August = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 9 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Sept = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 10 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Oct = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 11 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Nov = b.total;

				UPDATE lap_apbalance_bln_supp a inner join 
				(select case when sum(purchase_amount) is null then 0 else sum(purchase_amount) end - 
				 case when sum(return_amount) is null then 0 else sum(return_amount) end -
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 12 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Des = b.total;
	
	call sp_rpt_apbalance_bln_supp_init0;

	
	select *, (select company_name from mst_company where flag_active = 1) as company_name,
(select id_currency from mst_currency where flag_default = 1) as curr from lap_apbalance_bln_supp;
	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_apbalance_bln_supp_init0
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_apbalance_bln_supp_init0`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_apbalance_bln_supp_init0`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
	declare var_id_supplier varchar(120);
	DECLARE cur1 CURSOR FOR select id_supplier from lap_apbalance_bln_supp;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_id_supplier;
  IF NOT done THEN

		update lap_apbalance_bln_supp 
			set Jan = case when Jan is null then 0 else Jan end, 
					Feb = case when Feb is null then 0 else Feb end,
					Mar = case when Mar is null then 0 else Mar end,
					Apr = case when Apr is null then 0 else Apr end,
					May = case when May is null then 0 else May end,
					June = case when June is null then 0 else June end,
					July = case when July is null then 0 else July end,
					August = case when August is null then 0 else August end,
					Sept = case when Sept is null then 0 else Sept end,
					Oct = case when Oct is null then 0 else Oct end,
					Nov = case when Nov is null then 0 else Nov end,
					Des = case when Des is null then 0 else Des end
		where id_supplier = var_id_supplier;

	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_appayment_bln_supp
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_appayment_bln_supp`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_appayment_bln_supp`(in var_year integer)
BEGIN

declare convertmonth integer;
declare jml_bln,i integer;
declare jml_jan,jml_feb,jml_mar,jml_apr,jml_mei,jml_juni,jml_juli,jml_agust,jml_sept,jml_okt,jml_nov,jml_des double;


	drop temporary table if EXISTS lap_appayment_bln_supp;
	create temporary table if not EXISTS lap_appayment_bln_supp(
		id_supplier varchar(30),
		nama_supplier varchar(250),
		Jan double,
		Feb double,
		Mar double,
		Apr double,
		May double,
		June double,
		July double,
		August double,
		Sept double,
		Oct double,
		Nov double,
		Des double,
		Tahun double
	);
	
delete from lap_appayment_bln_supp;
insert into lap_appayment_bln_supp (id_supplier, nama_supplier)
select distinct a.id_supplier, concat(b.first_name,' ',b.last_name) as nama from ap_status a 
inner join mst_supplier b on b.id_supplier = a.id_supplier;
 
UPDATE lap_appayment_bln_supp 
				set Tahun = var_year;

	
				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 1 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Jan = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 2 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Feb = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 3 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Mar = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 4 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Apr = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 5 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set May = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 6 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set June = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 7 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set July = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 8 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set August = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 9 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Sept = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 10 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Oct = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 11 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Nov = b.total;

				UPDATE lap_appayment_bln_supp a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_supplier
				 from ap_status where month(date_trn) = 12 and year(date_trn) = var_year
				 group by id_supplier) b on b.id_supplier = a.id_supplier
				 set Des = b.total;
	
	call sp_rpt_appayment_bln_supp_init0;

	
	select *, (select company_name from mst_company where flag_active = 1) as company_name,
(select id_currency from mst_currency where flag_default = 1) as curr from lap_appayment_bln_supp;
	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_appayment_bln_supp_init0
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_appayment_bln_supp_init0`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_appayment_bln_supp_init0`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
	declare var_id_supplier varchar(120);
	DECLARE cur1 CURSOR FOR select id_supplier from lap_appayment_bln_supp;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_id_supplier;
  IF NOT done THEN

		update lap_appayment_bln_supp 
			set Jan = case when Jan is null then 0 else Jan end, 
					Feb = case when Feb is null then 0 else Feb end,
					Mar = case when Mar is null then 0 else Mar end,
					Apr = case when Apr is null then 0 else Apr end,
					May = case when May is null then 0 else May end,
					June = case when June is null then 0 else June end,
					July = case when July is null then 0 else July end,
					August = case when August is null then 0 else August end,
					Sept = case when Sept is null then 0 else Sept end,
					Oct = case when Oct is null then 0 else Oct end,
					Nov = case when Nov is null then 0 else Nov end,
					Des = case when Des is null then 0 else Des end
		where id_supplier = var_id_supplier;

	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_arbalance_bln_supp
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_arbalance_bln_supp`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_arbalance_bln_supp`(in var_year integer)
BEGIN

declare convertmonth integer;
declare jml_bln,i integer;
declare jml_jan,jml_feb,jml_mar,jml_apr,jml_mei,jml_juni,jml_juli,jml_agust,jml_sept,jml_okt,jml_nov,jml_des double;


	drop temporary table if EXISTS lap_arbalance_bln_cust;
	create temporary table if not EXISTS lap_arbalance_bln_cust(
		id_customer varchar(30),
		nama_customer varchar(250),
		Jan double,
		Feb double,
		Mar double,
		Apr double,
		May double,
		June double,
		July double,
		August double,
		Sept double,
		Oct double,
		Nov double,
		Des double,
		Tahun double
	);
	
delete from lap_arbalance_bln_cust;
insert into lap_arbalance_bln_cust (id_customer, nama_customer)
select distinct a.id_customer, concat(b.first_name,' ',b.last_name) as nama from ar_status a 
inner join mst_customer b on b.id_customer = a.id_customer;
 
UPDATE lap_arbalance_bln_cust
				set Tahun = var_year;

	
				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				 as total, id_customer
				 from ar_status where month(date_trn) = 1
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Jan = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 2
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Feb = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 3
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Mar = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 4
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Apr = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 5
				 group by id_customer) b on b.id_customer = a.id_customer
				 set May = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end - 
					case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 6
				 group by id_customer) b on b.id_customer = a.id_customer
				 set June = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 7
				 group by id_customer) b on b.id_customer = a.id_customer
				 set July = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 8
				 group by id_customer) b on b.id_customer = a.id_customer
				 set August = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 9
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Sept = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 10
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Oct = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 11
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Nov = b.total;

				UPDATE lap_arbalance_bln_cust a inner join 
				(select case when sum(sales_amount) is null then 0 else sum(sales_amount) end -
				 case when sum(return_amount) is null then 0 else sum(return_amount) end - 
				 case when sum(disc_amount) is null then 0 else sum(disc_amount) end -
				 case when sum(paid_amount) is null then 0 else sum(paid_amount) end
				as total, id_customer
				 from ar_status where month(date_trn) = 12
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Des = b.total;
	
	call sp_rpt_arbalance_bln_supp_init0;

	
	select *, (select company_name from mst_company where flag_active = 1) as company_name,
(select id_currency from mst_currency where flag_default = 1) as curr from lap_arbalance_bln_cust;
	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_arbalance_bln_supp_init0
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_arbalance_bln_supp_init0`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_arbalance_bln_supp_init0`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
	declare var_id_customer varchar(120);
	DECLARE cur1 CURSOR FOR select id_customer from lap_arbalance_bln_cust;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_id_customer;
  IF NOT done THEN

		update lap_arbalance_bln_cust
			set Jan = case when Jan is null then 0 else Jan end, 
					Feb = case when Feb is null then 0 else Feb end,
					Mar = case when Mar is null then 0 else Mar end,
					Apr = case when Apr is null then 0 else Apr end,
					May = case when May is null then 0 else May end,
					June = case when June is null then 0 else June end,
					July = case when July is null then 0 else July end,
					August = case when August is null then 0 else August end,
					Sept = case when Sept is null then 0 else Sept end,
					Oct = case when Oct is null then 0 else Oct end,
					Nov = case when Nov is null then 0 else Nov end,
					Des = case when Des is null then 0 else Des end
		where id_customer = var_id_customer;

	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_arpayment_bln_supp
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_arpayment_bln_supp`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_arpayment_bln_supp`(in var_year integer)
BEGIN

declare convertmonth integer;
declare jml_bln,i integer;
declare jml_jan,jml_feb,jml_mar,jml_apr,jml_mei,jml_juni,jml_juli,jml_agust,jml_sept,jml_okt,jml_nov,jml_des double;


	drop temporary table if EXISTS lap_arpayment_bln_cust;
	create temporary table if not EXISTS lap_arpayment_bln_cust(
		id_customer varchar(30),
		nama_customer varchar(250),
		Jan double,
		Feb double,
		Mar double,
		Apr double,
		May double,
		June double,
		July double,
		August double,
		Sept double,
		Oct double,
		Nov double,
		Des double,
		Tahun double
	);
	
delete from lap_arpayment_bln_cust;
insert into lap_arpayment_bln_cust (id_customer, nama_customer)
select distinct a.id_customer, concat(b.first_name,' ',b.last_name) as nama from ar_status a 
inner join mst_customer b on b.id_customer = a.id_customer;
 
UPDATE lap_arpayment_bln_cust 
				set Tahun = var_year;

	
				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 1
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Jan = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 2
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Feb = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 3
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Mar = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 4
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Apr = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 5
				 group by id_customer) b on b.id_customer = a.id_customer
				 set May = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 6
				 group by id_customer) b on b.id_customer = a.id_customer
				 set June = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 7
				 group by id_customer) b on b.id_customer = a.id_customer
				 set July = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 8
				 group by id_customer) b on b.id_customer = a.id_customer
				 set August = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 9
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Sept = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 10
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Oct = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 11
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Nov = b.total;

				UPDATE lap_arpayment_bln_cust a inner join 
				(select case when sum(paid_amount) is null then 0 else sum(paid_amount) end as total, id_customer
				 from ar_status where month(date_trn) = 12
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Des = b.total;
	
	call sp_rpt_arpayment_bln_supp_init0;

	
	select *, (select company_name from mst_company where flag_active = 1) as company_name,
(select id_currency from mst_currency where flag_default = 1) as curr from lap_arpayment_bln_cust;
	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_arpayment_bln_supp_init0
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_arpayment_bln_supp_init0`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_arpayment_bln_supp_init0`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
	declare var_id_customer varchar(120);
	DECLARE cur1 CURSOR FOR select id_customer from lap_arpayment_bln_cust;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_id_customer;
  IF NOT done THEN

		update lap_arpayment_bln_cust
			set Jan = case when Jan is null then 0 else Jan end, 
					Feb = case when Feb is null then 0 else Feb end,
					Mar = case when Mar is null then 0 else Mar end,
					Apr = case when Apr is null then 0 else Apr end,
					May = case when May is null then 0 else May end,
					June = case when June is null then 0 else June end,
					July = case when July is null then 0 else July end,
					August = case when August is null then 0 else August end,
					Sept = case when Sept is null then 0 else Sept end,
					Oct = case when Oct is null then 0 else Oct end,
					Nov = case when Nov is null then 0 else Nov end,
					Des = case when Des is null then 0 else Des end
		where id_customer = var_id_customer;

	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_cashbank_reg
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_cashbank_reg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_cashbank_reg`(in var_criteria text, in tgl_awal date, in tgl_akhir date, in date_filter integer)
BEGIN

declare filter text;
declare sawalD double;
declare sawalK double;
declare tglsawal date;
declare def char(1);
declare acc_nm varchar(120);
declare company text;
	
	select cast(date_trn as date) into tglsawal from trn_ledger_head order by date_trn asc limit 1;
if date_filter = 1 then
	if tglsawal < tgl_awal then
		set tglsawal = tgl_awal;
	end if;
end if;


select company_name into company from mst_company limit 1;
select def_position into def from mst_account where id_account = var_criteria;
select account_name into acc_nm from mst_account where id_account = var_criteria;

if date_filter = 1 then
	
	select case when b.def_position ='D' then sum(a.nominal) else 0 end into sawalD
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tgl_awal and a.id_account = var_criteria;

	select case when b.def_position ='K' then -1*sum(a.nominal) else 0 end into sawalK
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tgl_awal and a.id_account = var_criteria;
elseif date_filter = 0 THEN
	
	select case when b.def_position ='D' then sum(a.nominal) else 0 end into sawalD
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tglsawal and a.id_account = var_criteria;

	select case when b.def_position ='K' then -1*sum(a.nominal) else 0 end into sawalK
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tglsawal and a.id_account = var_criteria;
end if;


	IF sawalD IS NULL THEN 
		 SET sawalD=0;
	END IF;


	IF sawalK IS NULL THEN 
		 SET sawalK=0;
	END IF;

	create temporary table if not exists lap_cashbank_register(
		no_ledger varchar(60),
		date_trn date,
		id_account varchar(50),
		account_name varchar(120),
		notes text,
		debet double,
		credit double,
		saldo double,
		company text
	);

	delete from lap_cashbank_register;

	if date_filter = 1 then
	if def = 'D' then
	insert into lap_cashbank_register	
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalD - sawalK as saldo, company as company
		union ALL
			select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
			case when a.nominal >= 0 then a.nominal else 0 end as debet,
			case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
			sawalD + a.nominal as saldo, company as company
			from trn_ledger_det a
			inner join mst_account b on b.id_account = a.id_account
			inner join trn_ledger_head c on c.no_ledger=a.no_ledger
			WHERE (c.date_trn between tgl_awal and tgl_akhir) and a.id_account = var_criteria
	) x order by x.date_trn asc;
	elseif def = 'K' THEN
	insert into lap_cashbank_register	
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalK - sawalD as saldo, company as company
		union ALL
			select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
			case when a.nominal >= 0 then a.nominal else 0 end as debet,
			case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
			sawalK - a.nominal as saldo, company as company
			from trn_ledger_det a
			inner join mst_account b on b.id_account = a.id_account
			inner join trn_ledger_head c on c.no_ledger=a.no_ledger
			WHERE (c.date_trn between tgl_awal and tgl_akhir) and a.id_account = var_criteria
	) x order by x.date_trn asc;
	end if;
	elseif date_filter = 0 THEN
	if def = 'D' then
	insert into lap_cashbank_register
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalD - sawalK as saldo, company as company
		union ALL
		select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
		case when a.nominal >= 0 then a.nominal else 0 end as debet,
		case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
		sawalD + a.nominal as saldo, company as company
		from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head c on c.no_ledger=a.no_ledger
		WHERE a.id_account = var_criteria
	) x order by x.date_trn asc;
	elseif def = 'K' then
	insert into lap_cashbank_register
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalK - sawalD as saldo, company as company
		union ALL
		select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
		case when a.nominal >= 0 then a.nominal else 0 end as debet,
		case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
		sawalK - a.nominal as saldo, company as company
		from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head c on c.no_ledger=a.no_ledger
		WHERE a.id_account = var_criteria
	) x order by x.date_trn asc;
	end if;
	end if;

	select * from lap_cashbank_register;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_cogs
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_cogs`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_cogs`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN
declare comp_persediaan_awal text;
declare saldo_persediaan_awal double;
declare comp_persediaan_akhir text;
declare saldo_persediaan_akhir double;
declare comp_pembelian text;
declare saldo_pembelian double;
declare comp_freight text;
declare saldo_freight double;
declare saldo_freight_adj double;
declare comp_retur_beli text;
declare saldo_retur_beli double;
declare comp_disc_beli text;
declare saldo_disc_beli double;
declare saldo_disc_beli_adj double;
declare comp_pembelian_bersih text;
declare saldo_pembelian_bersih double;
declare jml_jual double;
declare perd_awal_periode double;
declare persediaan_transaksi double;
declare barang_tersedia double;
declare hpp double;

	create TEMPORARY TABLE IF NOT EXISTS lap_hpp(
		component text,
		group_component integer,
		nominal double
	);

	
	set comp_freight = 'Biaya Angkut';
	set comp_pembelian = 'Pembelian';
	set comp_persediaan_akhir = 'Persediaan Akhir';
	set comp_persediaan_awal = 'Persediaan Awal';
  set comp_retur_beli = 'Retur Pembelian';
	set comp_disc_beli = 'Diskon Pembelian';
	set comp_pembelian_bersih = 'Pembelian Bersih';

	
	select case when sum(a.beg_balance) is null then 0 else sum(a.beg_balance) end into saldo_persediaan_awal from mst_account a 
	inner join i_cogs_acc_setting b on b.id_account_inv = a.id_account;

	
	if date_filter = 1 then
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into perd_awal_periode from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join i_cogs_acc_setting c on c.id_account_inv = b.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where x.date_trn < var_start_date;
		set saldo_persediaan_awal = saldo_persediaan_awal + perd_awal_periode;
	end if;
	if date_filter = 1 then
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into persediaan_transaksi from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join i_cogs_acc_setting c on c.id_account_inv = b.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where (x.date_trn between var_start_date and var_end_date);
	elseif date_filter = 0 THEN
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into persediaan_transaksi from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join i_cogs_acc_setting c on c.id_account_inv = b.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger;
	end if;

	set saldo_persediaan_akhir = saldo_persediaan_awal + persediaan_transaksi;

	
	if date_filter = 1 then
		select case when sum(b.nominal) is null then 0 else sum(b.nominal) end into saldo_pembelian
		from trn_purchase_head a inner join trn_purchase_det b on b.no_purchase = a.no_purchase
		where a.date_trn between var_start_date and var_end_date;
	elseif date_filter = 0 THEN 
		select case when sum(b.nominal) is null then 0 else sum(b.nominal) end into saldo_pembelian 
		from trn_purchase_head a inner join trn_purchase_det b on b.no_purchase = a.no_purchase;
	end if;

	
	if date_filter = 1 then
		select case when sum(a.freight) is null then 0 else sum(a.freight) end into saldo_freight
		from trn_purchase_head a inner join trn_purchase_det b on b.no_purchase = a.no_purchase
		where a.date_trn between var_start_date and var_end_date;
	elseif date_filter = 0 THEN 
		select case when sum(a.freight) is null then 0 else sum(a.freight) end into saldo_freight
		from trn_purchase_head a inner join trn_purchase_det b on b.no_purchase = a.no_purchase;
	end if;
	

	
	if date_filter = 1 then
		select case when sum((a.subtotal + a.freight)*a.disc/100) is null then 0 else sum((a.subtotal + a.freight)*a.disc/100) end into saldo_disc_beli
		from trn_purchase_head a inner join trn_purchase_det b on b.no_purchase = a.no_purchase
		where a.date_trn between var_start_date and var_end_date;
	elseif date_filter = 0 THEN 
		select case when sum((a.subtotal + a.freight)*a.disc/100) is null then 0 else sum((a.subtotal + a.freight)*a.disc/100) end into saldo_disc_beli
		from trn_purchase_head a inner join trn_purchase_det b on b.no_purchase = a.no_purchase;
	end if;

	
	if date_filter = 1 then
		select case when sum(a.subtotal) is null then 0 else sum(a.subtotal) end into saldo_retur_beli
		from trn_purchase_return_head a inner join trn_purchase_return_det b on b.no_purchase_return = a.no_purchase_return
		where a.date_trn between var_start_date and var_end_date;
	elseif date_filter = 0 THEN 
		select case when sum(a.subtotal) is null then 0 else sum(a.subtotal) end into saldo_retur_beli
		from trn_purchase_return_head a inner join trn_purchase_return_det b on b.no_purchase_return = a.no_purchase_return;
	end if;

	
	if date_filter = 1 then
		select case when sum((a.subtotal + a.freight)*a.disc/100) is null then 0 else sum((a.subtotal + a.freight)*a.disc/100) end into saldo_disc_beli_adj
		from trn_purchase_return_head a inner join trn_purchase_return_det b on b.no_purchase_return = a.no_purchase_return
		where a.date_trn between var_start_date and var_end_date;
	elseif date_filter = 0 THEN 
		select case when sum((a.subtotal + a.freight)*a.disc/100) is null then 0 else sum((a.subtotal + a.freight)*a.disc/100) end end into saldo_disc_beli_adj
		from trn_purchase_return_head a inner join trn_purchase_return_det b on b.no_purchase_return = a.no_purchase_return;
	end if;

	
	if date_filter = 1 then
		select case when sum(a.freight) is null then 0 else sum(a.freight) end into saldo_freight_adj
		from trn_purchase_return_head a inner join trn_purchase_return_det b on b.no_purchase_return = a.no_purchase_return
		where a.date_trn between var_start_date and var_end_date;
	elseif date_filter = 0 THEN 
		select case when sum(a.freight) is null then 0 else sum(a.freight) end into saldo_freight_adj
		from trn_purchase_return_head a inner join trn_purchase_return_det b on b.no_purchase_return = a.no_purchase_return;
	end if;

	set saldo_disc_beli = saldo_disc_beli - saldo_disc_beli_adj;
	set saldo_freight = saldo_freight - saldo_freight_adj;
	set saldo_freight = 0;
	set saldo_disc_beli = 0;
	set saldo_pembelian_bersih = saldo_pembelian + saldo_freight - saldo_disc_beli - saldo_retur_beli;
	set barang_tersedia =  saldo_persediaan_awal + saldo_pembelian_bersih;
	set hpp = barang_tersedia - saldo_persediaan_akhir;

delete from lap_hpp;

insert into lap_hpp
select comp_persediaan_awal,1,saldo_persediaan_awal;

insert into lap_hpp
select comp_pembelian,2,saldo_pembelian;



insert into lap_hpp
select comp_retur_beli,2,saldo_retur_beli;



insert into lap_hpp
select 'Barang Tersedia Di Jual',3,barang_tersedia;

insert into lap_hpp
select comp_persediaan_akhir,4,saldo_persediaan_akhir;

insert into lap_hpp
select 'HARGA POKOK PENJUALAN',5,hpp;

select *,(select company_name from mst_company where flag_active = 1) as company_name from lap_hpp;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_lapumurhutang
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_lapumurhutang`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_lapumurhutang`(in var_param integer)
BEGIN
declare date_now date;
select now() into date_now;

create temporary table if not EXISTS lap_umur_hutang_2(
		no_purchase varchar(120),
		id_supplier varchar(30),
		supplier varchar(250),
		date_trn date,
		total_ap double,
		paid_amount double,
		balance double,
		term_days integer,
		umur_hutang integer,
		jatuh_tempo date
);


delete from lap_umur_hutang_2;
insert into lap_umur_hutang_2
select a.no_purchase, a.id_supplier,concat(c.first_name,' ',c.last_name) as customer, 
a.date_trn,
(case when a.purchase_amount is null then 0 else a.purchase_amount end - 
case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end) as total_ar
, case when a.paid_amount is null then 0 else a.paid_amount end as paid_amount,
(case when a.purchase_amount is null then 0 else a.purchase_amount end - 
case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end) -
case when a.paid_amount is null then 0 else a.paid_amount end
 as balance, b.payment_term_days,
DATEDIFF(date_now,a.date_trn) as umur_piutang,
cast(date_add(a.date_trn,interval b.payment_term_days day) as date) as jatuh_tempo
from ap_status a
inner join trn_purchase_head b on b.no_purchase = a.no_purchase
inner join mst_supplier c on c.id_supplier = b.id_supplier;

select 
	no_purchase, 
	id_supplier,
	supplier,
	date_trn,
	total_ap,
	paid_amount,
	balance,
	term_days,
	jatuh_tempo,
	case when umur_hutang < 30 then balance else 0 end as "<30Hari",
	case when umur_hutang >= 30 and umur_hutang <60 then balance else 0 end as "30-59Hari",
	case when umur_hutang >= 60 and umur_hutang <90 then balance else 0 end as "60-89Hari",
	case when umur_hutang >= 90 and umur_hutang <120 then balance else 0 end as "90-119Hari",
	case when umur_hutang > 120 then balance else 0 end as "<120Hari",
	(select company_name from mst_company where flag_active = 1) as company_name
from lap_umur_hutang_2;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_lapumurpiutang
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_lapumurpiutang`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_lapumurpiutang`(in var_param integer)
BEGIN
declare date_now date;
select now() into date_now;

create temporary table if not EXISTS lap_umur_piutang(
		no_sales varchar(120),
		id_customer varchar(30),
		customer varchar(250),
		date_trn date,
		total_ar double,
		paid_amount double,
		balance double,
		term_days integer,
		umur_piutang integer,
		jatuh_tempo date
);


delete from lap_umur_piutang;
insert into lap_umur_piutang
	select a.no_sales, a.id_customer,concat(c.first_name,' ',c.last_name) as customer, 
a.date_trn,
(case when a.sales_amount is null then 0 else a.sales_amount end - 
case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end) as total_ar
, case when a.paid_amount is null then 0 else a.paid_amount end as paid_amount,
(case when a.sales_amount is null then 0 else a.sales_amount end - 
case when a.return_amount is null then 0 else a.return_amount end - case when a.disc_amount is null then 0 else a.disc_amount end) -
case when a.paid_amount is null then 0 else a.paid_amount end
 as balance, b.termpaydisc,
DATEDIFF(date_now,a.date_trn) as umur_piutang,
cast(date_add(a.date_trn,interval b.termpaydisc day) as date) as jatuh_tempo
from ar_status a
inner join trn_sales_head b on b.no_sales = a.no_sales
inner join mst_customer c on c.id_customer = b.id_customer;

select 
	no_sales, 
	id_customer,
	customer,
	date_trn,
	total_ar,
	paid_amount,
	balance,
	term_days,
	jatuh_tempo,
	case when umur_piutang < 30 then balance else 0 end as "<30Hari",
	case when umur_piutang >= 30 and umur_piutang <60 then balance else 0 end as "30-59Hari",
	case when umur_piutang >= 60 and umur_piutang <90 then balance else 0 end as "60-89Hari",
	case when umur_piutang >= 90 and umur_piutang <120 then balance else 0 end as "90-119Hari",
	case when umur_piutang > 120 then balance else 0 end as "<120Hari",
	(select company_name from mst_company where flag_active = 1) as company_name
from lap_umur_piutang;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_ledger
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_ledger`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_ledger`(in var_criteria text,in date_filter integer, in tgl_awal date, in tgl_akhir date)
BEGIN

declare filter text;
declare sawalD double;
declare sawalK double;
declare saldo_awal double;
declare tglsawal date;
declare def char(1);
declare acc_nm varchar(120);
declare company text;

	select cast(date_trn as date) into tglsawal from trn_ledger_head order by date_trn asc limit 1;
if date_filter = 1 then
	if tglsawal < tgl_awal then
		set tglsawal = tgl_awal;
	end if;
end if;


select company_name into company from mst_company limit 1;
select def_position into def from mst_account where id_account = var_criteria;
select account_name into acc_nm from mst_account where id_account = var_criteria;

if date_filter = 1 then
	
		select case when b.def_position ='D' then sum(a.nominal) else 0 end into sawalD
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
		where c.date_trn < tgl_awal and a.id_account = var_criteria;
	

	select case when b.def_position ='K' then -1*sum(a.nominal) else 0 end into sawalK
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tgl_awal and a.id_account = var_criteria;
elseif date_filter = 0 THEN
	
	select case when b.def_position ='D' then sum(a.nominal) else 0 end into sawalD
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tglsawal and a.id_account = var_criteria;

	select case when b.def_position ='K' then -1*sum(a.nominal) else 0 end into sawalK
				 from trn_ledger_det a inner join mst_account b 
				 on b.id_account = a.id_account
				 inner join trn_ledger_head c on c.no_ledger = a.no_ledger
	where c.date_trn < tglsawal and a.id_account = var_criteria;
end if;


	
	select beg_balance into saldo_awal from mst_account where id_account = var_criteria and flag_header=0;

	IF sawalD IS NULL THEN 
		 SET sawalD=0;
	END IF;


	IF sawalK IS NULL THEN 
		 SET sawalK=0;
	END IF;

	if def = 'D' THEN
		set sawalD = sawalD + saldo_awal;
	elseif def = 'K' THEN
		set sawalK = sawalK +saldo_awal; 
	end if;

	IF sawalD IS NULL THEN 
		 SET sawalD=0;
	END IF;


	IF sawalK IS NULL THEN 
		 SET sawalK=0;
	END IF;

	

	

	if date_filter = 1 then
	if def = 'D' then
	insert into lap_ledger	
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'Saldo Awal Perkiraan' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalD - sawalK as saldo, company as company,def
		union ALL
			select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
			case when a.nominal >= 0 then a.nominal else 0 end as debet,
			case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
			sawalD + a.nominal as saldo, company as company,def
			from trn_ledger_det a
			inner join mst_account b on b.id_account = a.id_account
			inner join trn_ledger_head c on c.no_ledger=a.no_ledger
			WHERE (c.date_trn between tgl_awal and tgl_akhir) and a.id_account = var_criteria
	) x order by x.date_trn asc;
	elseif def = 'K' THEN
	insert into lap_ledger	
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'Saldo Awal Perkiraan' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalK - sawalD as saldo, company as company,def
		union ALL
			select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
			case when a.nominal >= 0 then a.nominal else 0 end as debet,
			case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
			sawalK - a.nominal as saldo, company as company,def
			from trn_ledger_det a
			inner join mst_account b on b.id_account = a.id_account
			inner join trn_ledger_head c on c.no_ledger=a.no_ledger
			WHERE (c.date_trn between tgl_awal and tgl_akhir) and a.id_account = var_criteria
	) x order by x.date_trn asc;
	end if;
	elseif date_filter = 0 THEN
	if def = 'D' then
	insert into lap_ledger
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'Saldo Awal Perkiraan' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalD - sawalK as saldo, company as company,def
		union ALL
		select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
		case when a.nominal >= 0 then a.nominal else 0 end as debet,
		case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
		sawalD + a.nominal as saldo, company as company,def
		from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head c on c.no_ledger=a.no_ledger
		WHERE a.id_account = var_criteria
	) x order by x.date_trn asc;
	elseif def = 'K' then
	insert into lap_ledger
	select * from (
		select 'Saldo Awal' as no_ledger,tglsawal as date_trn,var_criteria as id_account,acc_nm as account_name,'Saldo Awal Perkiraan' as notes,sawalD AS DEBET,sawalK AS KREDIT,
		sawalK - sawalD as saldo, company as company,def
		union ALL
		select a.no_ledger, c.date_trn,a.id_account,b.account_name,a.notes,
		case when a.nominal >= 0 then a.nominal else 0 end as debet,
		case when a.nominal < 0 then -1*a.nominal else 0 end as credit,
		sawalK - a.nominal as saldo, company as company,def
		from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head c on c.no_ledger=a.no_ledger
		WHERE a.id_account = var_criteria
	) x order by x.date_trn asc;
	end if;
	end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_mutasi_stock
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_mutasi_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_mutasi_stock`(in var_criteria text,in date_filter integer, in tgl_awal date, in tgl_akhir date, in warehouse varchar(60))
BEGIN
	declare filter text;
	declare sawal double;
	declare sawal_periodeD double;
	declare sawal_periodeK double;
	declare def varchar(3);
	declare tglsawal date;
	declare item_nm varchar(120);
	declare company text;
	declare var_unit varchar(30);
	declare var_unit_terkecil varchar(30);

	select company_name into company from mst_company limit 1;
	select item_name into item_nm from mst_item where id_item = var_criteria;
	select id_unit into var_unit from i_item_beg_balance where id_item = var_criteria;
	select main_unit into var_unit_terkecil from mst_item where id_item = var_criteria;

	select cast(a.date_trn as date) into tglsawal from 
	(select date_trn from i_stock_in union select date_trn from i_stock_out) a order by a.date_trn asc limit 1;
	if date_filter = 1 then
		if tglsawal < tgl_awal then
			set tglsawal = tgl_awal;
		end if;
	end if;

	if date_filter = 1 then
	
		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeD
		from i_stock_in
		where date_trn < tgl_awal and id_item = var_criteria and id_warehouse = warehouse;

		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeK
		from i_stock_out
		where date_trn < tgl_awal and id_item = var_criteria and id_warehouse = warehouse;
elseif date_filter = 0 THEN
	
		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeD
		from i_stock_in
		where date_trn < tglsawal and id_item = var_criteria and id_warehouse = warehouse;

		select case when sum(qty) is null then 0 else sum(qty) end into sawal_periodeK
		from i_stock_out
		where date_trn < tglsawal and id_item = var_criteria and id_warehouse = warehouse;
end if;

	
	select sum(balance) into sawal from i_item_beg_balance where id_item = var_criteria and id_warehouse = warehouse;
	set sawal_periodeD = sawal_periodeD + sawal;

	IF sawal_periodeD IS NULL THEN 
		 SET sawal_periodeD=0;
	END IF;


	IF sawal_periodeK IS NULL THEN 
		 SET sawal_periodeK=0;
	END IF;

	


	

	if date_filter = 1 then
	insert into lap_mutasi_stock
	select * from (
			select 'Saldo Awal' as no_bukti,tglsawal as date_trn,var_criteria as id_item,item_nm as item_name,sawal_periodeD AS DEBET,sawal_periodeK AS KREDIT,
			sawal_periodeD - sawal_periodeK as saldo, company as company,
			'Saldo Awal Barang',var_unit_terkecil,warehouse
		union ALL
			select a.no_stock_in, a.date_trn,a.id_item,b.item_name,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as debet,
			0,
			sawal_periodeD + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_in,5,3) = 'REV' then 'Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_in,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_in,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_in,5,3) = 'TRF' then 'Pindah Gudang'
			else '' end as notes,var_unit_terkecil, warehouse
			from i_stock_in a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = a.id_item
			WHERE (a.date_trn between tgl_awal and tgl_akhir) and a.id_item = var_criteria and a.id_warehouse = warehouse
		union ALL
			select a.no_stock_out, a.date_trn,a.id_item,b.item_name,
			0,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as kredit,
			sawal_periodeK + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_out,5,3) = 'REV' then 'Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_out,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_out,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_out,5,3) = 'TRF' then 'Pindah Gudang'
			else '' end as notes,var_unit_terkecil, warehouse
			from i_stock_out a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = a.id_item
			WHERE (a.date_trn between tgl_awal and tgl_akhir) and a.id_item = var_criteria and a.id_warehouse = warehouse
	) x order by x.date_trn asc;
	elseif date_filter = 0 THEN
	insert into lap_mutasi_stock
	select * from (
			select 'Saldo Awal' as no_bukti,tglsawal as date_trn,var_criteria as id_item,item_nm as item_name,sawal_periodeD AS DEBET,sawal_periodeK AS KREDIT,
			sawal_periodeD - sawal_periodeK as saldo, company as company,'Saldo Awal Barang',var_unit_terkecil,warehouse
		union ALL
			select a.no_stock_in, a.date_trn,a.id_item,b.item_name,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as debet,
			0,
			sawal_periodeD + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_in,5,3) = 'REV' then 'Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_in,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_in,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_in,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_in,5,3) = 'TRF' then 'Pindah Gudang'
			else '' end as notes,var_unit_terkecil, warehouse
			from i_stock_in a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = a.id_item
			WHERE a.id_item = var_criteria and a.id_warehouse = warehouse
		union ALL
			select a.no_stock_out, a.date_trn,a.id_item,b.item_name,
			0,
			case when (a.qty * c.qty) is null then 0 else (a.qty * c.qty) end as kredit,
			sawal_periodeK + (a.qty * c.qty) as saldo, company as company,
			case when SUBSTR(a.no_stock_out,5,3) = 'REV' then 'Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'PRU' then 'Retur Pembelian'
					 when SUBSTR(a.no_stock_out,5,3) = 'SRU' then 'Retur Penjualan'
					 when SUBSTR(a.no_stock_out,5,2) = 'DO' then 'Penjualan'
					 when SUBSTR(a.no_stock_out,5,3) = 'ADS' then 'Koreksi Stock'
					 when SUBSTR(a.no_stock_out,5,3) = 'TRF' then 'Pindah Gudang'
			else '' end as notes,var_unit_terkecil, warehouse
			from i_stock_out a
			inner join mst_item b on b.id_item = a.id_item
			inner join mst_setunit c on c.id_unit = a.id_unit and c.id_item = a.id_item
			WHERE a.id_item = var_criteria and a.id_warehouse = warehouse
	) x order by x.date_trn asc;
	end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_perubahan_hargabeli
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_perubahan_hargabeli`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_perubahan_hargabeli`(in var int)
BEGIN
	DECLARE done INT DEFAULT FALSE;
	declare var_tanggal date; 
	declare var_id_item varchar(30);
	declare var_price double;
	declare var_id_supplier varchar(250);
	declare var_no_purchase varchar(120);
	declare price_bef double;
	declare var_curr varchar(60);
	DECLARE i integer;
	DECLARE cur1 CURSOR FOR select b.date_trn,a.id_item,a.price,b.id_supplier,b.no_purchase,a.id_curr from trn_purchase_det a
													inner join trn_purchase_head b on b.no_purchase = a.no_purchase order by date_trn asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
	

	drop temporary table if EXISTS lap_perubahan_hargabeli;
	create temporary table if not EXISTS lap_perubahan_hargabeli(
		id_item varchar(30),
		tanggal date,
		harga double,
		supplier varchar(250),
		no_purchase varchar(120),
		id_currency varchar(60)
	);

	delete from lap_perubahan_hargabeli;

	set i = 1;
	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_tanggal, var_id_item, var_price, var_id_supplier, var_no_purchase, var_curr;
  IF NOT done THEN

		
		if i = 1 THEN
				insert into lap_perubahan_hargabeli
				values (var_id_item,var_tanggal,var_price,var_id_supplier,var_no_purchase,var_curr);
		else 
				if price_bef <> var_price THEN
					insert into lap_perubahan_hargabeli
					values (var_id_item,var_tanggal,var_price,var_id_supplier,var_no_purchase,var_curr);
				end if;
		end if;
		set price_bef = var_price;

	END IF;
	set i=i+1;
	UNTIL done END REPEAT;
	CLOSE cur1;
	
select a.id_item,b.item_name,a.tanggal,a.harga,a.no_purchase,concat(c.first_name,' ',c.last_name) as supplier, a.supplier as id_supplier,
(select company_name from mst_company where flag_active = 1) as company_name,id_currency from lap_perubahan_hargabeli a
inner join mst_item b on b.id_item = a.id_item
inner join mst_supplier c on c.id_supplier = a.supplier order by a.tanggal;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_perubahan_modal
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_perubahan_modal`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_perubahan_modal`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN
declare comp_modal_awal text;
declare saldo_modal_awal double;
declare comp_modal_akhir text;
declare saldo_modal_akhir double;
declare saldo_pendapatan double;
declare saldo_biaya double;
declare comp_laba_rugi text;
declare saldo_laba_rugi double;
declare comp_prive text;
declare saldo_prive double;
declare modal_awal_periode double;


	create TEMPORARY TABLE IF NOT EXISTS lap_perubahan_modal(
		component text,
		group_component integer,
		nominal double
	);

	
	set comp_modal_awal = 'Modal Awal';
	set comp_modal_akhir = 'Modal Akhir';
	set comp_laba_rugi = 'Perubahan Laba Rugi';
  set comp_prive = 'Prive';

	
	select case when sum(a.beg_balance) is null then 0 else sum(a.beg_balance) end into saldo_modal_awal from mst_account a 
	inner join i_set_account_def b on b.id_account = a.id_account
	where b.acc_parameter = 'acc_capital';

	
	if date_filter = 1 then
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into modal_awal_periode from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join i_set_account_def c on c.id_account = b.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where x.date_trn < var_start_date and c.acc_parameter = 'acc_capital';
		set saldo_modal_awal = saldo_modal_awal + modal_awal_periode;
	end if;
	if date_filter = 1 then
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into saldo_prive from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join i_set_account_def c on c.id_account = b.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where (x.date_trn between var_start_date and var_end_date)
		and c.acc_parameter = 'acc_capital';
	elseif date_filter = 0 THEN
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into saldo_prive from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join i_set_account_def c on c.id_account = b.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where c.acc_parameter = 'acc_capital';
	end if;
	if date_filter = 1 then
		select case when sum(a.nominal) is null then 0 else abs(sum(a.nominal)) end into saldo_pendapatan from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where (x.date_trn between var_start_date and var_end_date) and b.is_income = 1 and left(b.id_account,1) = 4;
	elseif date_filter = 0 THEN
		select case when sum(a.nominal) is null then 0 else abs(sum(a.nominal)) end into saldo_pendapatan from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where b.is_income = 1 and left(b.id_account,1) = 4;
	end if;
if date_filter = 1 then
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into saldo_biaya from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where (x.date_trn between var_start_date and var_end_date) and b.is_income = 1 and left(b.id_account,1) in (5,6,7);
	elseif date_filter = 0 THEN
		select case when sum(a.nominal) is null then 0 else sum(a.nominal) end into saldo_biaya from trn_ledger_det a
		inner join mst_account b on b.id_account = a.id_account
		inner join trn_ledger_head x on x.no_ledger = a.no_ledger
		where b.is_income = 1 and left(b.id_account,1) in (5,6,7);
	end if;

	set saldo_laba_rugi = saldo_pendapatan - saldo_biaya;
	set saldo_modal_akhir = saldo_modal_awal - saldo_prive + saldo_laba_rugi;
	
delete from lap_perubahan_modal;

insert into lap_perubahan_modal
select comp_modal_awal,1,saldo_modal_awal;

insert into lap_perubahan_modal
select comp_prive,2,saldo_prive;

insert into lap_perubahan_modal
select comp_laba_rugi,3,saldo_laba_rugi;

insert into lap_perubahan_modal
select comp_modal_akhir,4,saldo_modal_akhir;

select *,(select company_name from mst_company where flag_active = 1) as company_name,
(SELECT ID_CURRENCY FROM mst_currency where flag_default = 1) as currency from lap_perubahan_modal;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rangking_pelanggan
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rangking_pelanggan`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rangking_pelanggan`(in date_filter integer, in startdate date, in enddate date)
BEGIN

	create temporary table if not exists lap_rangking_pelanggan(
		id_customer varchar(60),
		nama_customer varchar(250),
		address text,
		sales varchar(120),
		tanggal date
	);

	delete from lap_rangking_pelanggan;

	if date_filter = 1 then
		insert into lap_rangking_pelanggan
		select a.id_customer as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
		b.no_sales as Sales, b.date_trn as Tanggal from mst_customer a inner join 
		trn_sales_head b on b.id_customer = a.id_customer
		where b.date_trn between startdate and enddate;
	elseif date_filter = 0 THEN
		insert into lap_rangking_pelanggan
		select a.id_customer as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
		b.no_sales as Sales, b.date_trn as Tanggal from mst_customer a inner join 
		trn_sales_head b on b.id_customer = a.id_customer;
	end if;

select a.id_customer as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
count(b.sales) as Sales, (select company_name from mst_company where flag_active = 1) as company_name  from mst_customer a inner join 
lap_rangking_pelanggan b on b.id_customer = a.id_customer
group by a.id_customer
order by count(b.sales) desc;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rangking_supplier
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rangking_supplier`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rangking_supplier`(in date_filter integer, in startdate date, in enddate date)
BEGIN

	create temporary table if not exists lap_rangking_supplier(
		id_supplier varchar(60),
		nama_supplier varchar(250),
		address text,
		purchase varchar(120),
		tanggal date
	);

	delete from lap_rangking_supplier;

	if date_filter = 1 then
		insert into lap_rangking_supplier
		select a.id_supplier as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
		b.no_purchase as purchase, b.date_trn as Tanggal from mst_supplier a inner join 
		trn_purchase_head b on b.id_supplier = a.id_supplier
		where b.date_trn between startdate and enddate;
	elseif date_filter = 0 THEN
		insert into lap_rangking_supplier
		select a.id_supplier as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
		b.no_purchase as purchase, b.date_trn as Tanggal from mst_supplier a inner join 
		trn_purchase_head b on b.id_supplier = a.id_supplier;
	end if;

select a.id_supplier as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
count(b.purchase) as purchase, (select company_name from mst_company where flag_active = 1) as company_name  from mst_supplier a inner join 
lap_rangking_supplier b on b.id_supplier = a.id_supplier
group by a.id_supplier
order by count(b.purchase) desc;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rekapomzet_pelanggan
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rekapomzet_pelanggan`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rekapomzet_pelanggan`(in date_filter integer, in startdate date, in enddate date)
BEGIN

	create temporary table if not exists lap_rekapomzet_pelanggan(
		id_customer varchar(60),
		nama_customer varchar(250),
		address text,
		sales double,
		tanggal date,
    id_currency varchar(60)
	);

	delete from lap_rekapomzet_pelanggan;

	if date_filter = 1 then
		insert into lap_rekapomzet_pelanggan
		select a.id_customer as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
		b.subtotal as Sales, b.date_trn as Tanggal,x.id_curr  from mst_customer a inner join 
		trn_sales_head b on b.id_customer = a.id_customer inner join (select distinct no_sales,id_curr from trn_sales_det) x on x.no_sales = b.no_sales
		where b.date_trn between startdate and enddate;
	elseif date_filter = 0 THEN
		insert into lap_rekapomzet_pelanggan
		select a.id_customer as ID, concat(a.first_name,' ',a.last_name) as Nama, a.address as Alamat,
		b.subtotal as Sales, b.date_trn as Tanggal,x.id_curr from mst_customer a inner join 
		trn_sales_head b on b.id_customer = a.id_customer inner join (select distinct no_sales,id_curr from trn_sales_det) x on x.no_sales = b.no_sales;
	end if;

	select id_customer, nama_customer, address, sum(sales) as nominal_penjualan, (select company_name from mst_company where flag_active = 1) as company_name, id_currency 
  from lap_rekapomzet_pelanggan 
	group by id_customer, nama_customer, address, id_currency
	order by sum(sales) desc		
	;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rekappemb_bln_supp
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rekappemb_bln_supp`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rekappemb_bln_supp`(in var_year integer)
BEGIN

declare convertmonth integer;
declare jml_bln,i integer;
declare jml_jan,jml_feb,jml_mar,jml_apr,jml_mei,jml_juni,jml_juli,jml_agust,jml_sept,jml_okt,jml_nov,jml_des double;


	drop temporary table if EXISTS lap_rekapbeli_bln_supp;
	create temporary table if not EXISTS lap_rekapbeli_bln_supp(
		id_supplier varchar(30),
		nama_supplier varchar(250),
		Jan double,
		Feb double,
		Mar double,
		Apr double,
		May double,
		June double,
		July double,
		August double,
		Sept double,
		Oct double,
		Nov double,
		Des double,
		Tahun double,
		curr varchar(60)
	);
	
delete from lap_rekapbeli_bln_supp;
insert into lap_rekapbeli_bln_supp (id_supplier, nama_supplier)
select distinct a.id_supplier, concat(b.first_name,' ',b.last_name) as nama from trn_purchase_head a 
inner join mst_supplier b on b.id_supplier = a.id_supplier;
 
UPDATE lap_rekapbeli_bln_supp 
				set Tahun = var_year;

	
				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 1 and year(date_trn) = var_year
				 group by id_supplier,id_curr) b on b.id_supplier = a.id_supplier
				 set Jan = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 2 and year(date_trn) = var_year
				 group by id_supplier,id_curr) b on b.id_supplier = a.id_supplier
				 set Feb = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 3 and year(date_trn) = var_year
				 group by id_supplier,id_curr) b on b.id_supplier = a.id_supplier
				 set Mar = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 4 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set Apr = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 5 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set May = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 6 and year(date_trn) = var_year
				 group by id_supplier,id_curr) b on b.id_supplier = a.id_supplier
				 set June = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 7 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set July = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 8 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set August = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 9 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set Sept = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 10 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set Oct = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 11 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set Nov = b.total, curr=b.id_curr;

				UPDATE lap_rekapbeli_bln_supp a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_supplier, id_curr 
				 from trn_purchase_head a inner join trn_purchase_det z on z.no_purchase = a.no_purchase where month(date_trn) = 12 and year(date_trn) = var_year
				 group by id_supplier, id_curr) b on b.id_supplier = a.id_supplier
				 set Des = b.total, curr=b.id_curr;
	
	call sp_rpt_rekappemb_bln_supp_init0;

	
	select *, (select company_name from mst_company where flag_active = 1) as company_name from lap_rekapbeli_bln_supp;
	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rekappemb_bln_supp_init0
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rekappemb_bln_supp_init0`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rekappemb_bln_supp_init0`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
	declare var_id_supplier varchar(120);
	DECLARE cur1 CURSOR FOR select id_supplier from lap_rekapbeli_bln_supp;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_id_supplier;
  IF NOT done THEN

		update lap_rekapbeli_bln_supp
			set Jan = case when Jan is null then 0 else Jan end, 
					Feb = case when Feb is null then 0 else Feb end,
					Mar = case when Mar is null then 0 else Mar end,
					Apr = case when Apr is null then 0 else Apr end,
					May = case when May is null then 0 else May end,
					June = case when June is null then 0 else June end,
					July = case when July is null then 0 else July end,
					August = case when August is null then 0 else August end,
					Sept = case when Sept is null then 0 else Sept end,
					Oct = case when Oct is null then 0 else Oct end,
					Nov = case when Nov is null then 0 else Nov end,
					Des = case when Des is null then 0 else Des end
		where id_supplier = var_id_supplier;

	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rekappenj_bln_cust
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rekappenj_bln_cust`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rekappenj_bln_cust`(in var_year integer)
BEGIN

declare convertmonth integer;
declare jml_bln,i integer;
declare jml_jan,jml_feb,jml_mar,jml_apr,jml_mei,jml_juni,jml_juli,jml_agust,jml_sept,jml_okt,jml_nov,jml_des double;


	drop temporary table if EXISTS lap_rekapjual_bln_cust;
	create temporary table if not EXISTS lap_rekapjual_bln_cust(
		id_customer varchar(30),
		nama_customer varchar(250),
		Jan double,
		Feb double,
		Mar double,
		Apr double,
		May double,
		June double,
		July double,
		August double,
		Sept double,
		Oct double,
		Nov double,
		Des double,
		Tahun double,
    curr varchar(60)
	);
	
delete from lap_rekapjual_bln_cust;
insert into lap_rekapjual_bln_cust (id_customer, nama_customer)
select distinct a.id_customer, concat(b.first_name,' ',b.last_name) as nama from trn_sales_head a 
inner join mst_customer b on b.id_customer = a.id_customer;
 
UPDATE lap_rekapjual_bln_cust 
				set Tahun = var_year;

	
				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 1 and year(date_trn) = var_year
				 group by id_customer,id_curr) b on b.id_customer = a.id_customer
				 set Jan = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 2 and year(date_trn) = var_year
				 group by id_customer,id_curr) b on b.id_customer = a.id_customer
				 set Feb = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 3 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set Mar = b.total, curr = b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 4 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set Apr = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 5 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set May = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 6 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set June = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 7 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set July = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 8 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set August = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 9 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set Sept = b.total, curr=b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 10 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set Oct = b.total, curr = b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 11 and year(date_trn) = var_year
				 group by id_customer) b on b.id_customer = a.id_customer
				 set Nov = b.total, curr = b.id_curr;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer, id_curr
				 from trn_sales_head a inner join trn_sales_det z on z.no_sales = a.no_sales where month(date_trn) = 12 and year(date_trn) = var_year
				 group by id_customer, id_curr) b on b.id_customer = a.id_customer
				 set Des = b.total, curr = b.id_curr;
	
	call sp_rpt_rekappenj_bln_cust_init0;

	
	select *, (select company_name from mst_company where flag_active = 1) as company_name from lap_rekapjual_bln_cust;
	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rekappenj_bln_cust_grafik
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rekappenj_bln_cust_grafik`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rekappenj_bln_cust_grafik`(in var_year integer)
BEGIN

declare convertmonth integer;
declare jml_bln,i integer;
declare jml_jan,jml_feb,jml_mar,jml_apr,jml_mei,jml_juni,jml_juli,jml_agust,jml_sept,jml_okt,jml_nov,jml_des double;


	drop temporary table if EXISTS lap_rekapjual_bln_cust;
	create temporary table if not EXISTS lap_rekapjual_bln_cust(
		id_customer varchar(30),
		nama_customer varchar(250),
		Jan double,
		Feb double,
		Mar double,
		Apr double,
		May double,
		June double,
		July double,
		August double,
		Sept double,
		Oct double,
		Nov double,
		Des double,
		Tahun double
	);
	
delete from lap_rekapjual_bln_cust;
insert into lap_rekapjual_bln_cust (id_customer, nama_customer)
select distinct a.id_customer, concat(b.first_name,' ',b.last_name) as nama from trn_sales_head a 
inner join mst_customer b on b.id_customer = a.id_customer;
 
UPDATE lap_rekapjual_bln_cust 
				set Tahun = var_year;

	
				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 1 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Jan = b.total * b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 2 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Feb = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 3 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Mar = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 4 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Apr = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 5 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set May = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 6 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set June = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 7 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set July = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 8 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set August = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 9 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Sept = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 10 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Oct = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 11 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Nov = b.total* b.kurs;

				UPDATE lap_rekapjual_bln_cust a inner join 
				(select case when sum(total) is null then 0 else sum(total) end as total, id_customer,kurs
				 from trn_sales_head where month(date_trn) = 12 and year(date_trn) = var_year
				 group by id_customer,kurs) b on b.id_customer = a.id_customer
				 set Des = b.total* b.kurs;
	
	call sp_rpt_rekappenj_bln_cust_init0;

	
	select sum(jan) as jan,
	sum(feb) as feb,
	sum(mar) as mar,
	sum(apr) as apr,
	sum(may) as may,
	sum(june) as june,
	sum(july) as july,
	sum(august) as august,
	sum(sept) as sept,
	sum(oct) as oct,
	sum(nov) as nov,
	sum(des) as des from lap_rekapjual_bln_cust;
	

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_rekappenj_bln_cust_init0
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_rekappenj_bln_cust_init0`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_rekappenj_bln_cust_init0`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
	declare var_id_customer varchar(120);
	DECLARE cur1 CURSOR FOR select id_customer from lap_rekapjual_bln_cust;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	OPEN cur1;
  REPEAT
  FETCH cur1 INTO var_id_customer;
  IF NOT done THEN

		update lap_rekapjual_bln_cust
			set Jan = case when Jan is null then 0 else Jan end, 
					Feb = case when Feb is null then 0 else Feb end,
					Mar = case when Mar is null then 0 else Mar end,
					Apr = case when Apr is null then 0 else Apr end,
					May = case when May is null then 0 else May end,
					June = case when June is null then 0 else June end,
					July = case when July is null then 0 else July end,
					August = case when August is null then 0 else August end,
					Sept = case when Sept is null then 0 else Sept end,
					Oct = case when Oct is null then 0 else Oct end,
					Nov = case when Nov is null then 0 else Nov end,
					Des = case when Des is null then 0 else Des end
		where id_customer = var_id_customer;

	END IF;
	UNTIL done END REPEAT;
	CLOSE cur1;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_stock
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_stock`(in var_criteria varchar(120), in var_start_date date, in var_end_date date)
BEGIN

declare stock_awal integer;
declare stock_in_bef_period integer;
declare stock_out_bef_period integer;
declare stock_bef_period integer;

create table if not EXISTS temp_mutasi_stock (
	nobukti varchar(120), 
	date_trn date, 
	id_item varchar(60), 
	item_name varchar(250), 
	qty_in integer, 
	qty_out integer,
	notes text
);

select case when sum(balance) is null then 0 else sum(balance) end as balance into stock_awal from i_item_beg_balance where id_item = var_criteria;
select case when sum(qty) is null then 0 else sum(qty) end as qty into stock_in_bef_period from i_stock_in where id_item = var_criteria
and date_trn < var_start_date;
select case when sum(qty) is null then 0 else sum(qty) end as qty into stock_out_bef_period from i_stock_out where id_item = var_criteria
and date_trn < var_start_date;

set stock_bef_period = stock_awal + stock_in_bef_period-stock_out_bef_period;
if stock_bef_period is null THEN
	set stock_bef_period = 0;
end if;

delete from temp_mutasi_stock;
insert into temp_mutasi_stock
select * from (
	select 'Saldo Awal' as nobukti, 
		var_start_date as date_trn,
		var_criteria as id_item,
		"" as item_name,
		stock_bef_period as qty_in,
		0 as qty_out,
		"" as notes
	union all
	select a.no_stock_in, 
		a.date_trn, 
		a.id_item, 
		b.item_name, 
		a.qty qty_in, 
		0 qty_out,
		"Pembelian" as notes
	from i_stock_in a
	inner join mst_item b on b.id_item = a.id_item
	union ALL
	select a.no_stock_out, 
		a.date_trn, 
		a.id_item, 
		b.item_name, 
		0 qty_in, 
		a.qty qty_out,
		"Penjualan" as notes
	from i_stock_out a
	inner join mst_item b on b.id_item = a.id_item) x
where x.id_item = var_criteria
and x.date_trn between var_start_date and var_end_date
order by x.date_trn;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_rpt_stock_summary
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_rpt_stock_summary`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_rpt_stock_summary`(in var_criteria varchar(120), in var_start_date date, in var_end_date date)
BEGIN

declare stock_awal integer;
declare stock_in_bef_period integer;
declare stock_out_bef_period integer;
declare stock_bef_period integer;

create table if not EXISTS temp_mutasi_stock (
	nobukti varchar(120), 
	date_trn date, 
	id_item varchar(60), 
	item_name varchar(250), 
	qty_in integer, 
	qty_out integer,
	notes text
);

select case when sum(balance) is null then 0 else sum(balance) end as balance into stock_awal from i_item_beg_balance where id_item = var_criteria;
select case when sum(qty) is null then 0 else sum(qty) end as qty into stock_in_bef_period from i_stock_in where id_item = var_criteria
and date_trn < var_start_date;
select case when sum(qty) is null then 0 else sum(qty) end as qty into stock_out_bef_period from i_stock_out where id_item = var_criteria
and date_trn < var_start_date;

set stock_bef_period = stock_awal + stock_in_bef_period-stock_out_bef_period;
if stock_bef_period is null THEN
	set stock_bef_period = 0;
end if;

delete from temp_mutasi_stock;
insert into temp_mutasi_stock
select * from (
	select 'Saldo Awal' as nobukti, 
		var_start_date as date_trn,
		var_criteria as id_item,
		"" as item_name,
		stock_bef_period as qty_in,
		0 as qty_out,
		"" as notes
	union all
	select a.no_stock_in, 
		a.date_trn, 
		a.id_item, 
		b.item_name, 
		a.qty qty_in, 
		0 qty_out,
		"Pembelian" as notes
	from i_stock_in a
	inner join mst_item b on b.id_item = a.id_item
	union ALL
	select a.no_stock_out, 
		a.date_trn, 
		a.id_item, 
		b.item_name, 
		0 qty_in, 
		a.qty qty_out,
		"Penjualan" as notes
	from i_stock_out a
	inner join mst_item b on b.id_item = a.id_item) x
where x.id_item = var_criteria
and x.date_trn between var_start_date and var_end_date
order by x.date_trn;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_sales
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_sales`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_sales`(in var_no_sales varchar(30), in var_date_trn date, in var_no_sales_order varchar(30), in var_id_customer varchar(30), in var_payment_method integer, in var_subtotal double, in var_discount double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date, in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(25), in var_price double, in var_nominal double,  in var_id_curr varchar(25), in var_detail integer, in varloop integer, in transid varchar(120),  in var_cogs double, in var_chk_so integer,in var_id_employee varchar(30), in var_term integer, in var_termpaydisc integer, in var_discpay integer,in var_id_account varchar(30), in var_kurs double, in var_id_item_disc varchar(60), in var_item_name_disc varchar(250), in var_qty_disc double, in var_id_unit_disc varchar(30))
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_cogs varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_sales varchar(30);
declare var_cogs double;
declare maks_record_cogs integer;
declare var_convert_nom double;
declare var_rnd_subtotal double;
declare var_rnd_freight double;
declare var_rnd_diskon double;
declare var_rnd_total double;
declare var_rnd_ppn double;

		set var_convert_nom = var_kurs;
		if var_convert_nom is null THEN
			set var_convert_nom = 1;
		end if;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		
		
		if var_payment_method = 2 then
			delete from ar_status where no_sales = var_no_sales;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_sales;
		delete from trn_ledger_head where no_ledger = var_no_sales;
		delete from trn_sales_discitem_det where no_sales = var_no_sales;
		delete from trn_sales_det where no_sales = var_no_sales;
		delete from trn_sales_head where no_sales = var_no_sales;
		

		
			
			if var_payment_method  = 1 THEN
				
				set var_id_account_head = var_id_account;
			elseif var_payment_method  = 2 THEN
				select id_account into var_id_account_head from mst_customer where id_customer = var_id_customer;
			end if;


		if var_chk_so = 1 then
		insert into trn_sales_head(
			 no_sales,
			 date_trn,
			 no_sales_order,
			 id_customer,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 id_account,
			 kurs
			)
		values(var_no_sales,
			 var_date_trn,
			 var_no_sales_order,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
			 var_id_account_head,
			 var_kurs
			);
		elseif var_chk_so = 0 THEN
			insert into trn_sales_head(
			 no_sales,
			 date_trn,
			 id_customer,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 id_account
			)
		values(var_no_sales,
			 var_date_trn,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
			 var_id_account_head
			);
		end IF;

		update trn_sales_order_head set flag_status_invoice = 1 where no_sales_order = var_no_sales_order;

		if var_payment_method = 2 then
			insert into ar_status (
				no_sales,
				date_trn,
				id_customer,
				sales_amount,
				notes
			)
			values (
				var_no_sales,
				var_date_trn,
				var_id_customer,
				round(var_total * var_convert_nom,0),
				var_notes
			);
		end if;


		
		set var_rnd_diskon = round(var_discount/100 * var_subtotal * var_convert_nom,0);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_discount/100 * (var_subtotal))) * var_convert_nom),0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) - var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;
		
		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Form',
						var_rnd_total);

		select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
		select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

		if var_discount > 0 then
			set var_rnd_diskon = round(var_discount/100 * var_subtotal * var_convert_nom,0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales),
						var_rnd_diskon);
		end if;

		if var_tax > 0 then
			set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_discount/100 * (var_subtotal))) * var_convert_nom),0);

			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales),
						-1*var_rnd_ppn);
		end if;

		if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales),
						var_rnd_total);
		end if;

		if var_subtotal > 0 THEN
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_sales,
						concat('Penjualan - ',var_no_sales),
						round(-1*var_subtotal * var_convert_nom,0));
		end if;


	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_sales_det where no_sales = var_no_sales;			
		end if;
		insert into trn_sales_det 
			(no_sales,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr
			)
		values (var_no_sales,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr
			);

		call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		select case when max(nmb_asc) is null then 0 else max(nmb_asc) end into maks_record_cogs from lap_mutasi_hpp where id_item = var_id_item;
		if maks_record_cogs > 0 THEN
			set maks_record_cogs = maks_record_cogs -1;
		ELSE
			set maks_record_cogs = 0;
		end if;

		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item and nmb_asc = maks_record_cogs;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales and id_account in (var_id_account_cogs);
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						var_cogs * var_qty);
	end if;

		if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales and id_account =  var_id_account_det;
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						-1*var_cogs*var_qty);
	end if;
	

	elseif var_detail = 2 THEN
		insert into trn_sales_discitem_det(
			no_sales,
			id_item,
			item_name,
			qty,
			id_unit) 
		values (
			var_no_sales,
			var_id_item_disc,
			var_item_name_disc,
			var_qty_disc,
			var_id_unit_disc
		);

		call sp_recalculate_cogs_avg(var_id_item_disc,var_id_item_disc,var_date_trn,var_date_trn,0);
		select case when max(nmb_asc) is null then 0 else max(nmb_asc) end into maks_record_cogs from lap_mutasi_hpp where id_item = var_id_item_disc;
		if maks_record_cogs > 0 THEN
			set maks_record_cogs = maks_record_cogs -1;
		ELSE
			set maks_record_cogs = 0;
		end if;

		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item_disc and nmb_asc = maks_record_cogs;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_cogs,
						concat('HPP Bonus Item - ',var_id_item_disc),
						var_cogs * var_qty_disc);
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_det,
						concat('Penjualan Bonus Item - ',var_id_item_disc),
						-1*var_cogs*var_qty_disc);
	end if;

end if;


	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 then
		
			if var_payment_method  = 1 THEN
				
				set var_id_account_head = var_id_account;
			elseif var_payment_method  = 2 THEN
				select id_account into var_id_account_head from mst_customer where id_customer = var_id_customer;
			end if;
		if var_chk_so = 1 then
		insert into trn_sales_head(
			 no_sales,
			 date_trn,
			 no_sales_order,
			 id_customer,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 id_account,
			 kurs
			)
		values(var_no_sales,
			 var_date_trn,
			 var_no_sales_order,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
			 var_id_account_head,
			 var_kurs
			);
		elseif var_chk_so = 0 THEN
			insert into trn_sales_head(
			 no_sales,
			 date_trn,
			 id_customer,
			 payment_method,
			 subtotal,
		   discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 term,
			 termpaydisc,
			 discpay,
			 id_account
			)
		values(var_no_sales,
			 var_date_trn,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
		   var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_term,
			 var_termpaydisc,
			 var_discpay,
			 var_id_account_head
			);
		end IF;

		update trn_sales_order_head set flag_status_invoice = 1 where no_sales_order = var_no_sales_order;

		if var_payment_method = 2 then
			insert into ar_status (
				no_sales,
				date_trn,
				id_customer,
				sales_amount,
				notes
			)
			values (
				var_no_sales,
				var_date_trn,
				var_id_customer,
				round(var_total*var_convert_nom,0),
				var_notes
			);
		end if;

		
		set var_rnd_diskon = round(var_discount/100 * var_subtotal * var_convert_nom,0);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_discount/100 * (var_subtotal))) * var_convert_nom),0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) - var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;

		insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Form',
						var_rnd_total);

		select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
		select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

		if var_discount > 0 then
			set var_rnd_diskon = round(var_discount/100 * var_subtotal * var_convert_nom,0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales),
						var_rnd_diskon);
		end if;

		if var_tax > 0 then
			set var_rnd_ppn = round((var_tax/100 * (var_subtotal-(var_discount/100 * (var_subtotal))) * var_convert_nom),0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales),
						-1*var_rnd_ppn);
		end if;


		if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales),
						var_rnd_total);
		end if;

		if var_subtotal > 0 THEN
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
			values (var_no_sales,
						var_id_account_sales,
						concat('Penjualan - ',var_no_sales),
						round(-1*var_subtotal*var_convert_nom,0));
		end if;


	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_sales_det where no_sales = var_no_sales;			
		end if;
		insert into trn_sales_det 
			(no_sales,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr
			)
		values (var_no_sales,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr
			);

		

		call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		select case when max(nmb_asc) is null then 0 else max(nmb_asc) end into maks_record_cogs from lap_mutasi_hpp where id_item = var_id_item;
		if maks_record_cogs > 0 THEN
			set maks_record_cogs = maks_record_cogs -1;
		ELSE
			set maks_record_cogs = 0;
		end if;

		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item and nmb_asc = maks_record_cogs;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales and id_account in (var_id_account_cogs);
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						var_cogs * var_qty);
	end if;

		if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales and id_account =  var_id_account_det;
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						-1*var_cogs*var_qty);
	end if;

	elseif var_detail = 2 THEN
		insert into trn_sales_discitem_det(
			no_sales,
			id_item,
			item_name,
			qty,
			id_unit) 
		values (
			var_no_sales,
			var_id_item_disc,
			var_item_name_disc,
			var_qty_disc,
			var_id_unit_disc
		);

		call sp_recalculate_cogs_avg(var_id_item_disc,var_id_item_disc,var_date_trn,var_date_trn,0);
		select case when max(nmb_asc) is null then 0 else max(nmb_asc) end into maks_record_cogs from lap_mutasi_hpp where id_item = var_id_item_disc;
		if maks_record_cogs > 0 THEN
			set maks_record_cogs = maks_record_cogs -1;
		ELSE
			set maks_record_cogs = 0;
		end if;

		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item_disc and nmb_asc = maks_record_cogs;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_cogs,
						concat('HPP Bonus Item - ',var_id_item_disc),
						var_cogs * var_qty_disc);
	end if;

	if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales,
						var_id_account_det,
						concat('Penjualan Bonus Item - ',var_id_item_disc),
						-1*var_cogs*var_qty_disc);
	end if;

	
end if;

	ELSEIF TRANSID = 'DELETE' THEN
			
		if var_payment_method = 2 then
			delete from ar_status where no_sales = var_no_sales;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_sales;
		delete from trn_ledger_head where no_ledger = var_no_sales;
		delete from trn_sales_discitem_det where no_sales = var_no_sales;
		delete from trn_sales_det where no_sales = var_no_sales;
		delete from trn_sales_head where no_sales = var_no_sales;
		update trn_sales_order_head set flag_status_invoice = 0 where no_sales_order = var_no_sales_order;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_sales_order
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_sales_order`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_sales_order`(in var_no_sales_order varchar(30), in var_id_customer varchar(30), in var_date_trn date, in var_notes text, in var_subtotal double, in var_tax  double, in var_total double, in var_modified_user varchar(30), in var_created_date date, in var_modified_date date, in var_created_user varchar(30),in var_number_asc integer,in var_id_item varchar(30),in var_notes_det text, in var_qty integer, in var_id_unit varchar(30), in var_price double, in var_nominal double, in var_id_curr varchar(30) , in var_detail integer, in varloop integer, in transid varchar(120), in var_kurs double, in var_id_employee varchar(60), in var_item_name varchar(250), in var_id_itemdisc varchar(120), in var_item_namedisc varchar(250), in var_id_unitdisc varchar(60), in var_nom_discbrand double, in var_nom_disctype double, in var_nom_disccat double, in var_discount double, in var_nett_total double, in var_is_discbrand integer, in var_is_disctype integer, in var_is_disccat integer, in var_is_discitem integer, in var_qty_discitem double, in var_id_type varchar(30), in var_id_category varchar(30), in var_id_brand varchar(30))
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_so_discbrand_det where no_sales_order = var_no_sales_order;
		delete from trn_so_disccat_det where no_sales_order = var_no_sales_order;
		delete from trn_so_discitem_det where no_sales_order = var_no_sales_order;
		delete from trn_so_disctype_det where no_sales_order = var_no_sales_order;
		delete from trn_sales_order_det where no_sales_order = var_no_sales_order;
		delete from trn_sales_order_head where no_sales_order = var_no_sales_order;
		
		insert into trn_sales_order_head(
			 no_sales_order,
			 id_customer,
			 date_trn,
			 notes,
			 subtotal,
			 tax,
			 total,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 kurs,
			 id_employee,
			 discount,
			 nett_total,
			 is_discbrand,
			 is_disctype,
			 is_disccat,
			 is_discitem
			)
		values(var_no_sales_order,
			 var_id_customer,
			 var_date_trn,
			 var_notes,
			 var_subtotal,
			 var_tax,
			 var_total,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_kurs,
			 var_id_employee,
			 var_discount,
			 var_nett_total,
			 var_is_discbrand,
			 var_is_disctype,
			 var_is_disccat,
			 var_is_discitem
			);
	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_sales_order_det where no_sales_order = var_no_sales_order;			
		end if;
		insert into trn_sales_order_det 
			(no_sales_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 id_type,
			 id_category,
			 id_brand
			)
		values (var_no_sales_order,
			 var_number_asc,
			 var_id_item,
			 var_notes,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_id_type,
			 var_id_category,
			 var_id_brand
			);
		elseif var_detail = 2 THEN
			insert into trn_so_discbrand_det (
				no_sales_order,
				id_item,
				item_name,
				nom_disc
			) values (
				var_no_sales_order,
				var_id_item,
				var_item_name,
				var_nom_discbrand
			);
		elseif var_detail = 3 THEN
			insert into trn_so_disccat_det (
				no_sales_order,
				id_item,
				item_name,
				nom_disc
			) values (
				var_no_sales_order,
				var_id_item,
				var_item_name,
				var_nom_disccat
			);
		ELSEIF var_detail = 4 THEN
			insert into trn_so_disctype_det (
				no_sales_order,
				id_item,
				item_name,
				nom_disc
			) values (
				var_no_sales_order,
				var_id_item,
				var_item_name,
				var_nom_disctype
			);
		ELSEIF var_detail = 5 THEN
			insert into trn_so_discitem_det (
				no_sales_order,
				id_item,
				item_name,
				qty,
				id_unit
			) values (
				var_no_sales_order,
				var_id_itemdisc,
				var_item_namedisc,
				var_qty_discitem,
				var_id_unitdisc
			);
		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_sales_order_head(
			 no_sales_order,
			 id_customer,
			 date_trn,
			 notes,
			 subtotal,
			 tax,
			 total,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 kurs,
			 id_employee,
			 discount,
			 nett_total,
			 is_discbrand,
			 is_disctype,
			 is_disccat,
			 is_discitem
			)
		values(var_no_sales_order,
			 var_id_customer,
			 var_date_trn,
			 var_notes,
			 var_subtotal,
			 var_tax,
			 var_total,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
			 var_created_user,
			 var_kurs,
			 var_id_employee,
			 var_discount,
			 var_nett_total,
			 var_is_discbrand,
			 var_is_disctype,
			 var_is_disccat,
			 var_is_discitem
			);
	elseif var_detail = 1 THEN
		insert into trn_sales_order_det 
			(no_sales_order,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 id_type,
			 id_category,
			 id_brand
			)
		values (var_no_sales_order,
			 var_number_asc,
			 var_id_item,
			 var_notes_det,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_id_type,
			 var_id_category,
			 var_id_brand
			);

			elseif var_detail = 2 THEN
			insert into trn_so_discbrand_det (
				no_sales_order,
				id_item,
				item_name,
				nom_disc
			) values (
				var_no_sales_order,
				var_id_item,
				var_item_name,
				var_nom_discbrand
			);
		elseif var_detail = 3 THEN
			insert into trn_so_disccat_det (
				no_sales_order,
				id_item,
				item_name,
				nom_disc
			) values (
				var_no_sales_order,
				var_id_item,
				var_item_name,
				var_nom_disccat
			);
		ELSEIF var_detail = 4 THEN
			insert into trn_so_disctype_det (
				no_sales_order,
				id_item,
				item_name,
				nom_disc
			) values (
				var_no_sales_order,
				var_id_item,
				var_item_name,
				var_nom_disctype
			);
		ELSEIF var_detail = 5 THEN
			insert into trn_so_discitem_det (
				no_sales_order,
				id_item,
				item_name,
				qty,
				id_unit
			) values (
				var_no_sales_order,
				var_id_itemdisc,
				var_item_namedisc,
				var_qty_discitem,
				var_id_unitdisc
			);

		end if;

	ELSEIF TRANSID = 'DELETE' THEN
			delete from trn_so_discbrand_det where no_sales_order = var_no_sales_order;
			delete from trn_so_disccat_det where no_sales_order = var_no_sales_order;
			delete from trn_so_discitem_det where no_sales_order = var_no_sales_order;
			delete from trn_so_disctype_det where no_sales_order = var_no_sales_order;
			delete from trn_sales_order_det where no_sales_order = var_no_sales_order;
			delete from trn_sales_order_head where no_sales_order = var_no_sales_order;
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_sales_return
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_sales_return`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_sales_return`(in var_no_sales_return varchar(30), in var_date_trn date, in var_id_customer varchar(30), in var_payment_method integer, in var_subtotal double, in var_disc double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(30), in var_created_date date, in var_modified_user varchar(30), in var_modified_date date, in var_number_asc integer, in var_id_item varchar(30), in var_notes_det text, in var_qty integer, in var_id_unit varchar(25), in var_price double, in var_nominal double,  in var_id_curr varchar(25),in var_no_sales varchar(60), in var_detail integer, in varloop integer, in transid varchar(120), in nilai_retur_lalu double,in var_kurs double, in warehouse varchar(60))
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_cogs varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_sales varchar(30);
declare var_cogs double;
declare var_convert_nom double;
declare var_rnd_subtotal double;
declare var_rnd_freight double;
declare var_rnd_diskon double;
declare var_rnd_total double;
declare var_rnd_ppn double;

		set var_convert_nom = var_kurs;
		if var_convert_nom is null THEN
			set var_convert_nom = 1;
		end if;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_sales_return_det where no_sales_return = var_no_sales_return;
		delete from trn_sales_return_head where no_sales_return = var_no_sales_return;
		delete from i_stock_in where no_stock_in = var_no_sales_return;
		delete from trn_ledger_det where no_ledger = var_no_sales_return;
		delete from trn_ledger_head where no_ledger = var_no_sales_return;
	end if;

if var_detail = 0 THEN
		insert into trn_sales_return_head(
			 no_sales_return,
			 date_trn,
			 id_customer,
			 payment_method,
			 subtotal,
			 disc,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 kurs,
			 id_warehouse
			)
		values(var_no_sales_return,
			 var_date_trn,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
			 var_disc,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_kurs,
			 warehouse
			);

if var_payment_method = 2 then
	
	
	update ar_status set return_amount = case when return_amount is null then 0 else return_amount end - round(nilai_retur_lalu * var_convert_nom,0) where no_sales = var_no_sales;
	update ar_status set return_amount = case when return_amount is null then 0 else return_amount end + round(var_total * var_convert_nom,0) where no_sales = var_no_sales;
	
end if;


		set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;

insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales_return,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Return Form',
						var_rnd_total);

select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
			

			select payment_method into var_pay_method from trn_sales_return_head where no_sales_return = var_no_sales_return;
			if var_pay_method = 1 THEN
				
					select id_account into var_id_account_head from trn_sales_head where no_sales = var_no_sales;
			elseif var_pay_method = 2 THEN
				
					select id_account into var_id_account_head from mst_customer where id_customer = var_id_customer;
			end if;

select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

	if var_disc > 0 then
	set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom); 
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales_return),
						var_rnd_diskon);
			end if;

		if var_tax > 0 then
		set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales_return),
						var_rnd_ppn);
			end if;

if var_total > 0 then
			set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales_return),
						round(-1*var_rnd_total,0));
end if;


	insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_sales,
						concat('Penjualan - ',var_no_sales_return),
						round(var_subtotal * var_convert_nom,0));



	elseif var_detail = 1 THEN

		insert into trn_sales_return_det 
			(no_sales_return,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_sales
			)
		values (var_no_sales_return,
			 var_number_asc,
			 var_id_item,
			 var_notes,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_sales
			);
		

call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item order by date_trn desc limit 1;

		select id_account into var_id_account_det from mst_item where id_item = var_id_item;


		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_cogs;
end if;

if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						-1*var_cogs*var_qty);
end if;



		insert into i_stock_in 
			(no_stock_in,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
			 id_warehouse
			)
		values (var_no_sales_return,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 0,
			 round(var_price * var_convert_nom, 0),
			 warehouse
			);


	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_det;
end if;

		
if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						var_cogs*var_qty);
end if;


		end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_sales_return_head(
			 no_sales_return,
			 date_trn,
			 id_customer,
			 payment_method,
			 subtotal,
			 disc,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 kurs,
		   id_warehouse
			)
		values(var_no_sales_return,
			 var_date_trn,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
			 var_disc,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_kurs,
			 warehouse
			);

if var_payment_method = 2 then
	
	
	
	update ar_status set return_amount = case when return_amount is null then 0 else return_amount end + round(var_total*var_convert_nom,0) where no_sales = var_no_sales;
	
end if;

		set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom);
		if var_rnd_diskon is null then 
			set var_rnd_diskon = 0;
		end if;
		set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
		if var_rnd_ppn is null then 
			set var_rnd_ppn = 0;
		end if;
		set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
		if var_rnd_total is null then 
			set var_rnd_total = 0;
		end if;

insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_sales_return,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Return Form',
						var_rnd_total);

select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_sales';
		select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
			

			select payment_method into var_pay_method from trn_sales_return_head where no_sales_return = var_no_sales_return;
			if var_pay_method = 1 THEN
				
					select id_account into var_id_account_head from trn_sales_head where no_sales = var_no_sales;
			elseif var_pay_method = 2 THEN
				
					select id_account into var_id_account_head from mst_customer where id_customer = var_id_customer;
			end if;

select id_account into var_id_account_sales from i_set_account_def where acc_parameter = 'acc_sales';

	if var_disc > 0 then
			set var_rnd_diskon = round(-1*var_disc/100 * var_subtotal * var_convert_nom);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_disc,
						concat('Diskon Penjualan - ',var_no_sales_return),
						var_rnd_diskon);
			end if;

		if var_tax > 0 then
			set var_rnd_ppn = round(var_tax/100 * (var_subtotal-(var_disc/100 * var_subtotal)) * var_convert_nom,0);
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_tax,
						concat('Pajak Penjualan - ',var_no_sales_return),
						var_rnd_ppn);
			end if;

if var_total > 0 then
			set var_rnd_total = (var_subtotal * var_convert_nom) + var_rnd_diskon + var_rnd_ppn;
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_head,
						concat('Penjualan - ',var_no_sales_return),
						round(-1*var_rnd_total,0));
end if;


	insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_sales,
						concat('Penjualan - ',var_no_sales_return),
						round(var_subtotal * var_convert_nom,0));



	elseif var_detail = 1 THEN

		insert into trn_sales_return_det 
			(no_sales_return,
			 number_asc,
			 id_item,
			 notes,
			 qty,
			 id_unit,
			 price,
			 nominal,
			 id_curr,
			 no_sales
			)
		values (var_no_sales_return,
			 var_number_asc,
			 var_id_item,
			 var_notes,
			 var_qty,
			 var_id_unit,
			 var_price,
			 var_nominal,
			 var_id_curr,
			 var_no_sales
			);
		

call sp_recalculate_cogs_avg(var_id_item,var_id_item,var_date_trn,var_date_trn,0);
		select case when price is null then 0 else price end into var_cogs from lap_mutasi_hpp where id_item = var_id_item order by date_trn desc limit 1;

		select id_account into var_id_account_det from mst_item where id_item = var_id_item;


		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_cogs;
end if;

if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_cogs,
						concat('HPP - ',var_id_item),
						-1*var_cogs*var_qty);
end if;



		insert into i_stock_in 
			(no_stock_in,
			 date_trn,
			 id_item,
			 qty,
			 id_unit,
			 cogs,
			 price,
       id_warehouse
			)
		values (var_no_sales_return,
			 var_date_trn,
			 var_id_item,
			 var_qty,
			 var_id_unit,
			 0,
			 round(var_price * var_convert_nom),
			 warehouse
			);


	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_sales_return and id_account =  var_id_account_det;
end if;

		
if var_cogs > 0 then
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_sales_return,
						var_id_account_det,
						concat('Penjualan - ',var_id_item),
						var_cogs*var_qty);
end if;


		end if;

	ELSEIF TRANSID = 'DELETE' THEN
			delete from trn_sales_return_det where no_sales_return = var_no_sales_return;
			delete from trn_sales_return_head where no_sales_return = var_no_sales_return;
			if var_payment_method = 2 then
				
				
				update ar_status set return_amount = case when return_amount is null then 0 else return_amount end - round(nilai_retur_lalu*var_convert_nom,0) where no_sales = var_no_sales;
				
			end if;
			delete from i_stock_in where no_stock_in = var_no_sales_return;
			delete from trn_ledger_det where no_ledger = var_no_sales_return;
			delete from trn_ledger_head where no_ledger = var_no_sales_return;
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_sales_service
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_sales_service`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_sales_service`(in var_no_service varchar(60), in var_id_customer varchar(60), in var_payment_method integer, in var_subtotal double, in var_discount double, in var_tax double, in var_total double, in var_notes text, in var_created_user varchar(60), in  var_created_date date,  in var_modified_user varchar(60), in var_modified_date date,  in var_date_trn date, in var_number_asc integer, in var_id_service varchar(60), in var_id_employee varchar(60), in  var_notes_det text, in var_qty integer, in var_price double, in var_nominal double, in var_id_curr varchar(30), in var_notes_ledger text, in var_amount double, in var_number_asc_item integer, in var_id_item varchar(30), in  var_notes_item text, in varloop integer, in var_detail integer, in transid varchar(120))
BEGIN
declare var_pay_method integer;
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 THEN
		if var_payment_method = 2 then
			delete from ar_status where no_sales = var_no_service;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_service;
		delete from trn_ledger_head where no_ledger = var_no_service;
		delete from trn_service_item_det where no_service = var_no_service;
		delete from trn_service_det where no_service = var_no_service;
		delete from trn_service_head where no_service = var_no_service;	

			insert into trn_service_head(
			 no_service,
			 id_customer,
			 payment_method,
			 subtotal,
			 discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 date_trn
			)
		values(var_no_service,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
			 var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_date_trn
			);

insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_service,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Service Form',
						var_total);


if var_payment_method = 2 then
		insert into ar_status (
			no_sales,
			date_trn,
			id_customer,
			sales_amount,
			notes
		)
		values (
			var_no_service,
			var_date_trn,
			var_id_customer,
			var_total,
			var_notes
		);
	end if;

select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_service';
			if var_discount > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_disc,
						var_notes,
						var_discount/100 * var_subtotal);
			end if;

select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
			if var_tax > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_tax,
						var_notes,
						-1*var_tax/100 * (var_subtotal-(var_discount/100 * var_subtotal)));
				end if;


			select payment_method into var_pay_method from trn_service_head where no_service = var_no_service;
			if var_pay_method = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_service';
			elseif var_pay_method = 2 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_credit_service';
			end if;

if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_head,
						concat('Penjualan Jasa - ',var_no_service),
						var_total);
end if;


		elseif var_detail = 1 THEN

		IF VAR_LOOP = 0 THEN
			delete from trn_service_det where no_service = var_no_service;
		END IF;

			insert into trn_service_det 
				(no_service,
				number_asc,
				id_service,
				id_employee,
				notes,
				qty,
				price,
				nominal,
				id_curr
				)
		values (var_no_service,
						var_number_asc,
					  var_id_service,
					  var_id_employee,
						var_notes,
						var_qty,
						var_price,
					  var_nominal,
					  var_id_curr
					 );



		select id_account into var_id_account_det from mst_service where id_service = var_id_service;
if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_service  and id_account = var_id_account_det;	
end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_det,
						var_notes,
						-1*var_nominal);

	elseif var_detail = 2 THEN

		if varloop = 0 then
			delete from trn_service_item_det where no_service = var_no_service;			
		end if;
		insert into trn_service_item_det 
			(no_service,
			 number_asc,
			 id_item,
			 notes
			)
		values (var_no_service,
						var_number_asc,
						var_id_item,
						var_notes
					);

	end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
			insert into trn_service_head(
			 no_service,
			 id_customer,
			 payment_method,
			 subtotal,
			 discount,
			 tax,
			 total,
			 notes,
			 created_user,
			 created_date,
			 modified_user,
			 modified_date,
			 date_trn
			)
		values(var_no_service,
			 var_id_customer,
			 var_payment_method,
			 var_subtotal,
			 var_discount,
			 var_tax,
			 var_total,
			 var_notes,
			 var_created_user,
			 var_created_date,
			 var_modified_user,
			 var_modified_date,
			 var_date_trn
			);

if var_payment_method = 2 then
		insert into ar_status (
			no_sales,
			date_trn,
			id_customer,
			sales_amount,
			notes
		)
		values (
			var_no_service,
			var_date_trn,
			var_id_customer,
			var_total,
			var_notes
		);
	end if;


insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_service,
					 var_date_trn,
					 var_notes,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Sales Service Form',
						var_total);

select id_account into var_id_account_disc from i_set_account_def where acc_parameter = 'acc_disc_service';
			if var_discount > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_disc,
						var_notes,
						var_discount/100 * var_subtotal);
			end if;

select id_account into var_id_account_tax from i_set_account_def where acc_parameter = 'acc_tax_out';
			if var_tax > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_tax,
						var_notes,
						-1*var_tax/100 * (var_subtotal-(var_discount/100 * var_subtotal)));
				end if;


			select payment_method into var_pay_method from trn_service_head where no_service = var_no_service;
			if var_pay_method = 1 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_cash_service';
			elseif var_pay_method = 2 THEN
				select id_account into var_id_account_head from i_set_account_def where acc_parameter = 'acc_credit_service';
			end if;

if var_total > 0 then
			insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_head,
						concat('Penjualan Jasa - ',var_no_service),
						var_total);
end if;


		elseif var_detail = 1 THEN
			insert into trn_service_det 
				(no_service,
				number_asc,
				id_service,
				id_employee,
				notes,
				qty,
				price,
				nominal,
				id_curr
				)
		values (var_no_service,
						var_number_asc,
					  var_id_service,
					  var_id_employee,
						var_notes,
						var_qty,
						var_price,
					  var_nominal,
					  var_id_curr
					 );



if varloop = 0 then
			delete from trn_ledger_det where no_ledger = var_no_service  and id_account = var_id_account_det;	
end if;

		
		select id_account into var_id_account_det from mst_service where id_service = var_id_service;
		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_service,
						var_id_account_det,
						var_notes,
						-1*var_nominal);

	elseif var_detail = 2 THEN

		if varloop = 0 then
			delete from trn_service_item_det where no_service = var_no_service;			
		end if;
		insert into trn_service_item_det 
			(no_service,
			 number_asc,
			 id_item,
			 notes
			)
		values (var_no_service,
						var_number_asc,
						var_id_item,
						var_notes
					);

	end if;

	ELSEIF TRANSID = 'DELETE' THEN
			if var_payment_method = 2 then
			delete from ar_status where no_sales = var_no_service;
		end if;
		delete from trn_ledger_det where no_ledger = var_no_service;
		delete from trn_ledger_head where no_ledger = var_no_service;
		delete from trn_service_item_det where no_service = var_no_service;
		delete from trn_service_det where no_service = var_no_service;
		delete from trn_service_head where no_service = var_no_service;	
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_sawal_stock
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_sawal_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_sawal_stock`(in var_criteria varchar(120), in var_start_date date, in var_end_date date)
BEGIN

declare stock_awal integer;
declare stock_in_bef_period integer;
declare stock_out_bef_period integer;
declare stock_bef_period integer;

select balance into stock_awal from i_item_beg_balance where id_item = var_criteria;
select qty into stock_in_bef_period from i_stock_in where id_item = var_criteria
and date_trn < var_start_date;
select qty into stock_out_bef_period from i_stock_out where id_item = var_criteria
and date_trn < var_start_date;

set stock_bef_period = stock_in_bef_period-stock_out_bef_period;

select var_criteria as id_item,stock_bef_period;
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_select_opname
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_select_opname`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_select_opname`(in var_gudang varchar(120))
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

	
	
		
		select a.id_item, a.item_name, a.main_unit,
case when (case when b.balance is null then 0 else b.balance end + 
					 case when c.TotalBeli is null then 0 else c.TotalBeli end - 
					 case when d.TotalJual is null then 0 else d.TotalJual end) is null then 0 else 
(case when b.balance is null then 0 else b.balance end + 
 case when c.TotalBeli is null then 0 else c.TotalBeli end - 
 case when d.TotalJual is null then 0 else d.TotalJual end) end as balance from mst_item a 
inner join i_item_beg_balance b on b.id_item = a.id_item
left join (
	select id_item,case when sum(qty) is null then 0 else sum(qty) end as TotalBeli 
	from i_stock_in GROUP BY id_item order by id_item) c 
on c.id_item = a.id_item
left join (
	select id_item,case when sum(qty) is null then 0 else sum(qty) end as TotalJual 
	from i_stock_out GROUP BY id_item order by id_item) d 
on d.id_item = a.id_item
where a.id_warehouse = var_gudang;



END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_service
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_service`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_service`(in var_id_service varchar(25), in var_service_name varchar(60), in var_id_account varchar(25), in var_price double, in var_senior_commission double,in var_junior_commission double, in var_modified_user varchar(120),in var_created_date datetime, in var_modified_date datetime,in var_created_user varchar(120), transid varchar(60))
BEGIN

IF TRANSID = 'UPDATE' THEN
	BEGIN
		UPDATE mst_service
		SET 
			service_name = var_service_name,
			id_account = var_id_account,
			price = var_price,
			senior_commission = var_senior_commission,
			junior_commission = var_junior_commission,
			modified_user = var_modified_user,
			created_date = var_created_date,
			modified_date = var_modified_date,
			created_user = var_created_user
		WHERE
			id_service = var_id_service;
	END;
ELSEIF TRANSID = 'INSERT' THEN
BEGIN
	INSERT INTO mst_service (
		id_service,
		service_name,
		id_account,
		price,
		senior_commission,
		junior_commission,
		modified_user,
		created_date,
		modified_date,
		created_user
	)
VALUES
	(
		var_id_service,
		var_service_name,
		var_id_account,
		var_price,
		var_senior_commission,
		var_junior_commission,
		var_modified_user,
		var_created_date,
		var_modified_date,
		var_created_user
	);

END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_service
WHERE
	id_service = var_id_service;
END;


END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_setdef_curr
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_setdef_curr`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_setdef_curr`()
BEGIN
	update mst_currency set flag_default = 1 where id_currency = 'IDR';

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_setup_cashbank
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_setup_cashbank`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_setup_cashbank`(in var_id_account varchar(30), in varloop integer,in var_user varchar(120),in var_date date, in i integer)
BEGIN

		if varloop = 0 then
		delete from i_cashbank_setup;
		end if;
		
		if i = 1 then
		insert into i_cashbank_setup(
			 id_account,
			 id_cashbank,
			 modified_by,
			 modified_at
			)
		values(var_id_account,
					 1,
					 var_user,
					 var_date
				   );
		end if;

		if i = 2 then
		
		insert into i_cashbank_setup(
			 id_account,
			 id_cashbank,
			 modified_by,
			 modified_at
			)
		values(var_id_account,
					 2,
					 var_user,
					 var_date
				   );
		end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_setup_coa
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_setup_coa`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_setup_coa`(in var_acc_parameter varchar(60),in var_id_account varchar(30),in var_notes text , in varloop integer)
BEGIN

		if varloop = 0 then
			delete from i_set_account_def;
		end if;
		

		insert into i_set_account_def(
			 acc_parameter,
			 id_account,
			 notes
			)
		values(
					var_acc_parameter,
					var_id_account,
					var_notes
				   );
		

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_setup_coa_aset
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_setup_coa_aset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_setup_coa_aset`(in var_id_coa_akumulasi varchar(30), in var_id_coa_aset varchar(30), in var_id_coa_penyusutan varchar(30), in var_id_aset varchar(30))
BEGIN

		update mst_aset set id_coa_akumulasi = var_id_coa_akumulasi, id_coa_aset = var_id_coa_aset, id_coa_penyusutan = var_id_coa_penyusutan
		where id_aset = var_id_aset;
		

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_set_itemdisc_det
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_set_itemdisc_det`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_set_itemdisc_det`(in var_id_item varchar(120), in var_id_item_disc varchar(120), in var_qty double, in crud varchar(60), in var_id_unit varchar(30))
BEGIN

if crud = 'INSERT' then
insert into mst_item_disc (id_item, id_item_disc, qty, id_unit) 
values (var_id_item, var_id_item_disc, var_qty, var_id_unit);
elseif crud = 'UPDATE' THEN
insert into mst_item_disc (id_item, id_item_disc, qty, id_unit) 
values (var_id_item, var_id_item_disc, var_qty, var_id_unit);
elseif crud = 'DELETE' THEN
delete from mst_item_disc where id_item = var_id_item;
end if;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_set_marketing
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_set_marketing`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_set_marketing`(in var_id_employee varchar(60), in var_modified_user varchar(200), in var_created_date date, in var_modified_date date, in var_created_user varchar(200), transid text)
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	INSERT INTO mst_marketing (
		id_employee,
		modified_user,
		created_date,
		modified_date,
		created_user
	)
VALUES
	(
		var_id_employee,
		var_modified_user,
		var_created_date,
		var_modified_date,
		var_created_user
	);
END;


ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_marketing
WHERE
	id_employee = var_id_employee;


END;


END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_set_unit
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_set_unit`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_set_unit`(in var_id_item varchar(25), in var_id_unit varchar(15), in var_qty double, in var_id_satuandef varchar(15),in var_notes text, in var_created_user varchar(120), in var_created_date datetime, in var_modified_user varchar(120), in var_modified_date datetime, transid varchar(60))
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_setunit
SET 
	qty = var_qty,
	notes = var_notes,
	created_user = var_created_user,
	created_date = var_created_date,
	modified_user = var_modified_user,
	modified_date = var_modified_date
WHERE
	id_item = var_id_item
AND 
	id_unit = var_id_unit
AND 
	id_satuandef=var_id_satuandef;


END;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	INSERT INTO mst_setunit (
		id_item,
		id_unit,	
		qty,
		id_satuandef,
		notes,
		created_user,
		created_date,
		modified_user,
		modified_date
	)
VALUES
	(
		var_id_item,
		var_id_unit,
		var_qty,
		var_id_satuandef,
		var_notes,
		var_created_user,
		var_created_date,
		var_modified_user,
		var_modified_date
	);

END;


ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_setunit
WHERE
	id_item = var_id_item
AND 
	id_unit = var_id_unit
AND 
	id_satuandef=var_id_satuandef;

END;


END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_simulasi_cek_aset
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_simulasi_cek_aset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_simulasi_cek_aset`(in var_id_golongan varchar(30), in var_nilai_perolehan double, in var_tgl_perolehan date)
BEGIN
declare var_masa_penyusutan double;
declare var_masa_manfaat double;
declare var_th_penyusutan double;
declare var_rate_penyusutan double;
declare var_sisa_nilai_buku double;
declare var_total_penyusutan double;
declare var_tgl_server date;
declare var_bln_server double;
declare var_th_server double;


set var_tgl_server = (select now());
set var_bln_server = month(var_tgl_server);
set var_th_server = year(var_tgl_server);

select rate_penyusutan into var_rate_penyusutan from mst_golaset where id_golongan = var_id_golongan;
select masa_manfaat into var_masa_manfaat from mst_golaset where id_golongan = var_id_golongan;

if var_th_server = year(var_tgl_perolehan) THEN
		set var_masa_penyusutan = MONTH(var_tgl_server) - month(var_tgl_perolehan);
elseif var_th_server > year(var_tgl_perolehan) THEN
		if var_bln_server > month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = (var_th_penyusutan * 12) + var_bln_server - month(var_tgl_perolehan);
		elseif var_bln_server < month(var_tgl_perolehan) then 
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan)) -1;
			set var_masa_penyusutan = (var_th_penyusutan * 12) + 12 - (month(var_tgl_perolehan)) + var_bln_server;
		elseif var_bln_server = month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = var_th_penyusutan * 12;
		end if;
ELSE
		set var_masa_penyusutan = 0;
end if;

set var_sisa_nilai_buku = var_nilai_perolehan - (var_nilai_perolehan * var_rate_penyusutan/100/12 * var_masa_penyusutan);
set var_total_penyusutan = var_nilai_perolehan * var_rate_penyusutan/100/12 * var_masa_penyusutan;

select var_nilai_perolehan as harga_perolehan, var_masa_manfaat as masa_manfaat, concat(var_rate_penyusutan,' %') as rate_depr_th, concat(var_masa_penyusutan,' Bulan') as masa_penyusutan, var_rate_penyusutan/100 * var_nilai_perolehan as depr_th,
var_total_penyusutan as akumulasi_penyusutan, var_sisa_nilai_buku as nilai_buku;



END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_standard_cost
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_standard_cost`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_standard_cost`(in var_id_cost varchar(25), in var_cost_name varchar(60),in var_cost_def double,in var_flag_active integer,in var_notes text,in var_id_account varchar(30), in var_modified_user varchar(120),in var_created_date datetime,in var_modified_date datetime, in var_created_user varchar(120),in  transid varchar(60))
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_standard_cost
SET cost_name = var_cost_name,
cost_def = var_cost_def,
flag_active = var_flag_active,
notes = var_notes,
id_account=var_id_account,
modified_user = var_modified_user,
created_date = var_created_date,
modified_date = var_modified_date,
created_user = var_created_user
WHERE
	id_cost = var_id_cost;
END;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	INSERT INTO mst_standard_cost (
		id_cost,
cost_name,
cost_def,
flag_active,
notes,
id_account,
modified_user,
created_date,
modified_date,
created_user
	)
VALUES
	(
		var_id_cost,
var_cost_name,
var_cost_def,
var_flag_active,
var_notes,
var_id_account,
var_modified_user,
var_created_date,
var_modified_date,
var_created_user
	);


END;


ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_standard_cost
WHERE
	id_cost = var_id_cost;


END;


END
IF;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_stock_adjust
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_stock_adjust`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_stock_adjust`(in var_no_adjust_stock varchar(30), in var_date_trn date, in var_id_warehouse varchar(30),in var_total_adjust double, in var_modified_user varchar(120), in var_created_date date, in  var_modified_date date,  in var_created_user varchar(120),in var_id_item varchar(30), in var_notes text, in var_positive double, in var_negative double, in transid varchar(60), in varloop integer, in var_detail integer, in var_desc text,in var_id_unit varchar(30))
BEGIN
declare var_id_account_head varchar(30);
declare var_id_account_det varchar(30);
declare var_id_account_cogs varchar(30);
declare var_id_account_disc varchar(30);
declare var_id_account_tax varchar(30);
declare var_id_account_sales varchar(30);
declare var_cogs double;

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from trn_ledger_det where no_ledger = var_no_adjust_stock;
		delete from trn_ledger_head where no_ledger = var_no_adjust_stock;
		delete from i_stock_in where no_stock_in = var_no_adjust_stock;
		delete from i_stock_out where no_stock_out = var_no_adjust_stock;
		delete from trn_adjust_stock_det where no_adjust_stock = var_no_adjust_stock;
		delete from trn_adjust_stock_head where no_adjust_stock = var_no_adjust_stock;
		
		insert into trn_adjust_stock_head(
			 no_adjust_stock,
			 date_trn,
			 id_warehouse,
			 total_adjust,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 notes
			)
		values(var_no_adjust_stock,
			 var_date_trn,
			 var_id_warehouse,
			 var_total_adjust,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
		   var_created_user,
			 var_desc
			);

			insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_adjust_stock,
					 var_date_trn,
					 var_desc,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Adjust Stock Form',
					 var_total_adjust);

	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_adjust_stock_det where no_adjust_stock = var_no_adjust_stock;			
		end if;
		insert into trn_adjust_stock_det 
			(no_adjust_stock,
			id_item,
			notes,
			positive,
			negative,
			id_unit
			)
		values (var_no_adjust_stock,
				var_id_item,
				var_notes,
				var_positive,
				var_negative,
				var_id_unit
			);
		end if;

if var_positive > 0 then
		insert into i_stock_in 
		(no_stock_in,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no_adjust_stock,
		 var_date_trn,
		 var_id_item,
		 var_positive,
		 var_id_unit,
		 0,0,
		 var_id_warehouse
		);

call sp_calculate_cogs(var_date_trn, var_id_item);
		select cogs into var_cogs from i_cogs where id_item = var_id_item and date_trn < var_date_trn order by date_trn desc limit 1;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account in (var_id_account_cogs);
	end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_cogs,
						concat('Adjust Stock - ',var_id_item),
						-1*var_cogs);

		if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account =  var_id_account_det;
		end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_det,
						concat('Adjust Stock - ',var_id_item),
						var_cogs);

end if;

if var_negative > 0 THEN
	insert into i_stock_out
		(no_stock_out,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no_adjust_stock,
		 var_date_trn,
		 var_id_item,
		 var_negative,
		 var_id_unit,
		 0,0,
		 var_id_warehouse
		);

call sp_calculate_cogs(var_date_trn, var_id_item);
		select cogs into var_cogs from i_cogs where id_item = var_id_item and date_trn < var_date_trn order by date_trn desc limit 1;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;


	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account in (var_id_account_cogs);
	end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_cogs,
						concat('Adjust Stock - ',var_id_item),
						var_cogs);

		if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account =  var_id_account_det;
		end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_det,
						concat('Adjust Stock - ',var_id_item),
						-1*var_cogs);

end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
		insert into trn_adjust_stock_head(
			 no_adjust_stock,
			 date_trn,
			 id_warehouse,
			 total_adjust,
			 modified_user,
			 created_date,
			 modified_date,
			 created_user,
			 notes
			)
		values(var_no_adjust_stock,
			 var_date_trn,
			 var_id_warehouse,
			 var_total_adjust,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
		   var_created_user,
			 var_desc
			);

			insert into trn_ledger_head(
				no_ledger,
				date_trn,
				description,
				created_user,
				created_date,
				modified_user,
				modified_date,
				post_from,
				total
			)
		values(var_no_adjust_stock,
					 var_date_trn,
					 var_desc,
				   var_created_user,
					 var_created_date,
					 var_modified_user,
					 var_modified_date,
					 'Adjust Stock Form',
					 var_total_adjust);

	elseif var_detail = 1 THEN
		insert into trn_adjust_stock_det 
			(no_adjust_stock,
			id_item,
			notes,
			positive,
			negative,
			id_unit
			)
		values (var_no_adjust_stock,
				var_id_item,
				var_notes,
				var_positive,
				var_negative,
				var_id_unit
			);
	end if;

if var_positive > 0 then
		insert into i_stock_in 
		(no_stock_in,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no_adjust_stock,
		 var_date_trn,
		 var_id_item,
		 var_positive,
		 var_id_unit,
		 0,0,
		 var_id_warehouse
		);

call sp_calculate_cogs(var_date_trn, var_id_item);
		select cogs into var_cogs from i_cogs where id_item = var_id_item and date_trn < var_date_trn order by date_trn desc limit 1;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;

	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account in (var_id_account_cogs);
	end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_cogs,
						concat('Adjust Stock - ',var_id_item),
						-1*var_cogs);

		if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account =  var_id_account_det;
		end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_det,
						concat('Adjust Stock - ',var_id_item),
						var_cogs);

end if;

if var_negative > 0 THEN
	insert into i_stock_out
		(no_stock_out,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no_adjust_stock,
		 var_date_trn,
		 var_id_item,
		 var_negative,
		 var_id_unit,
		 0,0,
		 var_id_warehouse
		);

call sp_calculate_cogs(var_date_trn, var_id_item);
		select cogs into var_cogs from i_cogs where id_item = var_id_item and date_trn < var_date_trn order by date_trn desc limit 1;
		
		select id_account into var_id_account_det from mst_item where id_item = var_id_item;

		
		select id_account_cogs into var_id_account_cogs from mst_item where id_item = var_id_item;


	if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account in (var_id_account_cogs);
	end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_cogs,
						concat('Adjust Stock - ',var_id_item),
						var_cogs);

		if varloop = 0 THEN
			delete from trn_ledger_det where no_ledger = var_no_adjust_stock and id_account =  var_id_account_det;
		end if;

		insert into trn_ledger_det 
			(no_ledger,
			 id_account,
			 notes,
			 nominal
			)
		values (var_no_adjust_stock,
						var_id_account_det,
						concat('Adjust Stock - ',var_id_item),
						- 1*var_cogs);

end if;


	ELSEIF TRANSID = 'DELETE' THEN

		delete from trn_ledger_det where no_ledger = var_no_adjust_stock;
		delete from trn_ledger_head where no_ledger = var_no_adjust_stock;
		delete from i_stock_in where no_stock_in = var_no_adjust_stock;
		delete from i_stock_out where no_stock_out = var_no_adjust_stock;
		delete from trn_adjust_stock_det where no_adjust_stock = var_no_adjust_stock;
		delete from trn_adjust_stock_head where no_adjust_stock = var_no_adjust_stock;
		
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_stock_opname
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_stock_opname`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_stock_opname`(in var_no_opname varchar(30), in var_date_trn date, in var_id_warehouse varchar(30), in var_id_item varchar(30), in var_id_unit varchar(30), in var_qty_onhand integer, in var_qty_opname integer, in var_notes text, in TRANSID varchar(120), in var_detail integer)
BEGIN

IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from i_opname_det where no_opname = var_no_opname;
		delete from i_opname_head where no_opname = var_no_opname;
		
		insert into i_opname_head(
			 no_opname,
			 date_trn,
			 id_warehouse
			)
		values(var_no_opname,
					 var_date_trn,
					 var_id_warehouse
				   );
	elseif var_detail = 1 THEN
		insert into i_opname_det 
			(no_opname,
			id_item,
			id_unit,
			qty_onhand,
			qty_opname,
			notes
			)
		values (var_no_opname,
						var_id_item,
						var_id_unit,
						var_qty_onhand,
						var_qty_opname,
						var_notes
						);
		end if;
	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 THEN
			insert into i_opname_head(
			 no_opname,
			 date_trn,
			 id_warehouse
			)
			values(var_no_opname,
			 var_date_trn,
			 var_id_warehouse
			);
	elseif var_detail = 1 THEN
		insert into i_opname_det 
			(no_opname,
			id_item,
			id_unit,
			qty_onhand,
			qty_opname,
			notes
			)
		values (var_no_opname,
						var_id_item,
						var_id_unit,
						var_qty_onhand,
						var_qty_opname,
						var_notes
						);
	end if;

	ELSEIF TRANSID = 'DELETE' THEN

			delete from i_opname_det where no_opname = var_no_opname;
			delete from i_opname_head where no_opname = var_no_opname;
			
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_stock_transfer
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_stock_transfer`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_stock_transfer`(in var_no varchar(60), in var_date_trn date, in var_id_warehouse_from varchar(30),in var_id_warehouse_to varchar(30), in var_modified_user varchar(120), in var_created_date date, in  var_modified_date date,  in var_created_user varchar(120),in var_id_item varchar(30), in var_notes text, in var_qty double, in var_unit varchar(30), in transid varchar(60), in varloop integer, in var_detail integer, in var_desc text)
BEGIN
IF TRANSID = 'UPDATE' THEN

	if var_detail = 0 then
		delete from i_stock_in where no_stock_in = var_no;
		delete from i_stock_out where no_stock_out = var_no;
		delete from trn_transfer_stock_det where no_tranfer_stock = var_no;
		delete from trn_transfer_stock_head where no_tranfer_stock = var_no;
		
		insert into trn_transfer_stock_head(
			 no_tranfer_stock,
			 date_trn,
			 id_warehouse_from,
			 id_warehouse_to,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
		   created_user
			)
		values(var_no,
			 var_date_trn,
			 var_id_warehouse_from,
			 var_id_warehouse_to,
			 var_desc,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
		   var_created_user
			);
		
	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_transfer_stock_det where no_tranfer_stock = var_no;			
		end if;
		insert into trn_transfer_stock_det 
			(no_tranfer_stock,
			 id_item,
			 qty,
			 unit,
			 notes
			)
		values (var_no,
						var_id_item,
						var_qty,
						var_unit,
						var_notes
						);

		insert into i_stock_in 
		(no_stock_in,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no,
		 var_date_trn,
		 var_id_item,
		 var_qty,
		 var_unit,
		 0,0,
		 var_id_warehouse_to
		);

insert into i_stock_out
		(no_stock_out,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no,
		 var_date_trn,
		 var_id_item,
		 var_qty,
		 var_unit,
		 0,0,
		 var_id_warehouse_from
		);
end if;

	ELSEIF TRANSID = 'INSERT' THEN
		if var_detail = 0 then
		
		insert into trn_transfer_stock_head(
			 no_tranfer_stock,
			 date_trn,
			 id_warehouse_from,
			 id_warehouse_to,
			 notes,
			 modified_user,
			 created_date,
			 modified_date,
		   created_user
			)
		values(var_no,
			 var_date_trn,
			 var_id_warehouse_from,
			 var_id_warehouse_to,
			 var_desc,
			 var_modified_user,
			 var_created_date,
			 var_modified_date,
		   var_created_user
			);
		
	elseif var_detail = 1 THEN
		if varloop = 0 then
			delete from trn_transfer_stock_det where no_tranfer_stock = var_no;			
		end if;
		insert into trn_transfer_stock_det 
			(no_tranfer_stock,
			 id_item,
			 qty,
			 unit,
			 notes
			)
		values (var_no,
						var_id_item,
						var_qty,
						var_unit,
						var_notes
						);

		insert into i_stock_in 
		(no_stock_in,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no,
		 var_date_trn,
		 var_id_item,
		 var_qty,
		 var_unit,
		 0,0,
		 var_id_warehouse_to
		);

insert into i_stock_out
		(no_stock_out,
		 date_trn,
		 id_item,
		 qty,
		 id_unit,
		 cogs,
		 price,
		 id_warehouse
		)
		values 
		(var_no,
		 var_date_trn,
		 var_id_item,
		 var_qty,
		 var_unit,
		 0,0,
		 var_id_warehouse_from
		);
end if;


	ELSEIF TRANSID = 'DELETE' THEN

		delete from i_stock_in where no_stock_in = var_no;
		delete from i_stock_out where no_stock_out = var_no;
		delete from trn_transfer_stock_det where no_tranfer_stock = var_no;
		delete from trn_transfer_stock_head where no_tranfer_stock = var_no;
		
	END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_supplier
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_supplier`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_supplier`(in var_id_supplier varchar(25),in var_first_name varchar(60),in var_last_name varchar(60),in var_address varchar(255),in var_city  varchar(120),in var_state varchar(255),in var_postal_code  varchar(25),in  var_country varchar(120),in var_phone1  varchar(60),in  var_phone2  varchar(60),in  var_phone3  varchar(60),in var_fax varchar(60),in var_email varchar(120),in var_website varchar(120),in  var_photo text,in var_id_account varchar(25),in var_contact_person varchar(120),in var_credit_limit double,in var_def_due_date date,in var_def_payment_method   int,in  var_modified_user varchar(120),in var_created_date date,in var_modified_date date,in var_created_user varchar(120),in transid varchar(60),var_status integer, in var_notes text, in var_ap_balance double, in var_flag_credit_limit integer)
BEGIN

declare ar_balance_before double;

IF TRANSID = 'UPDATE' THEN

	BEGIN
	

		UPDATE mst_supplier
			SET first_name = var_first_name,
			last_name = var_last_name,
			address = var_address,
			city = var_city,
			state = var_state,
			postal_code = var_postal_code,
			country = var_country,
			phone1 = var_phone1,
			phone2 = var_phone2,
			phone3 = var_phone3,
			fax = var_fax,
			email = var_email,
			website = var_website,
			photo = var_photo,
			id_account = var_id_account,
			notes=var_notes,
			contact_person = var_contact_person,
			credit_limit = var_credit_limit,
			def_due_date = var_def_due_date,
			def_payment_method = var_def_payment_method,
			`status` = var_status,
			modified_user = var_modified_user,
			created_date = var_created_date,
			modified_date = var_modified_date,
			created_user = var_created_user,
			ap_balance = var_ap_balance,		
			flag_credit_limit = var_flag_credit_limit

		WHERE
			id_supplier = var_id_supplier;
	
	
			

	END;


ELSEIF TRANSID = 'INSERT' THEN
	BEGIN
		INSERT INTO mst_supplier (
			id_supplier,
			first_name,
			last_name,
			address,
			city,
			state,
			postal_code,
			country,
			phone1,
			phone2,
			phone3,
			fax,
			email,
			website,
			photo,
			id_account,
			notes,
			contact_person,
			credit_limit,
			def_due_date,
			def_payment_method,
			`status`,
			modified_user,
			created_date,
			modified_date,
			created_user,
			ap_balance,
			flag_credit_limit
		)
	VALUES
		(
			var_id_supplier,
			var_first_name,
			var_last_name,
			var_address,
			var_city,
			var_state,
			var_postal_code,
			var_country,
			var_phone1,
			var_phone2,
			var_phone3,
			var_fax,
			var_email,
			var_website,
			var_photo,
			var_id_account,
			var_notes,
			var_contact_person,
			var_credit_limit,
			var_def_due_date,
			var_def_payment_method,
			var_status,
			var_modified_user,
			var_created_date,
			var_modified_date,
			var_created_user,
			var_ap_balance,
			var_flag_credit_limit
		);
		
		
	END;

ELSEIF TRANSID = 'DELETE' THEN

select case when ap_balance is null then 0 else ap_balance end into ar_balance_before from mst_supplier where id_supplier = var_id_supplier;

	

	BEGIN
	DELETE
		FROM
			mst_supplier
		WHERE
			id_supplier = var_id_supplier;
		
			
	END;

END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_unit
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_unit`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_unit`(in var_id_unit varchar(25), in var_unit varchar(60), in var_notes varchar(255), in var_created_user varchar(120), in var_created_date datetime, in var_modified_user varchar(120), in var_modified_date datetime, in transid varchar(60), in var_flag_default integer)
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_unit
SET 
	unit = var_unit,
	notes =var_notes,
	flag_default = var_flag_default,
	modified_user = var_modified_user,
	modified_date = var_modified_date
WHERE	
	id_unit = var_id_unit;

END;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	INSERT INTO mst_unit (
		id_unit,
		unit,
		notes,	
		flag_default,
		created_user,
		created_date,
		modified_user,
		modified_date
	)
VALUES
	(
		var_id_unit,
		var_unit,
		var_notes,	
		var_flag_default,
		var_created_user,
		var_created_date,
		var_modified_user,
		var_modified_date
	);



END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN

	DELETE
FROM
	mst_unit
WHERE
	id_unit = var_id_unit;

END;
END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_unit_konversi
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_unit_konversi`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_unit_konversi`(in var_id_item varchar(60),var_id_unit varchar(60),in var_notes text, in var_qty double, in var_date date, in var_user varchar(120), in i integer)
BEGIN
	if i = 0 then
		delete from mst_setunit where id_item = var_id_item;
end if;

	insert into mst_setunit (
		id_item,
		id_unit,
		qty,
		notes,
		modified_user,
		modified_date
	)
	values (
		var_id_item,
		var_id_unit,
		var_qty,
		var_notes,
		var_user,
		var_date
	);


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_update_i_cogs
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_update_i_cogs`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_update_i_cogs`()
BEGIN
	declare cogs double;
	DECLARE done INT DEFAULT FALSE;
	declare var_date_trn date;
	declare var_id_item varchar(30);
	declare var_item_name varchar(300);
	declare var_id_item_temp varchar(30);
	declare var_no_bukti varchar(120);
	declare var_masuk double;
	declare var_keluar double;
	declare var_price double;
	declare var_saldo double;
	declare temp_saldo double;
	declare var_nmb double;
	DECLARE var_notes text;
	DECLARE var_company text;
	declare qty double;
	declare i integer;
	declare temp_price double;
	DECLARE cur2 CURSOR FOR select no_bukti,date_trn,id_item,item_name,masuk,keluar,price,saldo,company,notes,nmb_asc 
													from lap_mutasi_hpp order by id_item asc,date_trn asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	

	set i = 0;
	OPEN cur2;
  REPEAT
  FETCH cur2 INTO var_no_bukti,var_date_trn,var_id_item,var_item_name,var_masuk,var_keluar,var_price,var_saldo,var_company,var_notes,var_nmb;
  IF NOT done THEN
	if var_notes in ('Penjualan','Retur Penjualan','Koreksi Stock','Pindah Gudang','Penjualan Kasir') then
		if var_no_bukti = 'Saldo Awal' then 
			set i = 0;
		end if;
		if i = 1 THEN
			
			update lap_mutasi_hpp set nmb_asc = i where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		elseif i > 1 THEN
			
			update lap_mutasi_hpp set nmb_asc = i where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		end if;
	else
		if var_no_bukti = 'Saldo Awal' then 
			set i = 0;
		end if;
		if i = 1 THEN
			
			update lap_mutasi_hpp set nmb_asc = i where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		elseif i > 1 THEN
			
			update lap_mutasi_hpp set nmb_asc = i where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		end if;
	end if;
	set i = i+1;
	END IF;
			
	UNTIL done END REPEAT;
	CLOSE cur2;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_update_i_cogs2
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_update_i_cogs2`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_update_i_cogs2`()
BEGIN
	declare cogs double;
	DECLARE done INT DEFAULT FALSE;
	declare var_date_trn date;
	declare var_id_item varchar(30);
	declare var_item_name varchar(300);
	declare var_id_item_temp varchar(30);
	declare var_no_bukti varchar(120);
	declare var_masuk double;
	declare var_keluar double;
	declare var_price double;
	declare var_saldo double;
	declare temp_saldo double;
	declare temp_saldo2 double;
	declare var_nmb double;
	DECLARE var_notes text;
	DECLARE var_company text;
	declare qty double;
	declare i integer;
	declare temp_price double;
	declare temp_price2 double;
	DECLARE cur2 CURSOR FOR select no_bukti,date_trn,id_item,item_name,masuk,keluar,price,saldo,company,notes,nmb_asc 
													from lap_mutasi_hpp order by id_item asc,date_trn asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

	set i = 0;
	OPEN cur2;
  REPEAT
  FETCH cur2 INTO var_no_bukti,var_date_trn,var_id_item,var_item_name,var_masuk,var_keluar,var_price,var_saldo,var_company,var_notes,var_nmb;
  IF NOT done THEN
	if var_notes in ('Penjualan','Retur Penjualan','Koreksi Stock','Pindah Gudang','Penjualan Kasir') then
		if var_no_bukti = 'Saldo Awal' then 
			set i = 0;
			set temp_saldo = abs(var_masuk - var_keluar);
		end if;
		if i = 1 THEN
			select price into cogs from lap_mutasi_hpp where nmb_asc = 0 and id_item = var_id_item;
			select price into temp_price from lap_mutasi_hpp where nmb_asc = i and id_item = var_id_item;
			if cogs > 0 then
				update lap_mutasi_hpp set price = cogs where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			ELSE
				update lap_mutasi_hpp set price = temp_price where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			end if;
			update lap_mutasi_hpp set price_in = cogs where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			update lap_mutasi_hpp set price_out = cogs where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		elseif i > 1 THEn
			select price into temp_price from lap_mutasi_hpp where nmb_asc = i and id_item = var_id_item;
			select price into temp_price2 from lap_mutasi_hpp where nmb_asc = i-1 and id_item = var_id_item;
			select saldo into temp_saldo from lap_mutasi_hpp where nmb_asc = i-1 and id_item = var_id_item;
			set cogs = round(((temp_saldo * temp_price2)+(temp_price * abs(var_masuk - var_keluar)))/(temp_saldo + abs(var_masuk - var_keluar)),0);
			update lap_mutasi_hpp set price = cogs where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			update lap_mutasi_hpp set price_in = temp_price2 where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			update lap_mutasi_hpp set price_out = temp_price2 where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		end if;
	else
		if var_no_bukti = 'Saldo Awal' then 
			set i = 0;
		end if;
		if i = 1 THEN
			select price into cogs from lap_mutasi_hpp where nmb_asc = 0 and id_item = var_id_item;
			select price into temp_price from lap_mutasi_hpp where nmb_asc = i and id_item = var_id_item;
			if cogs > 0 then
				update lap_mutasi_hpp set price = cogs where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			ELSE
				update lap_mutasi_hpp set price = temp_price where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			end if;
			update lap_mutasi_hpp set price_in = temp_price where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			update lap_mutasi_hpp set price_out = temp_price where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		elseif i > 1 THEN
			select price into temp_price from lap_mutasi_hpp where nmb_asc = i and id_item = var_id_item;
			select price into temp_price2 from lap_mutasi_hpp where nmb_asc = i-1 and id_item = var_id_item;
			select saldo into temp_saldo from lap_mutasi_hpp where nmb_asc = i-1 and id_item = var_id_item;
			set cogs = round(((temp_saldo * temp_price2)+(temp_price * abs(var_masuk - var_keluar)))/(temp_saldo + abs(var_masuk - var_keluar)),0);
			update lap_mutasi_hpp set price = cogs where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			update lap_mutasi_hpp set price_in = temp_price where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
			update lap_mutasi_hpp set price_out = temp_price where id_item = var_id_item and no_bukti = var_no_bukti and nmb_asc = var_nmb;
		end if;
	end if;
	set i = i+1;
	END IF;
			
	UNTIL done END REPEAT;
	CLOSE cur2;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_update_i_cogs3
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_update_i_cogs3`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_update_i_cogs3`()
BEGIN
	declare cogs double;
	DECLARE done INT DEFAULT FALSE;
	declare var_date_trn date;
	declare var_id_item varchar(30);
	declare var_item_name varchar(300);
	declare var_id_item_temp varchar(30);
	declare var_no_bukti varchar(120);
	declare var_masuk double;
	declare var_keluar double;
	declare var_price double;
	declare var_saldo double;
	declare temp_saldo double;
	declare var_nmb double;
	DECLARE var_notes text;
	DECLARE var_company text;
	declare qty_in,qty_out double;
	declare i integer;
	declare temp_price double;
	declare temp_price2 double;
	DECLARE cur2 CURSOR FOR select no_bukti,date_trn,id_item,item_name,masuk,keluar,price,saldo,company,notes,nmb_asc 
													from lap_mutasi_hpp order by id_item asc,date_trn asc;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;


	set i = 0;
	OPEN cur2;
  REPEAT
  FETCH cur2 INTO var_no_bukti,var_date_trn,var_id_item,var_item_name,var_masuk,var_keluar,var_price,var_saldo,var_company,var_notes,var_nmb;
  IF NOT done THEN
		if var_no_bukti = 'Saldo Awal' then 
			set i = 0;
			set temp_saldo = abs(var_masuk - var_keluar);
		end if;
		if i > 0 THEN
			select masuk into qty_in from lap_mutasi_hpp where id_item = var_id_item and nmb_asc = var_nmb;
			select keluar into qty_out from lap_mutasi_hpp where id_item = var_id_item and nmb_asc = var_nmb;
			select saldo into temp_saldo from lap_mutasi_hpp where id_item = var_id_item and nmb_asc = var_nmb-1;
			set temp_saldo = temp_saldo + qty_in - qty_out;
			update lap_mutasi_hpp set saldo = temp_saldo where id_item = var_id_item and nmb_asc = var_nmb;
		end if;
	set i = i+1;
	END IF;
			
	UNTIL done END REPEAT;
	CLOSE cur2;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_user
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_user`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_user`(in var_id_unit varchar(25), in var_unit varchar(60), in var_notes varchar(255), in var_created_user varchar(120), in var_created_date datetime, in var_modified_user varchar(120), in var_modified_date datetime, transid varchar(60))
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_user
SET 
	password = var_password,
	created_user = var_created_user,
	created_date = var_created_date,
	modified_user = var_modified_user,
	modified_date = var_modified_date
WHERE	
	username = var_username;
END;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	INSERT INTO mst_user (
		username,
		password,
		created_user,
		created_date,
		modified_user,
		modified_date
	)
VALUES
	(
		var_username,
		var_password,
		var_created_user,
		var_created_date,
		var_modified_user,
		var_modified_date
	);


END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN
	DELETE
FROM
	mst_user
WHERE
	username = var_username;
END;

END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_aktiva
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_aktiva`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_aktiva`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

	
	

CREATE TABLE if not EXISTS temp_aktiva (
`id_account`  varchar(255) NOT NULL ,
`account_name`  varchar(255) NULL DEFAULT NULL ,
`parent`  varchar(255) NULL DEFAULT NULL ,
`account_parent`  varchar(255) NULL DEFAULT NULL ,
`saldo`  double NULL DEFAULT NULL 
);

delete from temp_aktiva;

if date_filter = 1 then
insert into temp_aktiva
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) -
(case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  
when b.def_position = 'K' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  - 
(case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)
end as saldo
from  mst_account b 
left join trn_ledger_det a on a.id_account = b.id_account
left join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date) and b.flag_header=0
and b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1)='1'
group by b.id_account
order by b.id_account;
elseif date_filter = 0 THEN
insert into temp_aktiva
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) -
(case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  
when b.def_position = 'K' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  - 
(case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)
end as saldo
from  mst_account b 
left join trn_ledger_det a on a.id_account = b.id_account
left join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1)='1' and b.flag_header=0
group by b.id_account
order by b.id_account;
end if;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_aktiva_consol
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_aktiva_consol`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_aktiva_consol`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

	
	

CREATE TABLE if not EXISTS temp_aktiva_consol (
`id_account`  varchar(255) NOT NULL ,
`account_name`  varchar(255) NULL DEFAULT NULL ,
`parent`  varchar(255) NULL DEFAULT NULL ,
`account_parent`  varchar(255) NULL DEFAULT NULL ,
`saldo`  double NULL DEFAULT NULL 
);

delete from temp_aktiva_consol;

if date_filter = 1 then
insert into temp_aktiva_consol
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) -
(case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  
when b.def_position = 'K' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  - 
(case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)
end as saldo
from  mst_account b 
left join trn_ledger_det_consol a on a.id_account = b.id_account
left join trn_ledger_head_consol c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date) and b.flag_header=0
and b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1)='1'
group by b.id_account
order by b.id_account;
elseif date_filter = 0 THEN
insert into temp_aktiva_consol
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) -
(case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  
when b.def_position = 'K' then 
(b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)  - 
(case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end)
end as saldo
from  mst_account b 
left join trn_ledger_det_consol a on a.id_account = b.id_account
left join trn_ledger_head_consol c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1)='1' and b.flag_header=0
group by b.id_account
order by b.id_account;
end if;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_hpp
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_hpp`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_hpp`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

	
	

drop table if EXISTS neraca_lajur_temp ;
CREATE TABLE if not EXISTS neraca_lajur_temp (
`id_account`  varchar(255) NOT NULL ,
`account_name`  varchar(255) NULL DEFAULT NULL ,
`parent`  varchar(255) NULL DEFAULT NULL ,
`account_parent`  varchar(255) NULL DEFAULT NULL ,
`parent_head`  varchar(255) NULL DEFAULT NULL ,
`account_parent_head`  varchar(255) NULL DEFAULT NULL ,
`parent_head_1`  varchar(255) NULL DEFAULT NULL ,
`account_parent_head_1`  varchar(255) NULL DEFAULT NULL ,
`bdebet`  double NULL DEFAULT NULL ,
`bkredit`  double NULL DEFAULT NULL ,
`debet`  double NULL DEFAULT NULL ,
`kredit`  double NULL DEFAULT NULL ,
`edebet`  double NULL DEFAULT NULL ,
`ekredit`  double NULL DEFAULT NULL ,
PRIMARY KEY (`id_account`)
);

delete from neraca_lajur_temp;

if date_filter = 1 then
insert into neraca_lajur_temp
 select a.id_account, 
b.account_name,b.parent,x.account_name,x.parent,y.account_name,y.parent,z.account_name,
case when b.beg_balance >0 then b.beg_balance else 0 end as bdebet,
case when b.beg_balance <0 then -1*b.beg_balance else 0 end as bkredit, 
case when sum(a.nominal) >0 then sum(a.nominal) else 0 end as debet,
case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end as kredit,
(case when b.beg_balance >0 then b.beg_balance else 0 end + case when sum(a.nominal) >0 then sum(a.nominal) else 0 end) as edebet,
(case when b.beg_balance <0 then -1*b.beg_balance else 0 end + case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end) AS ekredit
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") x on x.id_account = b.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") y on y.id_account = x.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent = "") z on z.id_account = y.parent
where c.date_trn between var_start_date and var_end_date
group by a.id_account
order by a.id_account;
elseif date_filter = 0 THEN
insert into neraca_lajur_temp
 select a.id_account, 
b.account_name,b.parent,x.account_name,x.parent,y.account_name,y.parent,z.account_name,
case when b.beg_balance >0 then b.beg_balance else 0 end as bdebet,
case when b.beg_balance <0 then -1*b.beg_balance else 0 end as bkredit, 
case when sum(a.nominal) >0 then sum(a.nominal) else 0 end as debet,
case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end as kredit,
(case when b.beg_balance >0 then b.beg_balance else 0 end + case when sum(a.nominal) >0 then sum(a.nominal) else 0 end) as edebet,
(case when b.beg_balance <0 then -1*b.beg_balance else 0 end + case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end) AS ekredit
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") x on x.id_account = b.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") y on y.id_account = x.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent = "") z on z.id_account = y.parent
group by a.id_account
order by a.id_account;
end if;

select *,
(select company_name from mst_company where flag_active = 1) as company_name  from neraca_lajur_temp;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_income
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_income`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_income`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;
	DECLARE Taktiva double;
	DECLARE Tpassiva double;
	DECLARE Tpassiva2 double;
	DECLARE labarugi double;
	DECLARE var_acc_laba varchar(120);

	
	
		
delete from temp_income;

if date_filter = 1 then
insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else -1*sum(a.nominal) end, 1,
(select company_name from mst_company where flag_active = 1)
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('4')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else sum(a.nominal) end, 2,
(select company_name from mst_company where flag_active = 1)
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('5')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name,case when (a.nominal) is null then 0 else sum(a.nominal) end, 3,
(select company_name from mst_company where flag_active = 1)
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('6','7')
group by a.id_account
order by a.id_account;

ELSEif date_filter = 0 then

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else -1*sum(a.nominal) end, 1,
(select company_name from mst_company where flag_active = 1)
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('4')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name,case when (a.nominal) is null then 0 else sum(a.nominal) end, 2,
(select company_name from mst_company where flag_active = 1)
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('5')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else sum(a.nominal) end, 3,
(select company_name from mst_company where flag_active = 1)
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('6','7')
group by a.id_account
order by a.id_account;

end if;





END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_income_consol
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_income_consol`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_income_consol`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;
	DECLARE Taktiva double;
	DECLARE Tpassiva double;
	DECLARE Tpassiva2 double;
	DECLARE labarugi double;
	DECLARE var_acc_laba varchar(120);

	
	
		
delete from temp_income_consol;

if date_filter = 1 then
insert into temp_income_consol
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else -1*sum(a.nominal) end, 1,
(select company_name from mst_company where flag_active = 1)
from trn_Ledger_det_consol a
inner join trn_Ledger_head_consol c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('4')
group by a.id_account
order by a.id_account;

insert into temp_income_consol
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else sum(a.nominal) end, 2,
(select company_name from mst_company where flag_active = 1)
from trn_Ledger_det_consol a
inner join trn_Ledger_head_consol c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('5')
group by a.id_account
order by a.id_account;

insert into temp_income_consol
 select a.id_account, 
b.account_name, b.parent,x.account_name,case when (a.nominal) is null then 0 else sum(a.nominal) end, 3,
(select company_name from mst_company where flag_active = 1)
from trn_Ledger_det_consol a
inner join trn_Ledger_head_consol c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('6','7')
group by a.id_account
order by a.id_account;

ELSEif date_filter = 0 then

insert into temp_income_consol
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else -1*sum(a.nominal) end, 1,
(select company_name from mst_company where flag_active = 1)
from trn_Ledger_det_consol a
inner join trn_Ledger_head_consol c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('4')
group by a.id_account
order by a.id_account;

insert into temp_income_consol
 select a.id_account, 
b.account_name, b.parent,x.account_name,case when (a.nominal) is null then 0 else sum(a.nominal) end, 2,
(select company_name from mst_company where flag_active = 1)
from trn_Ledger_det_consol a
inner join trn_Ledger_head_consol c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('5')
group by a.id_account
order by a.id_account;

insert into temp_income_consol
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else sum(a.nominal) end, 3,
(select company_name from mst_company where flag_active = 1)
from trn_Ledger_det_consol a
inner join trn_Ledger_head_consol c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('6','7')
group by a.id_account
order by a.id_account;

end if;





END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_income_stats
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_income_stats`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_income_stats`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;
	DECLARE Taktiva double;
	DECLARE Tpassiva double;
	DECLARE Tpassiva2 double;
	DECLARE labarugi double;
	DECLARE var_acc_laba varchar(120);

	
delete from temp_income_stats;

if date_filter = 1 then
insert into temp_income_stats
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else -1*sum(a.nominal) end, 1,
(select company_name from mst_company where flag_active = 1),1,0
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('4')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else sum(a.nominal) end, 2,
(select company_name from mst_company where flag_active = 1),0,1
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('5')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name,case when (a.nominal) is null then 0 else sum(a.nominal) end, 3,
(select company_name from mst_company where flag_active = 1),0,1
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('6','7')
group by a.id_account
order by a.id_account;

ELSEif date_filter = 0 then

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else -1*sum(a.nominal) end, 1,
(select company_name from mst_company where flag_active = 1),1,0
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('4')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name,case when (a.nominal) is null then 0 else sum(a.nominal) end, 2,
(select company_name from mst_company where flag_active = 1),0,1
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('5')
group by a.id_account
order by a.id_account;

insert into temp_income
 select a.id_account, 
b.account_name, b.parent,x.account_name, case when (a.nominal) is null then 0 else sum(a.nominal) end, 3,
(select company_name from mst_company where flag_active = 1),0,1
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 0 and b.is_income = 1 and left(a.id_account,1) in ('6','7')
group by a.id_account
order by a.id_account;

end if;





END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_neraca
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_neraca`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_neraca`(in var_start_date date, in var_end_date date)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

	
	
		
CREATE TABLE neraca_lajur_temp (
`id_account`  varchar(255) NOT NULL ,
`account_name`  varchar(255) NULL DEFAULT NULL ,
`parent`  varchar(255) NULL DEFAULT NULL ,
`account_parent`  varchar(255) NULL DEFAULT NULL ,
`bdebet`  double NULL DEFAULT NULL ,
`bkredit`  double NULL DEFAULT NULL ,
`debet`  double NULL DEFAULT NULL ,
`kredit`  double NULL DEFAULT NULL ,
`edebet`  double NULL DEFAULT NULL ,
`ekredit`  double NULL DEFAULT NULL ,
PRIMARY KEY (`id_account`)
);

delete from neraca_lajur_temp;

insert into neraca_lajur_temp
 select a.id_account, 
b.account_name,b.parent,x.account_name,
case when b.beg_balance >0 then b.beg_balance else 0 end as bdebet,
case when b.beg_balance <0 then -1*b.beg_balance else 0 end as bkredit, 
case when sum(a.nominal) >0 then sum(a.nominal) else 0 end as debet,
case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end as kredit,
(case when b.beg_balance >0 then b.beg_balance else 0 end + case when sum(a.nominal) >0 then sum(a.nominal) else 0 end) as edebet,
(case when b.beg_balance <0 then -1*b.beg_balance else 0 end + case when sum(a.nominal) <0 then -1*sum(a.nominal) else 0 end) AS ekredit
from trn_ledger_det a
inner join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join mst_account b on b.id_account = a.id_account
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where c.date_trn between var_start_date and var_end_date
group by a.id_account
order by a.id_account;

select * from neraca_lajur_temp;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_neraca_lajur
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_neraca_lajur`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_neraca_lajur`(in var_start_date date, in var_end_date date,in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

drop table if EXISTS neraca_lajur_temp ;
CREATE TABLE if not EXISTS neraca_lajur_temp (
`id_account`  varchar(255) NOT NULL ,
`account_name`  varchar(255) NULL DEFAULT NULL ,
`parent`  varchar(255) NULL DEFAULT NULL ,
`account_parent`  varchar(255) NULL DEFAULT NULL ,
`parent_head`  varchar(255) NULL DEFAULT NULL ,
`account_parent_head`  varchar(255) NULL DEFAULT NULL ,
`parent_head_1`  varchar(255) NULL DEFAULT NULL ,
`account_parent_head_1`  varchar(255) NULL DEFAULT NULL ,
`bdebet`  double NULL DEFAULT NULL ,
`bkredit`  double NULL DEFAULT NULL ,
`debet`  double NULL DEFAULT NULL ,
`kredit`  double NULL DEFAULT NULL ,
`edebet`  double NULL DEFAULT NULL ,
`ekredit`  double NULL DEFAULT NULL,  
PRIMARY KEY (`id_account`)
);

delete from neraca_lajur_temp;

if date_filter = 1 then
insert into neraca_lajur_temp
  select b.id_account, 
b.account_name,b.parent,x.account_name,x.parent,y.account_name,y.parent,z.account_name,
case when b.def_position="D"  then b.beg_balance else 0 end as bdebet,
case when b.def_position="K"  then b.beg_balance else 0 end as bkredit, 
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end as debet,
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end as kredit,
case when b.def_position="D" then (
case when b.def_position="D"  then b.beg_balance else 0 end -
case when b.def_position="K"  then b.beg_balance else 0 end +
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) else 0 end as edebet,
case when b.def_position="K" then (
case when b.def_position="K"  then b.beg_balance else 0 end -
case when b.def_position="D"  then b.beg_balance else 0 end + 
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) else 0 end as ekredit
from mst_account b 
left join trn_ledger_det a on a.id_account = b.id_account
left join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") x on x.id_account = b.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") y on y.id_account = x.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent = "") z on z.id_account = y.parent
where c.date_trn between var_start_date and var_end_date
group by b.id_account
order by b.id_account;
elseif date_filter = 0 THEN
insert into neraca_lajur_temp
  select b.id_account, 
b.account_name,b.parent,x.account_name,x.parent,y.account_name,y.parent,z.account_name,
case when b.def_position="D"  then b.beg_balance else 0 end as bdebet,
case when b.def_position="K"  then b.beg_balance else 0 end as bkredit, 
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end as debet,
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end as kredit,
case when b.def_position="D" then (
case when b.def_position="D"  then b.beg_balance else 0 end -
case when b.def_position="K"  then b.beg_balance else 0 end +
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) else 0 end as edebet,
case when b.def_position="K" then (
case when b.def_position="K"  then b.beg_balance else 0 end -
case when b.def_position="D"  then b.beg_balance else 0 end + 
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then -1*sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end) else 0 end as ekredit
from mst_account b 
left join trn_ledger_det a on a.id_account = b.id_account
left join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") x on x.id_account = b.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent <> "") y on y.id_account = x.parent
inner join (select id_account, account_name,parent from mst_account where flag_header = 1 and parent = "") z on z.id_account = y.parent
group by b.id_account
order by b.id_account;
end if;

select *,
(select company_name from mst_company where flag_active = 1) as company_name,
(select id_currency from mst_currency where flag_default=1) as curr  from neraca_lajur_temp;


END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_opname
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_opname`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_opname`(var_criteria varchar(120))
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;

	
	
		
		select b.id_item,c.item_name, b.id_unit,b.qty_onhand, b.qty_opname, b.notes,a.id_warehouse,a.no_opname, a.date_trn  from i_opname_head a 
inner join i_opname_det b on b.no_opname = a.no_opname
inner join mst_item c on c.id_item = b.id_item
where a.no_opname= var_criteria;





END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_pasiva
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_pasiva`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_pasiva`(in var_start_date date, in var_end_date date, in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;
	DECLARE Taktiva double;
	DECLARE Tpassiva double;
	DECLARE labarugi double;
	DECLARE var_acc_laba varchar(120);

	
	

create TABLE if not EXISTS temp_pasiva (
`id_account`  varchar(255) NOT NULL ,
`account_name`  varchar(255) NULL DEFAULT NULL ,
`parent`  varchar(255) NULL DEFAULT NULL ,
`account_parent`  varchar(255) NULL DEFAULT NULL ,
`saldo`  double NULL DEFAULT NULL 
);

delete from temp_pasiva;

if date_filter = 1 then
insert into temp_pasiva
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end  
when b.def_position = 'K' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end  - 
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end
end as saldo
from  mst_account b 
left join trn_ledger_det a on a.id_account = b.id_account
left join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1) in ('2','3') and b.flag_header=0
group by b.id_account
order by b.id_account;
elseif date_filter = 0 THEN
insert into temp_pasiva
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end
when b.def_position = 'K' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end  - 
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end
end as saldo
from  mst_account b 
left join trn_ledger_det a on a.id_account = b.id_account
left join trn_ledger_head c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1) in ('2','3') and b.flag_header=0
group by b.id_account
order by b.id_account;
end if;

select sum(saldo) into Taktiva from temp_aktiva;
select sum(saldo) into Tpassiva from temp_pasiva;


set labarugi = Taktiva - Tpassiva;
if labarugi < 0 then 
	set var_acc_laba = "Rugi Periode Berjalan";
elseif labarugi > 0 then 
	set var_acc_laba = "Laba Periode Berjalan";
end if;

insert into temp_pasiva
 select "3-5000", 
var_acc_laba, "3-5000","",labarugi;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_view_pasiva_consol
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_view_pasiva_consol`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_view_pasiva_consol`(in var_start_date date, in var_end_date date, in date_filter integer)
BEGIN

	DECLARE mRows INTEGER;
	DECLARE Balance DOUBLE;
	DECLARE i INTEGER;
	DECLARE Taktiva double;
	DECLARE Tpassiva double;
	DECLARE labarugi double;
	DECLARE var_acc_laba varchar(120);

	
	

create TABLE if not EXISTS temp_pasiva_consol (
`id_account`  varchar(255) NOT NULL ,
`account_name`  varchar(255) NULL DEFAULT NULL ,
`parent`  varchar(255) NULL DEFAULT NULL ,
`account_parent`  varchar(255) NULL DEFAULT NULL ,
`saldo`  double NULL DEFAULT NULL 
);

delete from temp_pasiva_consol;

if date_filter = 1 then
insert into temp_pasiva_consol
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end  
when b.def_position = 'K' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end  - 
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end
end as saldo
from  mst_account b 
left join trn_ledger_det_consol a on a.id_account = b.id_account
left join trn_ledger_head_consol c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where (c.date_trn between var_start_date and var_end_date)
and b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1) in ('2','3') and b.flag_header=0
group by b.id_account
order by b.id_account;
elseif date_filter = 0 THEN
insert into temp_pasiva_consol
 select b.id_account, 
b.account_name, b.parent,x.account_name, case when b.def_position = 'D' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end -
case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end
when b.def_position = 'K' then 
b.beg_balance + case when sum(case when a.nominal is null then 0 else a.nominal end) <0 then abs(sum(case when a.nominal is null then 0 else a.nominal end)) else 0 end  - 
case when sum(case when a.nominal is null then 0 else a.nominal end) >0 then sum(case when a.nominal is null then 0 else a.nominal end) else 0 end
end as saldo
from  mst_account b 
left join trn_ledger_det_consol a on a.id_account = b.id_account
left join trn_ledger_head_consol c on c.no_ledger = a.no_ledger
inner join (select id_account, account_name from mst_account) x on x.id_account = b.parent
where b.is_balance_sheet = 1 and b.is_income = 0 and left(b.id_account,1) in ('2','3') and b.flag_header=0
group by b.id_account
order by b.id_account;
end if;

select sum(saldo) into Taktiva from temp_aktiva;
select sum(saldo) into Tpassiva from temp_pasiva_consol;


set labarugi = Taktiva - Tpassiva;
if labarugi < 0 then 
	set var_acc_laba = "Rugi Periode Berjalan";
elseif labarugi > 0 then 
	set var_acc_laba = "Laba Periode Berjalan";
end if;

insert into temp_pasiva_consol
 select "3-5000", 
var_acc_laba, "3-5000","",labarugi;

END
;;
DELIMITER ;

-- ----------------------------
-- Procedure structure for sp_warehouse
-- ----------------------------
DROP PROCEDURE IF EXISTS `sp_warehouse`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_warehouse`(in var_id_warehouse varchar(60), in var_warehouse_name varchar(200), in var_qty_max varchar(30), in var_unit_max varchar(30), in var_address varchar(250), in var_phone varchar(120), in var_city varchar(200), in var_notes text, in var_flag_default integer, in var_created_user varchar(120), in var_created_date datetime, in var_modified_user varchar(120), in var_modified_date datetime, in transid  varchar(60), in outlet integer)
BEGIN

IF TRANSID = 'UPDATE' THEN

BEGIN
	UPDATE mst_warehouse
SET 
	id_warehouse = var_id_warehouse,
	warehouse_name = var_warehouse_name,
	qty_max = var_qty_max,
	unit_max = var_unit_max,
	address = var_address,
	phone = var_phone,
	city = var_city,
	notes = var_notes,
	flag_nonactive = var_flag_default,
	created_user = var_created_user,
	created_date = var_created_date,
	modified_user = var_modified_user,
	modified_date = var_modified_date,
	is_outlet = outlet
WHERE	
	id_warehouse = var_id_warehouse;
END;


ELSEIF TRANSID = 'INSERT' THEN

BEGIN
	INSERT INTO mst_warehouse (
		id_warehouse,
		warehouse_name,
		qty_max,
		unit_max,
		address,
		phone,
		city,
		notes,
		flag_nonactive,
		created_user,
		created_date,
		modified_user,
		modified_date,
		is_outlet
	)
VALUES
	(
		var_id_warehouse,
		var_warehouse_name,
		var_qty_max,
		var_unit_max,
		var_address,
		var_phone,
		var_city,
		var_notes,
		var_flag_default,
		var_created_user,	
		var_created_date,
		var_modified_user,	
		var_modified_date,
		outlet
	);

END;

ELSEIF TRANSID = 'DELETE' THEN

BEGIN

DELETE
FROM
	mst_warehouse
WHERE
	id_warehouse = var_id_warehouse;
END;

END
IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_count_outlet
-- ----------------------------
DROP FUNCTION IF EXISTS `func_count_outlet`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_count_outlet`() RETURNS int(11)
BEGIN

declare var_jml_outlet integer;

select count(id_warehouse) into var_jml_outlet from mst_warehouse where is_outlet = 1 limit 1;
return var_jml_outlet;

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_count_period
-- ----------------------------
DROP FUNCTION IF EXISTS `func_count_period`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_count_period`() RETURNS int(11)
BEGIN

declare var_jml_outlet integer;

select count(periode) into var_jml_outlet from i_accounting_period limit 1;
return var_jml_outlet;

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_getQty_DO
-- ----------------------------
DROP FUNCTION IF EXISTS `func_getQty_DO`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_getQty_DO`(var_criteria varchar(120), var_id_item varchar(30)) RETURNS int(11)
BEGIN
	declare total_received integer;

	select 
	case when sum(d.sent_qty) is null then 0 else sum(d.sent_qty) end as qty 
	into total_received from trn_sales_order_det d 
	where d.no_sales_order = var_criteria and d.id_item = var_id_item ;

	RETURN total_received;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_getQty_Rec
-- ----------------------------
DROP FUNCTION IF EXISTS `func_getQty_Rec`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_getQty_Rec`(var_criteria varchar(120), var_id_item varchar(30)) RETURNS int(11)
BEGIN
	declare total_received integer;

	select 
	case when sum(d.qty_received) is null then 0 else sum(d.qty_received) end as qty 
	into total_received from trn_purchase_order_det d 
	where d.no_purchase_order = var_criteria and d.id_item = var_id_item ;

	RETURN total_received;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_account_no
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_account_no`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_account_no`(var_parent TEXT, header integer) RETURNS varchar(50) CHARSET utf8
    READS SQL DATA
BEGIN
		
		declare nourut_acc VARCHAR(10);
		declare nourut_int INTEGER;
		declare variable_parent varchar(10);
		declare jumlah_nol INTEGER;
		declare jumlah integer;
		declare i integer;
		declare prefix_temp varchar(10);
		declare is_use_separator INTEGER;
		declare length_account integer;
		declare separator_type varchar(1);

					select count(id_account) into nourut_acc from mst_account where parent = var_parent and RIGHT(id_account,2) <> '99'; 
					

					if header = 1 then
						select id_account into variable_parent from mst_account where id_account = var_parent limit 1;
					else
						select parent into variable_parent from mst_account where id_account = var_parent limit 1;
					end if;
					set nourut_int = cast(nourut_acc as unsigned);
					set jumlah = LENGTH(variable_parent); 
					set i=1;

					set jumlah_nol=0;
					while i <= jumlah do	
						if substr(variable_parent,i,1) = '0' THEN
							set jumlah_nol = jumlah_nol +1; 
						end if;
						set i=i+1;
					end while;
	
				select account_length into length_account from account_general_setup;
				select use_separator into is_use_separator from account_general_setup;
				select separator_text into separator_type from account_general_setup;
				
			if is_use_separator = 1 then
				if header = 1 then
						if jumlah_nol = 4 THEN
							select left(id_account,2) into prefix_temp from mst_account where id_account = var_parent limit 1;
							return concat(prefix_temp,nourut_int+1,'000');
						elseif jumlah_nol = 3 THEN
							select left(id_account,3) into prefix_temp from mst_account where id_account = var_parent limit 1;
							return concat(prefix_temp,nourut_int+1,'00');
						end if;
				 ELSEif header =0 then
							select left(id_account,4) into prefix_temp from mst_account where id_account = var_parent limit 1;
							return concat(prefix_temp,'0',nourut_int+1);
				 end if;
			end IF;
		
			if is_use_separator = 0 then
				if header = 1 then
						if jumlah_nol = 4 THEN
							select left(id_account,1) into prefix_temp from mst_account where id_account = var_parent limit 1;
						  return concat(prefix_temp,nourut_int+1,'000');
						elseif jumlah_nol = 3 THEN
							select left(id_account,2) into prefix_temp from mst_account where id_account = var_parent limit 1;
							return concat(prefix_temp,nourut_int+1,'00');
						end if;
				 ELSEif header =0 then
							select left(id_account,3) into prefix_temp from mst_account where id_account = var_parent limit 1;
							return concat(prefix_temp,'0',nourut_int+1);
				 end if;
			END IF;
			
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_apterm_disc
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_apterm_disc`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_apterm_disc`(var_criteria varchar(120), var_no_purchase varchar(200)) RETURNS double
BEGIN
declare var_result double;


	select 
case 
	when DATEDIFF((select now()),a.date_trn) <= b.disc_term_days THEN (b.disc_term_nominal * a.purchase_amount/100)
	else 0 end as disc into var_result 
from ap_status a
inner join trn_purchase_head b on b.no_purchase = a.no_purchase
where b.id_supplier = var_criteria AND  b.payment_method=2
and a.no_purchase = var_no_purchase;

	RETURN var_result;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_arterm_disc
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_arterm_disc`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_arterm_disc`(var_criteria varchar(120), var_no_sales varchar(200)) RETURNS double
BEGIN
declare var_result double;


	select case
when DATEDIFF((select now()),a.date_trn) <= b.termpaydisc THEN (b.discpay * a.sales_amount/100)
	else 0 end as disc into var_result 
from ar_status a
inner join trn_sales_head b on b.no_sales = a.no_sales
where b.id_customer = var_criteria AND  b.payment_method=2
and a.no_sales = var_no_sales;

	RETURN var_result;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_cogs
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_cogs`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_cogs`(var_criteria varchar(120), var_start_date date, var_end_date date) RETURNS int(11)
BEGIN

declare stock_awal integer;
declare stock_in_bef_period integer;
declare stock_out_bef_period integer;
declare stock_bef_period integer;

select balance into stock_awal from i_item_beg_balance where id_item = var_criteria;
select qty into stock_in_bef_period from i_stock_in where id_item = var_criteria
and date_trn < var_start_date;
select qty into stock_out_bef_period from i_stock_out where id_item = var_criteria
and date_trn < var_start_date;

set stock_bef_period = stock_in_bef_period-stock_out_bef_period;

return stock_bef_period;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_cogs_2
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_cogs_2`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_cogs_2`(var_criteria varchar(120), var_start_date date, var_end_date date) RETURNS int(11)
BEGIN

declare stock_awal integer;
declare stock_in_bef_period integer;
declare stock_out_bef_period integer;
declare stock_bef_period integer;

select balance into stock_awal from i_item_beg_balance where id_item = var_criteria;
select qty into stock_in_bef_period from i_stock_in where id_item = var_criteria
and date_trn < var_start_date;
select qty into stock_out_bef_period from i_stock_out where id_item = var_criteria
and date_trn < var_start_date;

set stock_bef_period = stock_in_bef_period-stock_out_bef_period;

return stock_bef_period;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_cogs_avg
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_cogs_avg`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_cogs_avg`(var_criteria varchar(120), transactions varchar(250)) RETURNS int(11)
BEGIN
declare var_qty_terakhir double;
declare var_price_terakhir double;
declare var_nominal_terakhir double;
declare var_qty_trans double;
declare var_price_trans double;
declare var_nominal_trans double;
declare var_cogs double;

if transactions = 'MASUK' then
	select case when price is null then 0 else price end into var_price_terakhir from lap_mutasi_hpp where id_item = var_criteria order by nmb_asc desc limit 1;
	select case when saldo is null then 0 else saldo end into var_qty_terakhir from lap_mutasi_hpp where id_item = var_criteria order by nmb_asc desc limit 1;
	set var_nominal_terakhir = var_price_terakhir * var_qty_terakhir;
	
	select case when masuk is null then 0 else masuk end into var_qty_trans from lap_mutasi_hpp where id_item = var_criteria order by nmb_asc desc limit 1;
	select case when price_in is null then 0 else price_in end into var_price_trans from lap_mutasi_hpp where id_item = var_criteria order by nmb_asc desc limit 1;
	set var_nominal_trans = var_qty_trans * var_price_trans;
	set var_cogs = (var_nominal_terakhir + var_nominal_trans) / (var_qty_terakhir + var_qty_trans);
	if var_cogs is null THEN
		set var_cogs = 0;
	end if;
elseif transactions = 'KELUAR' THEN
	select saldo into var_cogs from lap_mutasi_hpp where id_item = var_criteria order by nmb_asc desc limit 1;
end if;


return var_cogs;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_company_type
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_company_type`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_company_type`() RETURNS int(11)
BEGIN

declare var_type integer;

select flag_type into var_type from mst_company where flag_active =1;
return var_type;

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_convert_curr
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_convert_curr`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_convert_curr`(var_id_curr varchar(30)) RETURNS double
BEGIN
		
		declare var_convert_nom double;
		select case when convert_value is null then 1 else convert_value end into var_convert_nom from mst_setcurrency where id_currency = var_id_curr;	
	
		return var_convert_nom;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_convert_curr_cashier
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_convert_curr_cashier`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_convert_curr_cashier`(var_no_po varchar(60)) RETURNS double
BEGIN
		
		declare var_kurs double;
		select case when kurs is null then 1 else kurs end into var_kurs from trn_sales_head where no_sales = var_no_po;	
	
		return var_kurs;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_convert_curr_po
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_convert_curr_po`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_convert_curr_po`(var_no_po varchar(60)) RETURNS double
BEGIN
		
		declare var_kurs double;
		select case when kurs is null then 1 else kurs end into var_kurs from trn_purchase_order_head where no_purchase_order = var_no_po;	
	
		return var_kurs;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_convert_curr_pu
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_convert_curr_pu`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_convert_curr_pu`(var_no_po varchar(60)) RETURNS double
BEGIN
		
		declare var_kurs double;
		select case when kurs is null then 1 else kurs end into var_kurs from trn_purchase_head where no_purchase = var_no_po;	
	
		return var_kurs;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_convert_curr_sales
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_convert_curr_sales`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_convert_curr_sales`(var_no_po varchar(60)) RETURNS double
BEGIN
		
		declare var_kurs double;
		select case when kurs is null then 1 else kurs end into var_kurs from trn_sales_head where no_sales = var_no_po;	
	
		return var_kurs;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_curr_pu
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_curr_pu`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_curr_pu`(var_no_pu varchar(120)) RETURNS varchar(30) CHARSET utf8
BEGIN
		
		declare var_id_curr varchar(30);
		select id_curr into var_id_curr from trn_purchase_det where no_purchase = var_no_pu limit 1;

return var_id_curr;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_curr_sales
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_curr_sales`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_curr_sales`(var_no_pu varchar(120)) RETURNS varchar(30) CHARSET utf8
BEGIN
		
		declare var_id_curr varchar(30);
		select id_curr into var_id_curr from trn_sales_det where no_sales = var_no_pu limit 1;

return var_id_curr;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_defcurr
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_defcurr`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_defcurr`() RETURNS varchar(30) CHARSET utf8
BEGIN
		
		declare var_id_curr varchar(30);
		select id_currency into var_id_curr from mst_setcurrency where convert_value = 1;

return var_id_curr;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_defunit
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_defunit`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_defunit`(var_criteria varchar(60)) RETURNS varchar(30) CHARSET utf8
BEGIN
		
		declare var_price varchar(30);
		select sell_unit into var_price from mst_item where id_item = var_criteria;

return var_price;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_harga_jual
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_harga_jual`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_harga_jual`(var_criteria varchar(60)) RETURNS int(11)
BEGIN
		
		declare var_price double;
		select case when sell_price is null then 0 else sell_price end into var_price from mst_item where id_item = var_criteria;

return var_price;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_harga_service
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_harga_service`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_harga_service`(var_criteria varchar(60)) RETURNS int(11)
BEGIN
		
		declare var_price double;
		select case when price is null then 0 else price end into var_price from mst_service where id_service = var_criteria;

return var_price;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_max_approve_ro
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_max_approve_ro`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_max_approve_ro`(var_criteria varchar(120), var_id_item varchar(60)) RETURNS int(11)
    READS SQL DATA
BEGIN
		declare var_item_saldo integer;
		
		select 
		CASE when qty is null then 0 else qty end - case when approve_qty is null then 0 else approve_qty end into var_item_saldo
		from trn_request_order_det where no_request_order = var_criteria and id_item = var_id_item;
		return var_item_saldo;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_qtyreturbeli
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_qtyreturbeli`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_qtyreturbeli`(var_criteria varchar(120),var_item varchar(60)) RETURNS double
    READS SQL DATA
BEGIN

		declare qty_retur double;
		declare qty_purchase double;
		declare qty_max_beli double;
	
		select case when sum(qty) is null then 0 else sum(qty) end into qty_purchase from trn_purchase_det where no_purchase = var_criteria 
		and id_item = var_item;
		select case when sum(qty) is null then 0 else sum(qty) end into qty_retur from trn_purchase_return_det where no_purchase = var_criteria and id_item = var_item;
		set qty_max_beli = qty_purchase - qty_retur;

		return qty_max_beli;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_qtyreturcashier
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_qtyreturcashier`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_qtyreturcashier`(var_criteria varchar(120),var_item varchar(60)) RETURNS double
    READS SQL DATA
BEGIN

		declare qty_retur_jual double;
		declare qty_sales double;
		declare qty_max_jual double;
	
		select case when sum(qty) is null then 0 else sum(qty) end into qty_sales from trn_cashier_det where no_sales = var_criteria 
		and id_item = var_item;
		select case when sum(qty) is null then 0 else sum(qty) end into qty_retur_jual from trn_cashier_return_det where no_sales = var_criteria and id_item = var_item;
		set qty_max_jual = qty_sales - qty_retur_jual;

		return qty_max_jual;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_qtyreturjual
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_qtyreturjual`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_qtyreturjual`(var_criteria varchar(120),var_item varchar(60)) RETURNS double
    READS SQL DATA
BEGIN

		declare qty_retur_jual double;
		declare qty_sales double;
		declare qty_max_jual double;
	
		select case when sum(qty) is null then 0 else sum(qty) end into qty_sales from trn_sales_det where no_sales = var_criteria 
		and id_item = var_item;
		select case when sum(qty) is null then 0 else sum(qty) end into qty_retur_jual from trn_sales_return_det where no_sales = var_criteria and id_item = var_item;
		set qty_max_jual = qty_sales - qty_retur_jual;

		return qty_max_jual;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_sawal_stock
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_sawal_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_sawal_stock`(var_criteria varchar(120), var_start_date date, var_end_date date) RETURNS int(11)
BEGIN

declare stock_awal integer;
declare stock_in_bef_period integer;
declare stock_out_bef_period integer;
declare stock_bef_period integer;

select balance into stock_awal from i_item_beg_balance where id_item = var_criteria;
select qty into stock_in_bef_period from i_stock_in where id_item = var_criteria
and date_trn < var_start_date;
select qty into stock_out_bef_period from i_stock_out where id_item = var_criteria
and date_trn < var_start_date;

set stock_bef_period = stock_in_bef_period-stock_out_bef_period;

return stock_bef_period;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_stock
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_stock`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_stock`(var_criteria varchar(120)) RETURNS int(11)
    READS SQL DATA
BEGIN
		declare var_beg_balance integer;
		declare var_stock_in integer;
		declare var_stock_out integer;
		declare var_item_saldo integer;

		select balance * b.qty into var_beg_balance from i_item_beg_balance a 
		inner join mst_setunit b on b.id_item = a.id_item and b.id_unit = a.id_unit
		where a.id_item = var_criteria;
		
		select sum(a.qty * b.qty ) into var_stock_in from i_stock_in a
		inner join mst_setunit b on b.id_item = a.id_item and b.id_unit = a.id_unit
		where a.id_item = var_criteria;

		select sum(a.qty * b.qty ) into var_stock_out from i_stock_out a
		inner join mst_setunit b on b.id_item = a.id_item and b.id_unit = a.id_unit
		where a.id_item = var_criteria;
		
		if var_beg_balance is null THEN
			set var_beg_balance = 0;
		end if;

		if var_stock_in is null THEN
			set var_stock_in = 0;
		end if;

		if var_stock_out is null THEN
			set var_stock_out = 0;
		end if;

		set var_item_saldo = var_beg_balance + var_stock_in-var_stock_out;

		return var_item_saldo;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_unit_beli
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_unit_beli`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_unit_beli`(var_criteria varchar(60)) RETURNS varchar(30) CHARSET utf8
BEGIN
		
		declare var_unit varchar(30);
		select case when buy_unit is null then '' else buy_unit end into var_unit from mst_item where id_item = var_criteria;

return var_unit;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_unit_general
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_unit_general`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_unit_general`() RETURNS varchar(30) CHARSET utf8
BEGIN
		
		declare var_price varchar(30);
		select id_unit into var_price from mst_unit where flag_default = 1 limit 1;

return var_price;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_get_unit_jual
-- ----------------------------
DROP FUNCTION IF EXISTS `func_get_unit_jual`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_get_unit_jual`(var_criteria varchar(60)) RETURNS varchar(30) CHARSET utf8
BEGIN
		
		declare var_unit varchar(30);
		select case when sell_unit is null then '' else sell_unit end into var_unit from mst_item where id_item = var_criteria;

return var_unit;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_login
-- ----------------------------
DROP FUNCTION IF EXISTS `func_login`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_login`(var_user varchar(120),var_password varchar(120)) RETURNS int(11)
BEGIN
		
		declare ada_user integer;
		select count(username) as username into ada_user from mst_user where username = var_user and password = var_password and flag_active = 1;

		return ada_user;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_nobukti
-- ----------------------------
DROP FUNCTION IF EXISTS `func_nobukti`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_nobukti`(NAMAFORM TEXT,VAR_BULAN  INTeger,VAR_TAHUN INTEGER) RETURNS varchar(50) CHARSET utf8
    READS SQL DATA
BEGIN
		
		declare prefix_temp_cust VARCHAR(10);
		declare nourut_cust VARCHAR(10);
		declare nourut_int INTEGER;
		declare jumlah_nol INTEGER;
		declare jumlah integer;
		declare bulan_str varchar(2);
		declare tahun_str varchar(4);
		declare i integer;
		
					
					set bulan_str = concat('',var_bulan);
					IF NAMAFORM <> "MASTER_ITEM" AND NAMAFORM <> "MASTER_EXPEDITION" AND NAMAFORM <> "MASTER_GOLASET" AND NAMAFORM <> "MASTER_ASET" THEN
						set tahun_str = right(concat('',var_tahun),4);
					ELSE
						set tahun_str = right(concat('',var_tahun),2);
					end IF;

					if LENGTH(bulan_str) = 1 THEN
						set bulan_str = concat('0',var_bulan);
					end if;
					select nourut into nourut_cust from control_no_trans where form = NAMAFORM  and bulan = VAR_BULAN and tahun = VAR_TAHUN;
					select IFNULL(PREFIX,'') into prefix_temp_cust from control_no_trans where form = NAMAFORM and bulan = VAR_BULAN and tahun = VAR_TAHUN; 
					set jumlah = length(nourut_cust);
					
					set nourut_int = cast(nourut_cust as unsigned);

					set i=1;
					set jumlah_nol=0;
					while i <= jumlah do	
						if left(nourut_cust,i) = 0 THEN
							set jumlah_nol = jumlah_nol +1; 
						end if;
						set i=i+1;
					end while;
			IF NAMAFORM <> "MASTER_ITEM" and NAMAFORM <> "MASTER_EXPEDITION" and NAMAFORM <> "MASTER_GOLASET" and NAMAFORM <> "MASTER_ASET" THEN
					if jumlah_nol >= 6 THEN
						return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','0000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','0000',nourut_int+1);
					elseif jumlah_nol = 4 THEN
						if nourut_int = 9 THEN
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if nourut_int = 99 THEN
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','00',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 999 THEN
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','0',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 9999 THEN
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-','0',nourut_int+1);
						end if;
					ELSE
						return concat(prefix_temp_cust,'/',bulan_str,'-',tahun_str,'-',nourut_int+1);
					end if;
			end if;

			IF NAMAFORM = "MASTER_ITEM" THEN
					if jumlah_nol >= 6 THEN
						return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
						if nourut_int = 99 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if nourut_int = 999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						end if;
					ELSE
						return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
					end if;

			END IF;

			
			IF NAMAFORM = "MASTER_EXPEDITION" THEN
					if jumlah_nol >= 6 THEN
						return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
						if nourut_int = 99 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if nourut_int = 999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						end if;
					ELSE
						return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
					end if;

			END IF;
		
			IF NAMAFORM = "MASTER_GOLASET" THEN
					if jumlah_nol >= 6 THEN
						return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
						if nourut_int = 99 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if nourut_int = 999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						end if;
					ELSE
						return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
					end if;

			END IF;

IF NAMAFORM = "MASTER_ASET" THEN
					if jumlah_nol >= 6 THEN
						return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
						if nourut_int = 99 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if nourut_int = 999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
						ELSE
							return concat(prefix_temp_cust,bulan_str,tahun_str,'0',nourut_int+1);
						end if;
					ELSE
						return concat(prefix_temp_cust,bulan_str,tahun_str,'',nourut_int+1);
					end if;

			END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_nomor
-- ----------------------------
DROP FUNCTION IF EXISTS `func_nomor`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_nomor`(NAMAFORM TEXT) RETURNS varchar(50) CHARSET utf8
    READS SQL DATA
BEGIN
		
		declare prefix_temp_cust VARCHAR(10);
		declare nourut_cust VARCHAR(10);
		declare nourut_int INTEGER;
		declare jumlah_nol INTEGER;
		declare jumlah integer;
		declare i integer;
		
		IF NAMAFORM = "MASTER CUSTOMER" OR NAMAFORM = "MASTER SUPPLIER" OR NAMAFORM = "MASTER MARKETING" OR NAMAFORM = "MASTER BIAYA" OR NAMAFORM ="FORMULA BIAYA" OR NAMAFORM ="MASTER ITEM" THEN
					select nourut into nourut_cust from control_no_master where form = NAMAFORM; 
					select IFNULL(PREFIX,'') into prefix_temp_cust from control_no_master where form = NAMAFORM; 
					set jumlah = length(nourut_cust);
					
					set nourut_int = cast(nourut_cust as unsigned);

					set i=1;
					set jumlah_nol=0;
					while i <= jumlah do	
						if left(nourut_cust,i) = 0 THEN
							set jumlah_nol = jumlah_nol +1; 
						end if;
						set i=i+1;
					end while;
					
					if nourut_int = 999999 then 
						set nourut_int = 0;
						set jumlah_nol = 6;
					end if;

					if jumlah_nol >= 6 THEN
						return concat(prefix_temp_cust,get_year(),'00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if jumlah = 6 and nourut_int >= 9 then
							return concat(prefix_temp_cust,get_year(),'0000',nourut_int+1);
						else
							return concat(prefix_temp_cust,get_year(),'00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
						if jumlah = 5 and nourut_int >= 99 then
							return concat(prefix_temp_cust,get_year(),'000',nourut_int+1);
						else
							return concat(prefix_temp_cust,get_year(),'0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if jumlah = 4 and nourut_int >= 999 then
							return concat(prefix_temp_cust,get_year(),'00',nourut_int+1);
						else
							return concat(prefix_temp_cust,get_year(),'000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
							if jumlah = 3 and nourut_int >= 9999 then
							return concat(prefix_temp_cust,get_year(),'0',nourut_int+1);
						else
							return concat(prefix_temp_cust,get_year(),'00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
							if jumlah = 2 and nourut_int >= 99999 then
							return concat(prefix_temp_cust,get_year(),'',nourut_int+1);
						else
							return concat(prefix_temp_cust,get_year(),'0',nourut_int+1);
						end if;
					elseif jumlah_nol = 0 THEN
						return concat(prefix_temp_cust,get_year(),'',nourut_int+1);
					end if;
						
		END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_old_password
-- ----------------------------
DROP FUNCTION IF EXISTS `func_old_password`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_old_password`(var_username varchar(120)) RETURNS varchar(120) CHARSET utf8
BEGIN
		
		declare var_password varchar(120);
		select password into var_password from mst_user where username = var_username;

		return var_password;
	
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_paymentmethod_def
-- ----------------------------
DROP FUNCTION IF EXISTS `func_paymentmethod_def`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_paymentmethod_def`(var_criteria varchar(120), var_transaction text) RETURNS int(11)
    READS SQL DATA
BEGIN
declare payment_method integer;

		if var_transaction = 'sales' THEN
			select def_payment_method into payment_method from mst_customer where id_customer = var_criteria;
		elseif var_transaction = 'purchase' THEN
			select def_payment_method into payment_method from mst_supplier where id_supplier = var_criteria;
		end if;
	
		return payment_method;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_update_nobukti
-- ----------------------------
DROP FUNCTION IF EXISTS `func_update_nobukti`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_update_nobukti`(NAMAFORM TEXT, VAR_BULAN  INTEGER,VAR_TAHUN INTEGER) RETURNS varchar(50) CHARSET utf8
    READS SQL DATA
BEGIN
		
		declare prefix_temp_cust VARCHAR(10);
		declare nourut_cust VARCHAR(10);
		declare nourut_int INTEGER;
		declare jumlah_nol INTEGER;
		declare jumlah integer;
		declare i integer;
		
		IF NAMAFORM = "JOURNAL" 
									or NAMAFORM = "OPNAME" 
									or NAMAFORM = "ADJUSTSTOCK" 
									or NAMAFORM = "SPENDMONEY" 
									or NAMAFORM = "RECEIVEMONEY" 
									OR NAMAFORM = "PAYAP" 
									or NAMAFORM = "PAYAR" 
									or NAMAFORM = "PURCHASE_RETURN" 
									or NAMAFORM = "PO" 
									or NAMAFORM = "PURCHASE" 
									or NAMAFORM = "DIRECT_PURCHASE" 
									or NAMAFORM = "SALES" 
									or NAMAFORM = "SALES_ORDER" 
									or NAMAFORM = "SALES_SERVICE" 
									or NAMAFORM = "SALES_RETURN" 
									or NAMAFORM = "RECONCILE" 
									or NAMAFORM = "TRFSTOCK" 
									or NAMAFORM = "RO"
									or NAMAFORM = "RECEIVED_ORDER"
									or NAMAFORM = "DELIVERED_ITEM"
									or NAMAFORM = "CASHIER"
									or NAMAFORM = "CASHIER_RETURN"
									or NAMAFORM = "PINJAMAN"
									or NAMAFORM = "BAYAR_PINJAMAN"
									or NAMAFORM = "MASTER_ITEM"
									or NAMAFORM = "MASTER_EXPEDITION"
									or NAMAFORM = "MASTER_ASET"
									or NAMAFORM = "MASTER_GOLASET"
									or NAMAFORM = "MASTER_CUSTOMER"
									or NAMAFORM = "REDEMPTION"
									or NAMAFORM = "SERVICE"
									or NAMAFORM = "SERVICEPAY"
									or NAMAFORM = "PESANAN"
									or NAMAFORM = "PESANANPAY"
									or NAMAFORM = "TANPANOTA"
									or NAMAFORM = "ADJUST_JOURNAL"
									or NAMAFORM = "DEPR_JOURNAL"
								THEN
					select nourut into nourut_cust from control_no_trans where form = NAMAFORM and bulan = VAR_BULAN and tahun = VAR_TAHUN;
					select IFNULL(PREFIX,'') into prefix_temp_cust from control_no_trans where form = NAMAFORM limit 1; 
					set jumlah = length(nourut_cust);
					
					set nourut_int = cast(nourut_cust as unsigned);

					set i=1;
					set jumlah_nol=0;
					while i <= jumlah do	
						if left(nourut_cust,i) = 0 THEN
							set jumlah_nol = jumlah_nol +1; 
						end if;
						set i=i+1;
					end while;
					
				IF NAMAFORM <> "MASTER_ITEM" AND NAMAFORM <> "MASTER_EXPEDITION" AND NAMAFORM <> "MASTER_GOLASET" AND NAMAFORM <> "MASTER_ASET" THEN
					if jumlah_nol >= 6 THEN
						return concat('0000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						return concat('0000',nourut_int+1);
					elseif jumlah_nol = 4 THEN
						if nourut_int = 9 THEN
							return concat('000',nourut_int+1);
					  ELSE
							return concat('0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if nourut_int = 99 THEN
							return concat('00',nourut_int+1);
					  ELSE
							return concat('000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 999 THEN
							return concat('0',nourut_int+1);
					  ELSE
							return concat('00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 9999 THEN
							return concat('',nourut_int+1);
					  ELSE
							return concat('0',nourut_int+1);
						end if;
					ELSE
						return concat('',nourut_int+1);
					end if;
				end if;

			IF NAMAFORM = "MASTER_ITEM" THEN
				if jumlah_nol >= 6 THEN
						return concat('00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat('0000',nourut_int+1);
					  ELSE
							return concat('00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
							if nourut_int = 99 THEN
							return concat('000',nourut_int+1);
					  ELSE
							return concat('0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
							if nourut_int = 999 THEN
							return concat('00',nourut_int+1);
					  ELSE
							return concat('000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat('0',nourut_int+1);
					  ELSE
							return concat('00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat('',nourut_int+1);
					  ELSE
							return concat('0',nourut_int+1);
						end if;
					ELSE
						return concat('',nourut_int+1);
					end if;
			end if;

			
			IF NAMAFORM = "MASTER_EXPEDITION" THEN
				if jumlah_nol >= 6 THEN
						return concat('00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat('0000',nourut_int+1);
					  ELSE
							return concat('00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
							if nourut_int = 99 THEN
							return concat('000',nourut_int+1);
					  ELSE
							return concat('0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
							if nourut_int = 999 THEN
							return concat('00',nourut_int+1);
					  ELSE
							return concat('000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat('0',nourut_int+1);
					  ELSE
							return concat('00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat('',nourut_int+1);
					  ELSE
							return concat('0',nourut_int+1);
						end if;
					ELSE
						return concat('',nourut_int+1);
					end if;
			end if;
			
			IF NAMAFORM = "MASTER_GOLASET" THEN
				if jumlah_nol >= 6 THEN
						return concat('00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat('0000',nourut_int+1);
					  ELSE
							return concat('00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
							if nourut_int = 99 THEN
							return concat('000',nourut_int+1);
					  ELSE
							return concat('0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
							if nourut_int = 999 THEN
							return concat('00',nourut_int+1);
					  ELSE
							return concat('000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat('0',nourut_int+1);
					  ELSE
							return concat('00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat('',nourut_int+1);
					  ELSE
							return concat('0',nourut_int+1);
						end if;
					ELSE
						return concat('',nourut_int+1);
					end if;
			end if;

IF NAMAFORM = "MASTER_ASET" THEN
				if jumlah_nol >= 6 THEN
						return concat('00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if nourut_int = 9 THEN
							return concat('0000',nourut_int+1);
					  ELSE
							return concat('00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
							if nourut_int = 99 THEN
							return concat('000',nourut_int+1);
					  ELSE
							return concat('0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
							if nourut_int = 999 THEN
							return concat('00',nourut_int+1);
					  ELSE
							return concat('000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
						if nourut_int = 9999 THEN
							return concat('0',nourut_int+1);
					  ELSE
							return concat('00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
						if nourut_int = 99999 THEN
							return concat('',nourut_int+1);
					  ELSE
							return concat('0',nourut_int+1);
						end if;
					ELSE
						return concat('',nourut_int+1);
					end if;
			end if;


		END IF;


		

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for func_update_nomor
-- ----------------------------
DROP FUNCTION IF EXISTS `func_update_nomor`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `func_update_nomor`(NAMAFORM TEXT) RETURNS varchar(50) CHARSET utf8
    READS SQL DATA
BEGIN
		
		declare prefix_temp_cust VARCHAR(10);
		declare nourut_cust VARCHAR(10);
		declare nourut_int INTEGER;
		declare jumlah_nol INTEGER;
		declare jumlah integer;
		declare i integer;
		
		IF NAMAFORM = "MASTER CUSTOMER" OR NAMAFORM = "MASTER SUPPLIER" OR NAMAFORM = "MASTER MARKETING" OR NAMAFORM = "MASTER BIAYA" OR NAMAFORM ="FORMULA BIAYA" OR NAMAFORM ="MASTER ITEM" THEN
					select nourut into nourut_cust from control_no_master where form = NAMAFORM; 
					select IFNULL(PREFIX,'') into prefix_temp_cust from control_no_master where form = NAMAFORM; 
					set jumlah = length(nourut_cust);
					
					set nourut_int = cast(nourut_cust as unsigned);

					set i=1;
					set jumlah_nol=0;
					while i <= jumlah do	
						if left(nourut_cust,i) = 0 THEN
							set jumlah_nol = jumlah_nol +1; 
						end if;
						set i=i+1;
					end while;
					
					if nourut_int = 999999 then 
						set nourut_int = 0;
						set jumlah_nol = 6;
					end if;

					if jumlah_nol >= 6 THEN
						return concat('00000',nourut_int+1);
					elseif jumlah_nol = 5 THEN
						if jumlah = 6 and nourut_int >= 9 then
							return concat('0000',nourut_int+1);
						else
							return concat('00000',nourut_int+1);
						end if;
					elseif jumlah_nol = 4 THEN
						if jumlah = 5 and nourut_int >= 99 then
							return concat('000',nourut_int+1);
						else
							return concat('0000',nourut_int+1);
						end if;
					elseif jumlah_nol = 3 THEN
						if jumlah = 4 and nourut_int >= 999 then
							return concat('00',nourut_int+1);
						else
							return concat('000',nourut_int+1);
						end if;
					elseif jumlah_nol = 2 THEN
							if jumlah = 3 and nourut_int >= 9999 then
							return concat('0',nourut_int+1);
						else
							return concat('00',nourut_int+1);
						end if;
					elseif jumlah_nol = 1 THEN
							if jumlah = 2 and nourut_int >= 99999 then
							return concat('',nourut_int+1);
						else
							return concat('0',nourut_int+1);
						end if;
					elseif jumlah_nol = 0 THEN
						return concat('',nourut_int+1);
					end if;
						
		END IF;

END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_acc_period_month
-- ----------------------------
DROP FUNCTION IF EXISTS `get_acc_period_month`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_acc_period_month`() RETURNS int(11)
BEGIN
	declare tahun integer;
	select month(periode) into tahun from i_accounting_period;
	return tahun;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_acc_period_year
-- ----------------------------
DROP FUNCTION IF EXISTS `get_acc_period_year`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_acc_period_year`() RETURNS int(11)
BEGIN
	declare tahun integer;
	select year(periode) into tahun from i_accounting_period;
	return tahun;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_begbalance_ap
-- ----------------------------
DROP FUNCTION IF EXISTS `get_begbalance_ap`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_begbalance_ap`(var_id_supplier varchar(60)) RETURNS double
BEGIN
	declare beg_balance double;
	select case when sum(amount_of) is null then 0 else sum(amount_of) end into beg_balance from mst_ap_initialbalance
	where id_supplier = var_id_supplier;

	RETURN beg_balance;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_begbalance_ar
-- ----------------------------
DROP FUNCTION IF EXISTS `get_begbalance_ar`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_begbalance_ar`(var_id_customer varchar(60)) RETURNS double
BEGIN
	declare beg_balance double;
	select case when sum(amount_of) is null then 0 else sum(amount_of) end into beg_balance from mst_ar_initialbalance
	where id_customer = var_id_customer;

	RETURN beg_balance;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_month
-- ----------------------------
DROP FUNCTION IF EXISTS `get_month`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_month`() RETURNS int(11)
BEGIN
	declare bulan integer;
	select month(now()) into bulan;
	return bulan;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_nilai_buku_aset
-- ----------------------------
DROP FUNCTION IF EXISTS `get_nilai_buku_aset`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_nilai_buku_aset`(var_id_golongan varchar(30), var_nilai_perolehan double, var_tgl_perolehan date, var_rate_penyusutan double) RETURNS double
BEGIN
declare var_masa_penyusutan double;
declare var_th_penyusutan double;
declare var_sisa_nilai_buku double;
declare var_tgl_server date;
declare var_bln_server double;
declare var_th_server double;


set var_tgl_server = (select now());
set var_bln_server = month(var_tgl_server);
set var_th_server = year(var_tgl_server);

if var_th_server = year(var_tgl_perolehan) THEN
		set var_masa_penyusutan = MONTH(var_tgl_server) - month(var_tgl_perolehan);
elseif var_th_server > year(var_tgl_perolehan) THEN
		if var_bln_server > month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = (var_th_penyusutan * 12) + var_bln_server - month(var_tgl_perolehan);
		elseif var_bln_server < month(var_tgl_perolehan) then 
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan)) -1;
			set var_masa_penyusutan = (var_th_penyusutan * 12) + 12 - (month(var_tgl_perolehan)) + var_bln_server;
		elseif var_bln_server = month(var_tgl_perolehan) THEN
			set var_th_penyusutan = var_th_server -  (year(var_tgl_perolehan));
			set var_masa_penyusutan = var_th_penyusutan * 12;
		end if;
ELSE
		set var_masa_penyusutan = 0;
end if;

set var_sisa_nilai_buku = var_nilai_perolehan - (var_nilai_perolehan * var_rate_penyusutan/100/12 * var_masa_penyusutan);

return var_sisa_nilai_buku; 



END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_totalcost_month
-- ----------------------------
DROP FUNCTION IF EXISTS `get_totalcost_month`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_totalcost_month`() RETURNS double
BEGIN
	declare bulan integer;
	declare total double;
	select month(now()) into bulan;
	select sum(a.nominal) into total from trn_ledger_det a inner join trn_ledger_head b on b.no_ledger = a.no_ledger 
	inner join mst_account c on c.id_account = a.id_account
	where c.golongan = 6 and MONTH(b.date_trn) = get_month() AND YEAR(B.date_trn) = get_year() and b.post_from <> 'Close Period';

	return total;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_totalcost_year
-- ----------------------------
DROP FUNCTION IF EXISTS `get_totalcost_year`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_totalcost_year`() RETURNS double
BEGIN
	declare bulan integer;
	declare total double;
	select month(now()) into bulan;
	select sum(a.nominal) into total from trn_ledger_det a inner join trn_ledger_head b on b.no_ledger = a.no_ledger 
	inner join mst_account c on c.id_account = a.id_account
	where c.golongan = 6 AND YEAR(B.date_trn) = get_year() and b.post_from <> 'Close Period';

	return total;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for get_year
-- ----------------------------
DROP FUNCTION IF EXISTS `get_year`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_year`() RETURNS int(11)
BEGIN
	declare tahun integer;
	select year(now()) into tahun;
	return tahun;
END
;;
DELIMITER ;

-- ----------------------------
-- Function structure for validate_trn
-- ----------------------------
DROP FUNCTION IF EXISTS `validate_trn`;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `validate_trn`(NAMAFORM TEXT, var_no varchar(120)) RETURNS int(11)
    READS SQL DATA
BEGIN
		
	declare jml integer;
  declare po_purch varchar(60);
	if NAMAFORM = 'Purchase Order' then
		select count(no_purchase_order) into jml from trn_purchase_head where no_purchase_order = var_no;
	elseif NAMAFORM = 'Sales Order' THEN
		select count(no_sales_order) into jml from trn_sales_head where no_sales_order = var_no;
  elseif NAMAFORM = 'Sales' THEN
		select count(no_invoice) into jml from trn_payment_ar_det where no_invoice = var_no;
	elseif NAMAFORM = 'Purchase' THEN
		select count(no_purchase) into jml from trn_payment_ap_det where no_purchase = var_no;
	elseif NAMAFORM = 'Request Order' THEN
		select count(no_request_order) into jml from trn_request_order_head where no_request_order = var_no and flag_status = 1;
	elseif NAMAFORM = 'RO PO' THEN
		select count(no_request_order) into jml from trn_purchase_order_det where no_request_order = var_no;
	elseif NAMAFORM = 'PURCH REC' THEN
		
		select count(no_purchase_order) into jml from trn_purchase_head where no_purchase_order = var_no;
	elseif NAMAFORM = 'PO REC' THEN
		
		select count(no_purchase_order) into jml from trn_received_order_head where no_purchase_order = var_no;
	elseif NAMAFORM = 'PURCH_PURCHRETUR' THEN
		
		select count(no_purchase) into jml from trn_purchase_return_det where no_purchase = var_no;
	end if;
	
		return jml;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_save` AFTER INSERT ON `mst_account` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_account, 'Chart Of Account', NEW.created_user, 'Input', NEW.created_date, concat('Input Account Baru - ',NEW.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_update`;
DELIMITER ;;
CREATE TRIGGER `tgr_update` AFTER UPDATE ON `mst_account` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_delete`;
DELIMITER ;;
CREATE TRIGGER `tgr_delete` AFTER DELETE ON `mst_account` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save_copy_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_save_copy_copy_copy` AFTER INSERT ON `mst_account_setmanufacture_id` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_account, 'Chart Of Account', NEW.created_user, 'Input', NEW.created_date, concat('Input Account Baru - ',NEW.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_update_copy_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_update_copy_copy_copy` AFTER UPDATE ON `mst_account_setmanufacture_id` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_delete_copy_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_delete_copy_copy_copy` AFTER DELETE ON `mst_account_setmanufacture_id` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save_copy_copy1`;
DELIMITER ;;
CREATE TRIGGER `tgr_save_copy_copy1` AFTER INSERT ON `mst_account_setmanufacture_int` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_account, 'Chart Of Account', NEW.created_user, 'Input', NEW.created_date, concat('Input Account Baru - ',NEW.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_update_copy_copy1`;
DELIMITER ;;
CREATE TRIGGER `tgr_update_copy_copy1` AFTER UPDATE ON `mst_account_setmanufacture_int` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_delete_copy_copy1`;
DELIMITER ;;
CREATE TRIGGER `tgr_delete_copy_copy1` AFTER DELETE ON `mst_account_setmanufacture_int` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_save_copy_copy` AFTER INSERT ON `mst_account_setretail_id` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_account, 'Chart Of Account', NEW.created_user, 'Input', NEW.created_date, concat('Input Account Baru - ',NEW.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_update_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_update_copy_copy` AFTER UPDATE ON `mst_account_setretail_id` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_delete_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_delete_copy_copy` AFTER DELETE ON `mst_account_setretail_id` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_save_copy` AFTER INSERT ON `mst_account_setretail_int` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_account, 'Chart Of Account', NEW.created_user, 'Input', NEW.created_date, concat('Input Account Baru - ',NEW.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_update_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_update_copy` AFTER UPDATE ON `mst_account_setretail_int` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_delete_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_delete_copy` AFTER DELETE ON `mst_account_setretail_int` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_account, 'Chart Of Account', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Account - ',OLD.account_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_save_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_save_copy` AFTER INSERT ON `mst_ap_initialbalance` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_supplier, 'A/P Begining Balance', NEW.created_user, 'Input', NEW.created_date, concat('Input New A/P Begining Balance - ',NEW.invoice_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_edit_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_edit_copy` AFTER UPDATE ON `mst_ap_initialbalance` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_supplier, 'A/P Begining Balance', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit New A/P Begining Balance - ',OLD.invoice_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_hapus_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_hapus_copy` AFTER DELETE ON `mst_ap_initialbalance` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_supplier, 'A/P Begining Balance ', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Delete New A/P Begining Balance - ',OLD.invoice_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_save_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_save_copy_copy` AFTER INSERT ON `mst_ar_initialbalance` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_customer, 'A/R Begining Balance', NEW.created_user, 'Input', NEW.created_date, concat('Input New A/R Begining Balance - ',NEW.invoice_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_edit_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_edit_copy_copy` AFTER UPDATE ON `mst_ar_initialbalance` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_customer, 'A/R Begining Balance', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit New A/R Begining Balance - ',OLD.invoice_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_hapus_copy_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_hapus_copy_copy` AFTER DELETE ON `mst_ar_initialbalance` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_customer, 'A/R Begining Balance ', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Delete New A/R Begining Balance - ',OLD.invoice_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_insert_aset`;
DELIMITER ;;
CREATE TRIGGER `tgr_insert_aset` AFTER INSERT ON `mst_aset` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_aset, 'Master Aset', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Aset - ',NEW.nama))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_update_aset`;
DELIMITER ;;
CREATE TRIGGER `tgr_update_aset` AFTER UPDATE ON `mst_aset` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_aset, 'Master Aset', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Aset - ',OLD.nama))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_delete_aset`;
DELIMITER ;;
CREATE TRIGGER `tgr_delete_aset` AFTER DELETE ON `mst_aset` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_aset, 'Master Aset', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Aset - ',OLD.nama))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_currency_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_currency_save` AFTER INSERT ON `mst_currency` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_currency, 'Master Currency', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Currency Baru - ',NEW.currency))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_currency_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_currency_edit` AFTER UPDATE ON `mst_currency` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_currency, 'Master Currency', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Currency - ',OLD.currency))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_currency_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_currency_hapus` AFTER DELETE ON `mst_currency` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_currency, 'Master Currency', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Currency - ',OLD.currency))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cust_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_cust_save` AFTER INSERT ON `mst_customer` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_customer, 'Master Customer', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Customer Baru - ',concat(NEW.first_name,' ',NEW.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cust_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_cust_edit` AFTER UPDATE ON `mst_customer` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_customer, 'Master Customer', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Customer - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cust_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_cust_hapus` AFTER DELETE ON `mst_customer` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_customer, 'Master Customer', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Customer - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cust_bef_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_cust_bef_save` BEFORE INSERT ON `mst_customer_copy` FOR EACH ROW begin
declare var_status integer;
declare var_id_account varchar(30);
declare var_no varchar(120);

select func_nomor('MASTER CUSTOMER') into var_no;
select id_account into var_id_account from i_set_account_def where acc_parameter = 'acc_credit_sales';

set NEW.id_customer = var_no;
set NEW.id_account = var_id_account;
set NEW.photo = '';
set NEW.credit_limit = 0;
set NEW.status = 1;
set NEW.modified_user = 'import';
set NEW.created_date = now();
set NEW.created_user = 'import';
set NEW.modified_date = now();
set NEW.flag_credit_limit = 0;
set NEW.ar_balance=0;
set NEW.def_payment_method=2;
end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cust_save_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_cust_save_copy` AFTER INSERT ON `mst_customer_copy` FOR EACH ROW begin

if NEW.created_user = 'import' then
       update control_no_master set nourut = (select func_update_nomor('MASTER CUSTOMER')) where form = 'MASTER CUSTOMER';
end if;

insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_customer, 'Master Customer', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Customer Baru - ',concat(NEW.first_name,' ',NEW.last_name)));

end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cust_edit_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_cust_edit_copy` AFTER UPDATE ON `mst_customer_copy` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_customer, 'Master Customer', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Customer - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cust_hapus_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_cust_hapus_copy` AFTER DELETE ON `mst_customer_copy` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_customer, 'Master Customer', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Customer - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_employee_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_employee_save` AFTER INSERT ON `mst_employee` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_employee, 'Master Pegawai', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Pegawai Baru - ',concat(NEW.first_name,' ',NEW.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_employee_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_employee_edit` AFTER UPDATE ON `mst_employee` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_employee, 'Master Pegawai', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Pegawai - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_employee_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_employee_hapus` AFTER DELETE ON `mst_employee` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_employee, 'Master Pegawai', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Pegawai - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_item_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_item_save` AFTER INSERT ON `mst_item` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_item, 'Master Barang', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Barang Baru - ',New.item_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_item_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_item_edit` AFTER UPDATE ON `mst_item` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_item, 'Master Item', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Item - ',OLD.item_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_item_del`;
DELIMITER ;;
CREATE TRIGGER `tgr_item_del` AFTER DELETE ON `mst_item` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_item, 'Master Item', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Edit Master Item - ',OLD.item_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_save` AFTER INSERT ON `mst_service` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_service, 'Master Service', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Service Baru - ',NEW.service_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_edit` AFTER UPDATE ON `mst_service` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_service, 'Master Service', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Service - ',OLD.service_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_service_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_service_hapus` AFTER DELETE ON `mst_service` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_service, 'Master Service', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Service - ',OLD.service_name))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_supp_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_supp_save` AFTER INSERT ON `mst_supplier` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_supplier, 'Master Supplier', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Supplier Baru - ',concat(NEW.first_name,' ',NEW.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_supp_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_supp_edit` AFTER UPDATE ON `mst_supplier` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_supplier, 'Master Supplier', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Supplier - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_supp_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_supp_hapus` AFTER DELETE ON `mst_supplier` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_supplier, 'Master Supplier', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Supplier - ',concat(OLD.first_name,' ',OLD.last_name)))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_unit_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_unit_save` AFTER INSERT ON `mst_unit` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.id_unit, 'Master Unit', NEW.created_user, 'Input', NEW.created_date, concat('Input Master Unit Baru - ',NEW.unit))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_unit_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_unit_edit` AFTER UPDATE ON `mst_unit` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_unit, 'Master Unit', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Master Unit - ',OLD.unit))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_unit_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_unit_hapus` AFTER DELETE ON `mst_unit` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.id_unit, 'Master Unit', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Master Unit - ',OLD.Unit))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_journal_save_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_journal_save_copy` AFTER INSERT ON `trn_adjustjournal_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.journal_no, 'Jurnal Umum', NEW.created_user, 'Input', NEW.created_date, concat('Input Jurnal Umum Baru - ',NEW.journal_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_journal_edit_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_journal_edit_copy` AFTER UPDATE ON `trn_adjustjournal_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.journal_no, 'Jurnal Umum', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Jurnal Umum - ',OLD.journal_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_journal_hapus_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_journal_hapus_copy` AFTER DELETE ON `trn_adjustjournal_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.journal_no, 'Jurnal Umum', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Jurnal Umum - ',OLD.journal_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save_adjstock`;
DELIMITER ;;
CREATE TRIGGER `tgr_save_adjstock` AFTER INSERT ON `trn_adjust_stock_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_adjust_stock, 'Koreksi Stock', NEW.created_user, 'Input', NEW.created_date, concat('Input Koreksi Stock Baru - ',NEW.id_warehouse))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_edit_adjstock`;
DELIMITER ;;
CREATE TRIGGER `tgr_edit_adjstock` AFTER UPDATE ON `trn_adjust_stock_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_adjust_stock, 'Koreksi Stock', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Koreksi Stock - ',OLD.id_warehouse))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_hapus_adjstock`;
DELIMITER ;;
CREATE TRIGGER `tgr_hapus_adjstock` AFTER DELETE ON `trn_adjust_stock_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_adjust_stock, 'Koreksi Stock', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Koreksi Stock - ',OLD.id_warehouse))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `add_asetbeli`;
DELIMITER ;;
CREATE TRIGGER `add_asetbeli` AFTER INSERT ON `trn_asetbeli_det` FOR EACH ROW begin



drop temporary table if exists header;

CREATE TEMPORARY TABLE header select * FROM h_asetbeli where id_asetbeli=new.id_asetbeli;


set @tanggal=(select tanggal from header);

set @jam=(select jam from header);

set @user=(select id_user from header);


insert into m_aset(id_aset,id_satuan,id_coaaset,id_golongan,nama,ket,tanggal,status,id_user,nilai) 
values(new.id_aset,new.id_satuan,new.id_coa,new.id_golongan,new.nama,'-',@tanggal,'1',@user,new.nilai);


end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `del_asetbeli`;
DELIMITER ;;
CREATE TRIGGER `del_asetbeli` AFTER DELETE ON `trn_asetbeli_det` FOR EACH ROW begin

delete from m_aset where id_aset=old.id_aset;
end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `add_h_asetbeli`;
DELIMITER ;;
CREATE TRIGGER `add_h_asetbeli` AFTER INSERT ON `trn_asetbeli_head` FOR EACH ROW begin


set @coa=(select id_coaAP from m_supplier where id_supplier=new.id_supplier);

insert into h_acchutang (id_accAp,id_coa,id_coahutang,nominal,id_supplier,ket,tanggal,jam,id_user,status,tipe) 
values(new.id_asetbeli,new.id_coa,@coa,new.nilai,new.id_supplier,new.ket,new.tanggal,new.jam,new.id_user,new.status,'Pembelian Aset');

insert into m_aset(id_aset,id_satuan,id_coaaset,id_golongan,nama,ket,tanggal,status,id_user,nilai) 
values(new.id_aset,new.id_satuan,new.id_coa,new.id_golongan,new.nama,'-',new.tanggal,'1',new.id_user,new.nilai);


end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `del_h_asetbeli`;
DELIMITER ;;
CREATE TRIGGER `del_h_asetbeli` AFTER DELETE ON `trn_asetbeli_head` FOR EACH ROW begin

delete from h_acchutang where id_accap=old.id_asetbeli;

delete from m_aset where id_aset=old.id_aset;

end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cashbank_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_cashbank_save` AFTER INSERT ON `trn_cashbank_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.cashbank_no, concat('Kas Bank',NEW.flag_trans), NEW.created_user, 'Input', NEW.created_date, concat('Input Transaksi Kas Bank Baru - ',NEW.id_account))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cashbank_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_cashbank_edit` AFTER UPDATE ON `trn_cashbank_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.cashbank_no, concat('Kas Bank',NEW.flag_trans), NEW.created_user, 'Edit', NEW.created_date, concat('Edit Transaksi Kas Bank - ',OLD.id_account))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_cashbank_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_cashbank_hapus` AFTER DELETE ON `trn_cashbank_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.cashbank_no, concat('Kas Bank',OLD.flag_trans), OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Transaksi Kas Bank - ',OLD.id_account))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_return_save_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_return_save_copy` AFTER INSERT ON `trn_cashier_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_sales_return, 'Retur Transaksi Kasir', NEW.created_user, 'Input', NEW.created_date, concat('Input Retur Jual Baru - ',NEW.customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_return_edit_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_return_edit_copy` AFTER UPDATE ON `trn_cashier_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales_return, 'Retur Penjualan Kasir', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Retur Jual - ',OLD.customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_return_hapus_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_return_hapus_copy` AFTER DELETE ON `trn_cashier_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales_return, 'Retur Penjualan Kasir', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Retur Jual - ',OLD.customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_do_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_do_save` AFTER INSERT ON `trn_delivery_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_delivery_order, 'Surat Jalan', NEW.created_user, 'Input', NEW.created_date, concat('Input Surat Jalan Baru - ',NEW.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_do_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_do_edit` AFTER UPDATE ON `trn_delivery_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_delivery_order, 'Surat Jalan', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Surat Jalan - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_do_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_do_hapus` AFTER DELETE ON `trn_delivery_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_delivery_order, 'Surat Jalan', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Surat Jalan - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_save_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_save_copy` AFTER INSERT ON `trn_directpurchase_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_purchase, 'Faktur Pembelian', NEW.created_user, 'Input', NEW.created_date, concat('Input Faktur Beli Baru - ',NEW.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_edit_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_edit_copy` AFTER UPDATE ON `trn_directpurchase_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase, 'Faktur Pembelian', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Faktur Beli - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_hapus_copy`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_hapus_copy` AFTER DELETE ON `trn_directpurchase_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase, 'Faktur Pembelian', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Faktur Beli - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_journal_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_journal_save` AFTER INSERT ON `trn_journal_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.journal_no, 'Jurnal Umum', NEW.created_user, 'Input', NEW.created_date, concat('Input Jurnal Umum Baru - ',NEW.journal_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_journal_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_journal_edit` AFTER UPDATE ON `trn_journal_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.journal_no, 'Jurnal Umum', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Jurnal Umum - ',OLD.journal_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_journal_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_journal_hapus` AFTER DELETE ON `trn_journal_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.journal_no, 'Jurnal Umum', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Jurnal Umum - ',OLD.journal_no))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_ap_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_ap_save` AFTER INSERT ON `trn_payment_ap_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_payment_ap, 'Pembayaran Pembelian', NEW.created_user, 'Input', NEW.created_date, concat('Input Pembayaran Hutang Baru - ',NEW.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_ap_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_ap_edit` AFTER UPDATE ON `trn_payment_ap_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_payment_ap, 'Pembayaran Pembelian', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Pembayaran Hutang- ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_ap_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_ap_hapus` AFTER DELETE ON `trn_payment_ap_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_payment_ap, 'Pembayaran Pembelian', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Pembayaran Pembelian - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_payar_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_payar_save` AFTER INSERT ON `trn_payment_ar_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_payment_ar, 'Pembayaran Piutang', NEW.created_user, 'Input', NEW.created_date, concat('Input Pembayaran Piutang Baru - ',NEW.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_payar_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_payar_edit` AFTER UPDATE ON `trn_payment_ar_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_payment_ar, 'Pembayaran Piutang', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Pembayaran Piutang - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_payar_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_payar_hapus` AFTER DELETE ON `trn_payment_ar_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_payment_ar, 'Pembayaran Piutang', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Pembayaran Piutang - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_save` AFTER INSERT ON `trn_purchase_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_purchase, 'Faktur Pembelian', NEW.created_user, 'Input', NEW.created_date, concat('Input Faktur Beli Baru - ',NEW.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_edit` AFTER UPDATE ON `trn_purchase_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase, 'Faktur Pembelian', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Faktur Beli - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_hapus` AFTER DELETE ON `trn_purchase_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase, 'Faktur Pembelian', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Faktur Beli - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trig_update_flagPO`;
DELIMITER ;;
CREATE TRIGGER `trig_update_flagPO` AFTER INSERT ON `trn_purchase_order_det` FOR EACH ROW update trn_request_order_det set flag_po = 1 where no_request_order = new.no_request_order and id_item = new.id_item
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trig_delete_flagPO`;
DELIMITER ;;
CREATE TRIGGER `trig_delete_flagPO` AFTER DELETE ON `trn_purchase_order_det` FOR EACH ROW update trn_request_order_det set flag_po = 0 where no_request_order = old.no_request_order and id_item = old.id_item
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save_po`;
DELIMITER ;;
CREATE TRIGGER `tgr_save_po` AFTER INSERT ON `trn_purchase_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_purchase_order, 'Purchase Order', NEW.created_user, 'Input', NEW.created_date, concat('Input Purchase Order Baru - ',NEW.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_edit_po`;
DELIMITER ;;
CREATE TRIGGER `tgr_edit_po` AFTER UPDATE ON `trn_purchase_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase_order, 'Purchase Order', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Purchase Order - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_hapus_po`;
DELIMITER ;;
CREATE TRIGGER `tgr_hapus_po` AFTER DELETE ON `trn_purchase_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase_order, 'Purchase Order', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Purchase Order - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_return_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_return_save` AFTER INSERT ON `trn_purchase_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_purchase_return, 'Retur Pembelian', NEW.created_user, 'Input', NEW.created_date, concat('Input Retur Beli Baru - ',NEW.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_return_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_return_edit` AFTER UPDATE ON `trn_purchase_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase_return, 'Retur Pembelian', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Retur Beli - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_purchase_return_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_purchase_return_hapus` AFTER DELETE ON `trn_purchase_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_purchase_return, 'Retur Pembelian', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Retur Beli - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_rec_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_rec_save` AFTER INSERT ON `trn_received_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_received_order, 'Received Order', NEW.created_user, 'Input', NEW.created_date, concat('Input Received Order Baru - ',NEW.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_rec_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_rec_edit` AFTER UPDATE ON `trn_received_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_received_order, 'Received Order', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Received Order - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_rec_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_rec_hapus` AFTER DELETE ON `trn_received_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_received_order, 'Received Order', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Received Order - ',OLD.id_supplier))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_reconcile_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_reconcile_save` AFTER INSERT ON `trn_reconcile_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_reconcile, 'Rekonsiliasi Bank', NEW.created_user, 'Input', NEW.created_date, concat('Input Rekonsiliasi Bank Baru - ',NEW.id_account_bank))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_reconcile_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_reconcile_edit` AFTER UPDATE ON `trn_reconcile_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_reconcile, 'Rekonsiliasi Bank', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Rekonsiliasi Bank - ',OLD.id_account_bank))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_reconcile_del`;
DELIMITER ;;
CREATE TRIGGER `tgr_reconcile_del` AFTER DELETE ON `trn_reconcile_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_reconcile, 'Rekonsiliasi Bank', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Rekonsiliasi Bank - ',OLD.id_account_bank))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_edit_ro_det`;
DELIMITER ;;
CREATE TRIGGER `tgr_edit_ro_det` AFTER UPDATE ON `trn_request_order_det` FOR EACH ROW begin



if case when OLD.flag_status is null then 0 else OLD.flag_status end <> case when NEW.flag_status is null then 0 else NEW.flag_status end then
      insert into log_transaction(transaction_no,form,username,action,created_date,value)
      values (OLD.no_request_order, 'Request Order', 'Admin', 'Approve RO', NEW.approve_date, concat('Approve Request Order',NEW.id_item));
end if;

end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_save_ro`;
DELIMITER ;;
CREATE TRIGGER `tgr_save_ro` AFTER INSERT ON `trn_request_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_request_order, 'Request Order', NEW.created_user, 'Input', NEW.created_date, concat('Input Request Order Baru - ',NEW.id_warehouse))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_edit_ro`;
DELIMITER ;;
CREATE TRIGGER `tgr_edit_ro` AFTER UPDATE ON `trn_request_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_request_order, 'Request Order', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Request Order - ',OLD.id_warehouse))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_hapus_ro`;
DELIMITER ;;
CREATE TRIGGER `tgr_hapus_ro` AFTER DELETE ON `trn_request_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_request_order, 'Request Order', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Request Order - ',OLD.id_warehouse))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_save` AFTER INSERT ON `trn_sales_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_sales, 'Penjualan', NEW.created_user, 'Input', NEW.created_date, concat('Input Faktur Jual Baru - ',NEW.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_edit` AFTER UPDATE ON `trn_sales_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales, 'Penjualan', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Faktur Jual - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_hapus` AFTER DELETE ON `trn_sales_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales, 'Penjualan', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Faktur Jual - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_so_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_so_save` AFTER INSERT ON `trn_sales_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_sales_order, 'Sales Order', NEW.created_user, 'Input', NEW.created_date, concat('Input Sales Order Baru - ',NEW.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_so_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_so_edit` AFTER UPDATE ON `trn_sales_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales_order, 'Sales Order', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Sales Order - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_so_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_so_hapus` AFTER DELETE ON `trn_sales_order_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales_order, 'Sales Order', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Sales Order - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_return_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_return_save` AFTER INSERT ON `trn_sales_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_sales_return, 'Retur Penjualan', NEW.created_user, 'Input', NEW.created_date, concat('Input Retur Jual Baru - ',NEW.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_return_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_return_edit` AFTER UPDATE ON `trn_sales_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales_return, 'Retur Penjualan', NEW.created_user, 'Edit', NEW.created_date, concat('Edit Retur Jual - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_sales_return_hapus`;
DELIMITER ;;
CREATE TRIGGER `tgr_sales_return_hapus` AFTER DELETE ON `trn_sales_return_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_sales_return, 'Retur Penjualan', OLD.created_user, 'Hapus', OLD.created_date, concat('Hapus Retur Jual - ',OLD.id_customer))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_pindahgudang_save`;
DELIMITER ;;
CREATE TRIGGER `tgr_pindahgudang_save` AFTER INSERT ON `trn_transfer_stock_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (NEW.no_tranfer_stock, 'Pindah Gudang', NEW.created_user, 'Input', NEW.created_date, concat('Input Pindah Gudang - ',NEW.no_tranfer_stock))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_pindahgudang_edit`;
DELIMITER ;;
CREATE TRIGGER `tgr_pindahgudang_edit` AFTER UPDATE ON `trn_transfer_stock_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_tranfer_stock, 'Pindah Gudang', NEW.modified_user, 'Edit', NEW.modified_date, concat('Edit Pindah Gudang - ',OLD.no_tranfer_stock))
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `tgr_pindahgudang_del`;
DELIMITER ;;
CREATE TRIGGER `tgr_pindahgudang_del` AFTER DELETE ON `trn_transfer_stock_head` FOR EACH ROW insert into log_transaction(transaction_no,form,username,action,created_date,value)
values (OLD.no_tranfer_stock, 'Pindah Gudang', OLD.modified_user, 'Hapus', OLD.modified_date, concat('Hapus Pindah Gudang - ',OLD.no_tranfer_stock))
;;
DELIMITER ;
